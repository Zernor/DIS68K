00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/8/2016 11:03:03 AM

00000000                             1  *------------------------------------------------------------------------------------------
00000000                             2  * Title:  68K Disassembler
00000000                             3  * Written by :  Hoa, Tenzin Khando, Marco F.
00000000                             4  * Date       :
00000000                             5  * Description:  Awesome 68k disassembler 
00000000                             6  *------------------------------------------------------------------------------------------
00000400                             7      ORG    $400
00000400                             8  START:  
00000400  43F9 00000B6E              9          LEA         GREETING, A1            * Load the greeting message
00000406  103C 000E                 10          MOVE.B      #14,D0
0000040A  4E4F                      11          TRAP        #15 
0000040C  13FC 0000 00000DAA        12          MOVE.B      #0, LINE_COUNT          * Initilize the LINE_COUNTER variable 
00000414  13FC 0000 00000DAE        13          MOVE.B      #0, BAD_DATA_SWITCH            * Reset Line Count 
0000041C                            14  
0000041C                            15  ********************************************************************************************
0000041C                            16  * DESCRIPTION: Reading Addresses
0000041C                            17  *------------------ STARTING ADDRESS -------------------------------------------------------
0000041C                            18  READ_SADDR
0000041C  4287                      19          CLR.L       D7
0000041E  43F9 00000C1E             20          LEA         PROMPTSADDR, A1
00000424  103C 000E                 21          MOVE.B      #14, D0
00000428  4E4F                      22          TRAP        #15
0000042A  43F9 00000DB4             23          LEA         INPUT_HEX,A1            * Temp hold starting address
00000430  103C 0002                 24          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
00000434  4E4F                      25          TRAP        #15
00000436  6000 001E                 26          BRA         VALIDATE_STORE 
0000043A                            27  *------------------ ENDING ADDRESS -------------------------------------------------------
0000043A                            28  READ_EADDR
0000043A  43F9 00000C44             29          LEA         PROMPTEADDR, A1
00000440  103C 000E                 30          MOVE.B      #14, D0
00000444  4E4F                      31          TRAP        #15
00000446  43F9 00000DB4             32          LEA         INPUT_HEX,A1            * Temp hold ending address
0000044C  103C 0002                 33          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
00000450  4E4F                      34          TRAP        #15  
00000452  6000 0002                 35          BRA         VALIDATE_STORE 
00000456                            36  
00000456                            37  ********************************************************************************************
00000456                            38  * Validating and storing addresses
00000456                            39  *------------------ VALIDATE & STORE  ADDRESS ----------------------------------------------
00000456                            40  VALIDATE_STORE 
00000456  0C01 0004                 41          CMPI.B      #4, D1                  
0000045A  6D00 000E                 42          BLT         BADSIZES 
0000045E  0C01 0008                 43          CMPI.B      #8, D1 
00000462  6E00 0006                 44          BGT         BADSIZES
00000466  6000 002A                 45          BRA         READHEX
0000046A                            46  BADSIZES
0000046A  43F9 00000CE1             47          LEA         ERRORINPUTSIZE, A1      * Print Bad Size Error
00000470  103C 000E                 48          MOVE.B      #14,D0
00000474  4E4F                      49          TRAP        #15
00000476  B63C 0000                 50          CMP.B       #0,D3                   * D3 - HOLDS 0 if starting address has not being stored yet
0000047A  67A0                      51          BEQ         READ_SADDR
0000047C  60BC                      52          BRA         READ_EADDR 
0000047E                            53  INVALID_CHARACTER                           * Print Invalid Character for Address
0000047E  43F9 00000D01             54          LEA         INVALIDCHAR, A1
00000484  103C 000E                 55          MOVE.B      #14,D0 
00000488  4E4F                      56          TRAP        #15 
0000048A  B63C 0000                 57          CMP.B       #0,D3
0000048E  678C                      58          BEQ         READ_SADDR 
00000490  60A8                      59          BRA         READ_EADDR
00000492                            60  *------------------ Read ASCII & Convert + Store as Hex ----------------------------------
00000492                            61  READHEX       
00000492  0C11 0030                 62          CMPI.B      #$30,(A1)
00000496  6DE6                      63          BLT         INVALID_CHARACTER       * Wrong data
00000498  0C11 0040                 64          CMPI.B      #$40,(A1)
0000049C  6D00 000C                 65          BLT         NUMBER                  * Is number
000004A0  0C11 0047                 66          CMPI.B      #$47,(A1)
000004A4  6D00 000C                 67          BLT         LETTERS                 * Is Letter
000004A8  60D4                      68          BRA         INVALID_CHARACTER
000004AA                            69  NUMBER      
000004AA  0411 0030                 70          SUBI.B      #$30,(A1)               * Convert Numbers to Hex
000004AE  6000 000A                 71          BRA         STORE   
000004B2                            72  LETTERS     
000004B2  0411 0037                 73          SUBI.B      #$37,(A1)               * Convert Numbers to Hex
000004B6  6000 0002                 74          BRA         STORE
000004BA                            75  STORE       
000004BA  DE19                      76          ADD.B       (A1)+,D7                * Save data from A1 to D7
000004BC  0C11 0000                 77          CMPI.B      #0,(A1)                 * NO MORE TO READ SO CHECK IF ADDRESS IS ODD
000004C0  6700 0006                 78          BEQ         ODD_TEST     
000004C4  E98F                      79          LSL.L       #4,D7                   * Keep reading next character
000004C6  60CA                      80          BRA         READHEX
000004C8                            81  
000004C8                            82  * Before storing address - check if odd --------------------------------------------------------
000004C8                            83  ODD_TEST                                    * Check if address is odd
000004C8  7202                      84          MOVE.L      #$00000002,D1           * Put 2 in D1 so we can use it to divide input by 2
000004CA  2C07                      85          MOVE.L      D7,D6
000004CC  8CC1                      86          DIVU        D1,D6                   * Divide the input address by 2
000004CE  4846                      87          SWAP        D6                      * Store the remainder in D2
000004D0  BC3C 0001                 88          CMP.B       #1,D6                   * Is the remainder ==1
000004D4  6700 000A                 89          BEQ         ODD_TEST_FAIL           * Remainder is 1 so input fails odd test 
000004D8  B63C 0000                 90          CMP.B       #0,D3
000004DC                            91              
000004DC  6000 001E                 92          BRA         STORE_ADDRESS                           
000004E0                            93  ODD_TEST_FAIL   
000004E0  43F9 00000D53             94          LEA         ODD_ADD_MSG,A1          * Load ODD_ADD_MSG to A1
000004E6  103C 000E                 95          MOVE.B      #14,D0                  * Print odd address error message
000004EA  4E4F                      96          TRAP        #15                     
000004EC  4286                      97          CLR.L       D6
000004EE  4287                      98          CLR.L       D7      
000004F0  B63C 0000                 99          CMP.B       #0,D3
000004F4  6700 FF26                100          BEQ         READ_SADDR
000004F8  6000 FF40                101          BRA         READ_EADDR 
000004FC                           102  
000004FC                           103  * STORE ADDRESSESSS INTO MEMORY ----------------------------------------------------------------              
000004FC                           104  STORE_ADDRESS
000004FC  4286                     105          CLR.L       D6
000004FE  B63C 0000                106          CMP.B       #0,D3
00000502  6600 0036                107          BNE         STORE_ENDING
00000506                           108          
00000506  BEBC 00007000            109          CMP.L       #$00007000, D7
0000050C  6E00 001A                110          BGT         CONTINUE_STORE
00000510  6700 0016                111          BEQ         CONTINUE_STORE
00000514                           112      
00000514  4286                     113          CLR.L       D6
00000516  4287                     114          CLR.L       D7
00000518  43F9 00000D6A            115          LEA         STARTING_ADDR_7, A1         * Load ODD_ADD_MSG to A1
0000051E  103C 000E                116          MOVE.B      #14,D0                      * Print odd address error message
00000522  4E4F                     117          TRAP        #15  
00000524  6000 FEF6                118          BRA         READ_SADDR
00000528                           119          
00000528                           120  CONTINUE_STORE        
00000528  23C7 00000DB8            121          MOVE.L      D7, STARTING_ADD            * Save in the memory address 
0000052E  2C47                     122          MOVEA.L     D7, A6                      * Save starting at A6
00000530  163C 0001                123          MOVE.B      #1, D3                      * Counter - for VALID_STORE
00000534  4287                     124          CLR.L       D7
00000536  6000 FF02                125          BRA         READ_EADDR    
0000053A                           126  STORE_ENDING 
0000053A  BEB9 00000DB8            127          CMP.L       (STARTING_ADD), D7
00000540  6D00 0014                128          BLT         SGTE
00000544                           129  
00000544                           130  STORE_E             
00000544  23C7 00000DBC            131          MOVE.L      D7, ENDING_ADD  
0000054A  4287                     132          CLR.L       D7
0000054C  4EB9 00000B12            133          JSR         CLEAR_SCREEN
00000552  6000 0016                134          BRA         ADDR_LOOP
00000556                           135  SGTE                                            * Starting greater then ending
00000556  43F9 00000CAE            136          LEA         INVALIDSADDR, A1
0000055C  103C 000E                137          MOVE.B      #14, D0
00000560  4E4F                     138          TRAP        #15
00000562  4287                     139          CLR.L       D7
00000564  4283                     140          CLR.L       D3
00000566  6000 FEB4                141          BRA         READ_SADDR
0000056A                           142    
0000056A                           143          
0000056A                           144  ********************************************************************************************
0000056A                           145  *------------------ OPCODE READ ------------------------------------------------------------
0000056A                           146  * Description:
0000056A                           147  *
0000056A                           148  *------------------ Compare Current Address to Ending Adddres ------------------------------ 
0000056A                           149  ADDR_LOOP
0000056A  4EB9 00000B3C            150          JSR         CLEAR_REGISTERS             * Clear registers
00000570  2A79 00000DBC            151          MOVE.L      ENDING_ADD,A5               * Check current address against ending adress           
00000576  BDCD                     152          CMP.L       A5,A6
00000578  6E00 05F0                153          BGT         END_PROGRAM    
0000057C                           154  
0000057C  2A7C 00000000            155          MOVE.L      #$00000000, A5
00000582  0C39 0019 00000DAA       156          CMP.B       #25, LINE_COUNT             * Check line counter
0000058A  6600 0008                157          BNE         CONTINUE_ADDR_LOOP
0000058E  4EB9 00000ACA            158          JSR         USER_RESPONSE         
00000594                           159  CONTINUE_ADDR_LOOP        
00000594  5239 00000DAA            160          ADD.B       #1, LINE_COUNT              * Update Line counter
0000059A  4EB9 00000B3C            161          JSR         CLEAR_REGISTERS             * Clear registers
000005A0  4EB9 00000A64            162          JSR         PRINT_CURRENT_ADD           * PRINT CURRENT ADDRESS
000005A6                           163          
000005A6  4BF9 00000DC0            164          LEA         PRINTER, A5                  
000005AC  3E1E                     165          MOVE.W      (A6)+, D7
000005AE  4EB9 00000660            166          JSR         GET_INSTRUCTION
000005B4                           167          
000005B4  0C39 000A 00000DAE       168          CMP.B       #10, BAD_DATA_SWITCH        * Check if Bad Data Switch is True
000005BC  6700 0012                169          BEQ         PRINT_BAD_DATA  
000005C0  1AFC 0000                170          MOVE.B      #$00,(A5)+                  * Add 00 to opcode printer
000005C4                           171          
000005C4  43F9 00000DC0            172          LEA         PRINTER, A1                 * Print
000005CA  700D                     173          MOVEQ       #13,D0              
000005CC  4E4F                     174          TRAP        #15                 
000005CE                           175  
000005CE  609A                     176          BRA         ADDR_LOOP
000005D0                           177  PRINT_BAD_DATA                                  * Asume is Empty 
000005D0  4EB9 00000B3C            178          JSR         CLEAR_REGISTERS             * Clear registers
000005D6  4BF9 00000DC0            179          LEA         PRINTER, A5
000005DC  3E1E                     180          MOVE.W      (A6)+, D7
000005DE  4EB9 000005FE            181          JSR         BAD_DATA                
000005E4  1AFC 0000                182          MOVE.B      #$00,(A5)+                  * Add 00 BAD_BUFFER so we can end the line.
000005E8  43F9 00000DC0            183          LEA         PRINTER,A1                  * Load the bad data into A1
000005EE  700D                     184          MOVEQ       #13,D0                      * Set print trap
000005F0  4E4F                     185          TRAP        #15     
000005F2  13FC 0000 00000DAE       186          MOVE.B      #$00, BAD_DATA_SWITCH            * Reset Line Count 
000005FA  6000 FF6E                187          BRA         ADDR_LOOP       Go back to main loop
000005FE                           188          
000005FE                           189  
000005FE                           190  *---------------------------------------------------------------------------------------
000005FE                           191  BAD_DATA
000005FE  1AFC 0042                192          MOVE.B      #'B',(A5)+                      * Print BAD DATA using A4
00000602  1AFC 0041                193          MOVE.B      #'A',(A5)+          
00000606  1AFC 0044                194          MOVE.B      #'D',(A5)+          
0000060A  1AFC 0020                195          MOVE.B      #' ',(A5)+          
0000060E  1AFC 0044                196          MOVE.B      #'D',(A5)+          
00000612  1AFC 0041                197          MOVE.B      #'A',(A5)+          
00000616  1AFC 0054                198          MOVE.B      #'T',(A5)+          
0000061A  1AFC 0041                199          MOVE.B      #'A',(A5)+          
0000061E  1AFC 0020                200          MOVE.B      #' ',(A5)+          
00000622  1AFC 0020                201          MOVE.B      #' ',(A5)+
00000626  1AFC 0024                202          MOVE.B      #'$',(A5)+          
0000062A                           203          
0000062A  1C3C 0000                204          MOVE.B      #0,D6                           * Set 0
0000062E  3A07                     205          MOVE.W      D7,D5                           * Bad Code to D5
00000630  163C 0004                206          MOVE.B      #4,D3
00000634                           207  
00000634                           208  WORD_ASCII                          
00000634  E95D                     209          ROL.W       #4,D5                           * Move the MSB to LSB
00000636  2805                     210          MOVE.L      D5,D4                           * Move longword address to D5
00000638  0284 0000000F            211          ANDI.L      #$0000000F,D4                   * Clear everything except for MSB
0000063E                           212  DATA_ASC
0000063E  0C04 0009                213          CMPI.B      #$09,D4                             * Is the character a number?
00000642  6F00 000A                214          BLE         DATA_NUM                        * Branch if yes.
00000646                           215  DATA_LET
00000646  0604 0037                216          ADDI.B      #$37,D4                         * Convert into a prinatble ascii letter
0000064A  6000 000A                217          BRA         DATA_CHAR
0000064E                           218  DATA_NUM 
0000064E  0604 0030                219          ADDI.B      #$30,D4                         * Convert into a prinatble ascii number
00000652  6000 0002                220          BRA         DATA_CHAR
00000656                           221          
00000656                           222  DATA_CHAR
00000656  5206                     223          ADDI.B      #1,D6                           * Update counter
00000658  1AC4                     224          MOVE.B      D4,(A5)+                        * Add ASCII to printer
0000065A  BC03                     225          CMP.B      D3,D6                
0000065C  6DD6                     226          BLT         WORD_ASCII                      * if not, repeat loop
0000065E  4E75                     227          RTS
00000660                           228  *---------------------------------------------------------------------------------
00000660                           229  
00000660                           230  GET_INSTRUCTION
00000660  3C07                     231          MOVE.W      D7, D6                          * Move the instruction so we can shift it
00000662  E95E                     232          ROL.W       #4, D6                          * Shift 8 bits to the right
00000664  3A06                     233          MOVE.W      D6, D5
00000666  41F9 0000067A            234          LEA         OPCODE_JMP_TABLE, A0            * Set the table to A0 so we know where to jump to
0000066C  0246 000F                235          ANDI.W      #$000F, D6
00000670  CCFC 0008                236          MULU        #8, D6                          * Offset D5 to show the word binary for the instruction
00000674                           237          *MOVE.B      D6, D4
00000674                           238          *ADD.W       A0, D4
00000674  4EB0 6000                239          JSR         0(A0,D6)                        
00000678  4E75                     240          RTS        
0000067A                           241  
0000067A                           242  ********************************************************************************************
0000067A                           243  * OP CODE                                              
0000067A                           244  OPCODE_JMP_TABLE
0000067A  4EB9 00000798            245      JSR     OPCODE0000                           * - ADDI
00000680  4E75                     246      RTS
00000682  4EB9 0000079A            247      JSR     OPCODE0001                           * - MOVE.B
00000688  4E75                     248      RTS
0000068A  4EB9 0000079C            249      JSR     OPCODE0010                           * - MOVE.L
00000690  4E75                     250      RTS
00000692  4EB9 0000079E            251      JSR     OPCODE0011                           * - MOVE.W
00000698  4E75                     252      RTS
0000069A  4EB9 000007A0            253      JSR     OPCODE0100                           * - MOVEM, LEA, JSR, CLR, RTS, NOP
000006A0  4E75                     254      RTS
000006A2  4EB9 0000077A            255      JSR     OPCODE0101                           * - BAD DATA
000006A8  4E75                     256      RTS   
000006AA  4EB9 000007B8            257      JSR     OPCODE0110                           * - BCC, BLE, BGT
000006B0  4E75                     258      RTS
000006B2  4EB9 000007BA            259      JSR     OPCODE0111                           * - MOVEQ
000006B8  4E75                     260      RTS
000006BA  4EB9 000007C6            261      JSR     OPCODE1000                           * - DIVU
000006C0  4E75                     262      RTS 
000006C2  4EB9 000007BC            263      JSR     OPCODE1001                           * - SUB
000006C8  4E75                     264      RTS
000006CA  4EB9 00000784            265      JSR     OPCODE1010                           * - BAD DATA
000006D0  4E75                     266      RTS  
000006D2  4EB9 000007BE            267      JSR     OPCODE1011                           * - CMP
000006D8  4E75                     268      RTS
000006DA  4EB9 000007C0            269      JSR     OPCODE1100                           * - ADD, MULS
000006E0  4E75                     270      RTS
000006E2  4EB9 000007C2            271      JSR     OPCODE1101                           * - ADDA, AND, 
000006E8  4E75                     272      RTS
000006EA  4EB9 000007C4            273      JSR     OPCODE1110                           * - ASR, LSL, ROL
000006F0  4E75                     274      RTS  
000006F2  4EB9 0000078E            275      JSR     OPCODE1111                           * - BAD DATA
000006F8  4E75                     276      RTS   
000006FA                           277  
000006FA                           278  *********************************************************
000006FA                           279  * 0100 Jump Table CLR, JSR, LEA, MOVEM, RTS INSTRUCTIONS
000006FA                           280  THREE_TABLE     
000006FA  4EB9 00000828            281      JSR     THREE000            - LEA                  
00000700  4E75                     282      RTS                                 
00000702  4EB9 0000082A            283      JSR     THREE001            - LEA, CLR        
00000708  4E75                     284      RTS                                 
0000070A  4EB9 00000842            285      JSR     THREE010            - LEA
00000710  4E75                     286      RTS                                 
00000712  4EB9 00000844            287      JSR     THREE011            - LEA        
00000718  4E75                     288      RTS                                 
0000071A  4EB9 00000846            289      JSR     THREE100            - LEA, MOVEM        
00000720  4E75                     290      RTS                                 
00000722  4EB9 00000848            291      JSR     THREE101            - LEA
00000728  4E75                     292      RTS                                 
0000072A  4EB9 0000084A            293      JSR     THREE110            - LEA, MOVEM        
00000730  4E75                     294      RTS                                 
00000732  4EB9 0000084C            295      JSR     THREE111            - LEA, JSR, NOP, RTS       
00000738  4E75                     296      RTS    
0000073A                           297      
0000073A                           298  *********************************************************
0000073A                           299  * 0100 
0000073A                           300  THREE_TABLE_2     
0000073A  4EB9 00000890            301      JSR     THREE2000            - CLR.B               
00000740  4E75                     302      RTS                                 
00000742  4EB9 000008C4            303      JSR     THREE2001            - CLR.W       
00000748  4E75                     304      RTS                                 
0000074A  4EB9 000008F8            305      JSR     THREE2010            - CLR.L, MOVEM.W
00000750  4E75                     306      RTS                                 
00000752  4EB9 0000092E            307      JSR     THREE2011            - MOVEM.L, JSR        
00000758  4E75                     308      RTS                                 
0000075A  4EB9 00000930            309      JSR     THREE2100            - Bad Data       
00000760  4E75                     310      RTS                                 
00000762  4EB9 00000932            311      JSR     THREE2101            - Bad Data
00000768  4E75                     312      RTS                                 
0000076A  4EB9 00000934            313      JSR     THREE2110            - Bad Data
00000770  4E75                     314      RTS                                 
00000772  4EB9 00000936            315      JSR     THREE2111            - LEA     
00000778  4E75                     316      RTS    
0000077A                           317      
0000077A                           318   
0000077A                           319      
0000077A                           320      
0000077A                           321      
0000077A                           322  ********************************************************
0000077A                           323  
0000077A                           324  
0000077A                           325  OPCODE0101       
0000077A  0639 000A 00000DAE       326      ADD.B       #10, BAD_DATA_SWITCH             
00000782  4E75                     327      RTS
00000784                           328  OPCODE1010  
00000784  0639 000A 00000DAE       329      ADD.B       #10, BAD_DATA_SWITCH              
0000078C  4E75                     330      RTS                         
0000078E                           331  OPCODE1111 
0000078E  0639 000A 00000DAE       332      ADD.B       #10, BAD_DATA_SWITCH               
00000796  4E75                     333      RTS                          
00000798                           334  
00000798                           335  
00000798                           336  OPCODE0000
00000798  4E75                     337      RTS
0000079A                           338  OPCODE0001
0000079A  4E75                     339      RTS
0000079C                           340  OPCODE0010
0000079C  4E75                     341      RTS
0000079E                           342  OPCODE0011
0000079E  4E75                     343      RTS
000007A0                           344  OPCODE0100
000007A0  3C05                     345      MOVE.W          D5, D6                     
000007A2  E75E                     346      ROL.W           #3, D6
000007A4  3A06                     347      MOVE.W          D6, D5
000007A6  0246 0007                348      ANDI.W          #$0007, D6
000007AA  CCFC 0008                349      MULU            #8, D6
000007AE  41F8 06FA                350      LEA             THREE_TABLE, A0
000007B2  4EB0 6000                351      JSR             00(A0,D6)   
000007B6  4E75                     352      RTS
000007B8                           353  OPCODE0110
000007B8  4E75                     354      RTS
000007BA                           355  OPCODE0111
000007BA  4E75                     356      RTS
000007BC                           357  OPCODE1001
000007BC  4E75                     358      RTS
000007BE                           359  OPCODE1011
000007BE  4E75                     360      RTS  
000007C0                           361  OPCODE1100
000007C0  4E75                     362      RTS
000007C2                           363  OPCODE1101
000007C2  4E75                     364      RTS  
000007C4                           365  OPCODE1110
000007C4  4E75                     366      RTS
000007C6                           367  OPCODE1000
000007C6  4E75                     368      RTS
000007C8                           369      
000007C8                           370  
000007C8                           371                               
000007C8                           372  
000007C8                           373  *********************************************************
000007C8                           374  EA_MODE
000007C8  4EF9 00000938            375      JMP    EAMODE000            Call function with EA mode of 000
000007CE  4EF9 00000954            376      JMP    EAMODE001            Call function with EA mode of 001
000007D4  4EF9 00000956            377      JMP    EAMODE010            Call function with EA mode of 010
000007DA  4EF9 0000097A            378      JMP    EAMODE011            Call function with EA mode of 011
000007E0  4EF9 000009A2            379      JMP    EAMODE100            Call function with EA mode of 100
000007E6  4EF9 000009CA            380      JMP    EAMODE101            Call function with EA mode of 101
000007EC  4EF9 000009D4            381      JMP    EAMODE110            Call function with EA mode of 110
000007F2  4EF9 000009DE            382      JMP    EAMODE111            Call function with EA mode of 111
000007F8                           383  *********************************************************   
000007F8                           384  REGISTER
000007F8  4EF9 000009F4            385      JMP    REGISTER000          Call function with EA register of 000
000007FE  4EF9 00000A1A            386      JMP    REGISTER001          Call function with EA register of 001
00000804  4EF9 00000A40            387      JMP    REGISTER010          Call function with EA register of 010
0000080A  4EF9 00000A46            388      JMP    REGISTER011          Call function with EA register of 011
00000810  4EF9 00000A4C            389      JMP    REGISTER100          Call function with EA register of 100
00000816  4EF9 00000A52            390      JMP    REGISTER101          Call function with EA register of 101
0000081C  4EF9 00000A58            391      JMP    REGISTER110          Call function with EA register of 110
00000822  4EF9 00000A5E            392      JMP    REGISTER111          Call function with EA register of 111
00000828                           393  *********************************************************   
00000828                           394  *ABSOLUTE
00000828                           395  *    JMP    ABSOLUTE000         Call function with absolute register of 000
00000828                           396  *    JMP    ABSOLUTE001         Call function with absolute register of 001
00000828                           397  *    JMP    ABSOLUTE010         Call function with absolute register of 100
00000828                           398  *    JMP    ABSOLUTE011         Call function with absolute register of 100
00000828                           399  *    JMP    ABSOLUTE100         Call function with absolute register of 100
00000828                           400  *
00000828                           401  
00000828                           402  
00000828                           403  
00000828                           404     
00000828                           405  THREE000
00000828  4E75                     406      RTS
0000082A                           407  THREE001
0000082A  3C05                     408      MOVE.W          D5, D6                     
0000082C  E75E                     409      ROL.W           #3, D6
0000082E  3A06                     410      MOVE.W          D6, D5
00000830  0246 0007                411      ANDI.W          #$0007, D6
00000834  CCFC 0008                412      MULU            #8, D6
00000838  41F8 073A                413      LEA             THREE_TABLE_2, A0
0000083C  4EB0 6000                414      JSR             00(A0,D6) 
00000840  4E75                     415      RTS    
00000842                           416  THREE010
00000842                           417      
00000842  4E75                     418      RTS
00000844                           419  THREE011
00000844  4E75                     420      RTS
00000846                           421  THREE100
00000846  4E75                     422      RTS
00000848                           423  THREE101
00000848  4E75                     424      RTS
0000084A                           425  THREE110
0000084A  4E75                     426      RTS
0000084C                           427  THREE111
0000084C  BE7C 4E75                428          CMP.W           #$4E75, D7                      Is this an RTS function
00000850  6700 0030                429          BEQ             IS_RTS                         If so go to the ITSARTS function
00000854  BE7C 4E71                430          CMP.W           #$4E71, D7
00000858  6700 001A                431          BEQ             IS_NOP
0000085C                           432      
0000085C  3C05                     433          MOVE.W          D5, D6                     
0000085E  E75E                     434          ROL.W           #3, D6
00000860  3A06                     435          MOVE.W          D6, D5
00000862  0246 0007                436          ANDI.W          #$0007, D6
00000866  CCFC 0008                437          MULU            #8, D6
0000086A  41F8 073A                438          LEA             THREE_TABLE_2, A0
0000086E  4EB0 6000                439          JSR             00(A0,D6)   
00000872  4E75                     440          RTS
00000874                           441  IS_NOP
00000874  1AFC 004E                442      MOVE.B  #'N',(A5)+                      Insert R into output
00000878  1AFC 004F                443      MOVE.B  #'O',(A5)+                      Insert T into output
0000087C  1AFC 0050                444      MOVE.B  #'P',(A5)+                      Insert S into output
00000880  4E75                     445      RTS  
00000882                           446  IS_RTS
00000882  1AFC 0052                447      MOVE.B  #'R',(A5)+                      Insert R into output
00000886  1AFC 0054                448      MOVE.B  #'T',(A5)+                      Insert T into output
0000088A  1AFC 0053                449      MOVE.B  #'S',(A5)+                      Insert S into output
0000088E  4E75                     450      RTS       
00000890                           451      
00000890                           452      
00000890                           453  THREE2000
00000890  1AFC 0043                454      MOVE.B      #'C',(A5)+
00000894  1AFC 004C                455      MOVE.B      #'L',(A5)+
00000898  1AFC 0052                456      MOVE.B      #'R',(A5)+
0000089C  1AFC 002E                457      MOVE.B      #'.',(A5)+
000008A0  1AFC 0042                458      MOVE.B      #'B',(A5)+
000008A4  1AFC 0020                459      MOVE.B      #' ',(A5)+
000008A8  1AFC 0020                460      MOVE.B      #' ',(A5)+
000008AC                           461      
000008AC  3C05                     462      MOVE.W      D5, D6                     
000008AE  E75E                     463      ROL.W       #3, D6
000008B0  3A06                     464      MOVE.W      D6, D5
000008B2  0246 0007                465      ANDI.W      #$0007, D6
000008B6  CCFC 0008                466      MULU        #8, D6
000008BA  41F8 07C8                467      LEA         EA_MODE, A0
000008BE  4EB0 6000                468      JSR         00(A0,D6)   
000008C2                           469         
000008C2  4E75                     470      RTS
000008C4                           471  THREE2001
000008C4  1AFC 0043                472      MOVE.B      #'C',(A5)+
000008C8  1AFC 004C                473      MOVE.B      #'L',(A5)+
000008CC  1AFC 0052                474      MOVE.B      #'R',(A5)+
000008D0  1AFC 002E                475      MOVE.B      #'.',(A5)+
000008D4  1AFC 0057                476      MOVE.B      #'W',(A5)+
000008D8  1AFC 0020                477      MOVE.B      #' ',(A5)+
000008DC  1AFC 0020                478      MOVE.B      #' ',(A5)+
000008E0                           479      
000008E0  3C05                     480      MOVE.W      D5, D6                     
000008E2  E75E                     481      ROL.W       #3, D6
000008E4  3A06                     482      MOVE.W      D6, D5
000008E6  0246 0007                483      ANDI.W      #$0007, D6
000008EA  CCFC 0008                484      MULU        #8, D6
000008EE  41F8 07C8                485      LEA         EA_MODE, A0
000008F2  4EB0 6000                486      JSR         00(A0,D6)  
000008F6  4E75                     487      RTS
000008F8                           488  THREE2010
000008F8  1AFC 0043                489      MOVE.B      #'C',(A5)+
000008FC  1AFC 004C                490      MOVE.B      #'L',(A5)+
00000900  1AFC 0052                491      MOVE.B      #'R',(A5)+
00000904  1AFC 002E                492      MOVE.B      #'.',(A5)+
00000908  1AFC 004C                493      MOVE.B      #'L',(A5)+
0000090C  1AFC 0020                494      MOVE.B      #' ',(A5)+
00000910  1AFC 0020                495      MOVE.B      #' ',(A5)+
00000914                           496      
00000914  3C05                     497      MOVE.W      D5, D6                     
00000916  E75E                     498      ROL.W       #3, D6
00000918  3A06                     499      MOVE.W      D6, D5
0000091A  0246 0007                500      ANDI.W      #$0007, D6
0000091E  CCFC 0008                501      MULU        #8, D6
00000922  3206                     502      MOVE.W      D6, D1
00000924  41F8 07C8                503      LEA         EA_MODE, A0
00000928  4EB0 6000                504      JSR         00(A0,D6)  
0000092C  4E75                     505      RTS
0000092E                           506  THREE2011
0000092E  4E75                     507      RTS
00000930                           508  THREE2100
00000930  4E75                     509      RTS
00000932                           510  THREE2101
00000932  4E75                     511      RTS
00000934                           512  THREE2110
00000934  4E75                     513      RTS
00000936                           514  THREE2111 
00000936  4E75                     515      RTS
00000938                           516      
00000938                           517  
00000938                           518  
00000938                           519  
00000938                           520  EAMODE000
00000938  1AFC 0044                521      MOVE.B      #'D',(A5)+  
0000093C  3C05                     522      MOVE.W      D5, D6                     
0000093E  E75E                     523      ROL.W       #3, D6
00000940  3A06                     524      MOVE.W      D6, D5
00000942  0246 0007                525      ANDI.W      #$0007, D6
00000946  CCFC 0006                526      MULU        #6, D6
0000094A  41F8 07F8                527      LEA         REGISTER, A0
0000094E  4EB0 6000                528      JSR         00(A0,D6)
00000952  4E75                     529      RTS   
00000954                           530  EAMODE001
00000954  4E75                     531      RTS             
00000956                           532  EAMODE010 
00000956  1AFC 0028                533      MOVE.B      #'(',(A5)+  
0000095A  1AFC 0041                534      MOVE.B      #'A',(A5)+  
0000095E  3C05                     535      MOVE.W      D5, D6                     
00000960  E75E                     536      ROL.W       #3, D6
00000962  3A06                     537      MOVE.W      D6, D5
00000964  0246 0007                538      ANDI.W      #$0007, D6
00000968  CCFC 0006                539      MULU        #6, D6
0000096C  41F8 07F8                540      LEA         REGISTER, A0
00000970  4EB0 6000                541      JSR         00(A0,D6)
00000974  1AFC 0029                542      MOVE.B      #')',(A5)+
00000978  4E75                     543      RTS     
0000097A                           544  EAMODE011 
0000097A  1AFC 0028                545      MOVE.B      #'(',(A5)+  
0000097E  1AFC 0041                546      MOVE.B      #'A',(A5)+  
00000982  3C05                     547      MOVE.W      D5, D6                     
00000984  E75E                     548      ROL.W       #3, D6
00000986  3A06                     549      MOVE.W      D6, D5
00000988  0246 0007                550      ANDI.W      #$0007, D6
0000098C  CCFC 0006                551      MULU        #6, D6
00000990  41F8 07F8                552      LEA         REGISTER, A0
00000994  4EB0 6000                553      JSR         00(A0,D6)
00000998  1AFC 0029                554      MOVE.B      #')',(A5)+
0000099C  1AFC 002B                555      MOVE.B      #'+',(A5)+
000009A0  4E75                     556      RTS
000009A2                           557  EAMODE100
000009A2  1AFC 002D                558      MOVE.B      #'-',(A5)+
000009A6  1AFC 0028                559      MOVE.B      #'(',(A5)+  
000009AA  1AFC 0041                560      MOVE.B      #'A',(A5)+  
000009AE  3C05                     561      MOVE.W      D5, D6                     
000009B0  E75E                     562      ROL.W       #3, D6
000009B2  3A06                     563      MOVE.W      D6, D5
000009B4  0246 0007                564      ANDI.W      #$0007, D6
000009B8  CCFC 0006                565      MULU        #6, D6
000009BC  41F8 07F8                566      LEA         REGISTER, A0
000009C0  4EB0 6000                567      JSR         00(A0,D6)
000009C4  1AFC 0029                568      MOVE.B      #')',(A5)+
000009C8  4E75                     569      RTS             
000009CA                           570  EAMODE101
000009CA  0639 000A 00000DAE       571      ADD.B       #10, BAD_DATA_SWITCH             
000009D2  4E75                     572      RTS             
000009D4                           573  EAMODE110
000009D4  0639 000A 00000DAE       574      ADD.B       #10, BAD_DATA_SWITCH             
000009DC  4E75                     575      RTS             
000009DE                           576  EAMODE111
000009DE  3C05                     577      MOVE.W      D5, D6                     
000009E0  E75E                     578      ROL.W       #3, D6
000009E2  3A06                     579      MOVE.W      D6, D5
000009E4  0246 0007                580      ANDI.W      #$0007, D6
000009E8  CCFC 0006                581      MULU        #6, D6
000009EC  41F8 07F8                582      LEA         REGISTER, A0
000009F0  4EB0 6000                583      JSR         00(A0,D6)
000009F4                           584              
000009F4                           585  
000009F4                           586  
000009F4                           587  * Registers ------------------------------------------------
000009F4                           588  REGISTER000
000009F4  8CFC 0008                589      DIVU.W      #8,D6
000009F8  BC3C 0003                590      CMP.B       #$3,D6
000009FC  6700 0006                591      BEQ         ReadNextW
00000A00  6000 0012                592      BRA         CREGISTER000
00000A04                           593  ReadNextW
00000A04  1C3C 0000                594      MOVE.B      #0,D6                           * Set 0
00000A08  3A07                     595      MOVE.W      D7,D5                           * Bad Code to D5
00000A0A  163C 0004                596      MOVE.B      #4,D3
00000A0E  4EB8 0634                597      JSR         WORD_ASCII
00000A12  4E75                     598      RTS
00000A14                           599  CREGISTER000
00000A14  1AFC 0030                600      MOVE.B      #'0',(A5)+
00000A18  4E75                     601      RTS
00000A1A                           602  REGISTER001
00000A1A  8CFC 0008                603      DIVU.W      #8,D6
00000A1E  BC3C 0003                604      CMP.B       #$3,D6
00000A22  6700 0006                605      BEQ         ReadNextL
00000A26  6000 0012                606      BRA         CREGISTER001  
00000A2A                           607  ReadNextL
00000A2A  1C3C 0000                608      MOVE.B      #0,D6                           * Set 0
00000A2E  3A07                     609      MOVE.W      D7,D5                           * Bad Code to D5
00000A30  163C 0008                610      MOVE.B      #8,D3
00000A34  4EB8 0634                611      JSR         WORD_ASCII
00000A38  4E75                     612      RTS
00000A3A                           613  CREGISTER001  
00000A3A  1AFC 0031                614      MOVE.B      #'1',(A5)+
00000A3E  4E75                     615      RTS
00000A40                           616  REGISTER010
00000A40  1AFC 0032                617      MOVE.B      #'2',(A5)+
00000A44  4E75                     618      RTS
00000A46                           619  REGISTER011
00000A46  1AFC 0033                620      MOVE.B      #'3',(A5)+
00000A4A  4E75                     621      RTS
00000A4C                           622  REGISTER100
00000A4C  1AFC 0034                623      MOVE.B      #'4',(A5)+
00000A50  4E75                     624      RTS
00000A52                           625  REGISTER101
00000A52  1AFC 0035                626      MOVE.B      #'5',(A5)+
00000A56  4E75                     627      RTS
00000A58                           628  REGISTER110
00000A58  1AFC 0036                629      MOVE.B      #'6',(A5)+
00000A5C  4E75                     630      RTS
00000A5E                           631  REGISTER111
00000A5E  1AFC 0037                632      MOVE.B      #'7',(A5)+
00000A62  4E75                     633      RTS
00000A64                           634  *---------------------------------------------------------------
00000A64                           635  
00000A64                           636  
00000A64                           637  ********************************************************************************************
00000A64                           638  *------------------ PRINT CURRENT ADDRESS IN ASCII -----------------------------------------
00000A64                           639  PRINT_CURRENT_ADD
00000A64  240E                     640          MOVE.L      A6,D2                       * Move current address into D2
00000A66  1A3C 0000                641          MOVE.B      #0,D5                       * Set counter to read all hex
00000A6A  1C3C 0008                642          MOVE.B      #8,D6                       
00000A6E                           643  CONVERT_HEX_ASCII
00000A6E  BC05                     644          CMP.B       D5,D6                       * Check if last hex character is read
00000A70  6600 0012                645          BNE         SET_COUNTER_4               * Set counter to read 4 bits
00000A74  103C 0006                646          MOVE.B      #6, D0
00000A78  123C 0020                647          MOVE.B      #32, D1
00000A7C  4E4F                     648          TRAP        #15
00000A7E  4E4F                     649          TRAP        #15
00000A80  4E4F                     650          TRAP        #15
00000A82  4E75                     651          RTS
00000A84                           652  SET_COUNTER_4
00000A84  163C 0000                653          MOVE.B      #0,D3                       
00000A88  183C 0004                654          MOVE.B      #4,D4    
00000A8C                           655  Loop
00000A8C  B803                     656          CMP.B       D3,D4                       * Read one character at a time
00000A8E  6700 0018                657          BEQ         STORE_ONE_CHAR
00000A92  E38A                     658          LSL.L       #1,D2
00000A94  6400 0008                659          BCC         ADDZERO
00000A98  5201                     660          ADDI.B      #1,D1
00000A9A  6000 0006                661          BRA         INCREMENT_BIT_LOOP
00000A9E                           662  ADDZERO
00000A9E  0601 0000                663          ADDI.B      #0,D1
00000AA2                           664  INCREMENT_BIT_LOOP
00000AA2  5203                     665          ADDI.B      #1,D3
00000AA4  E389                     666          LSL.L       #1,D1
00000AA6  60E4                     667          BRA         Loop
00000AA8                           668  STORE_ONE_CHAR                                   * Store hex character
00000AA8  E289                     669          LSR.L       #1,D1
00000AAA  B23C 000A                670          CMP.B       #$A,D1
00000AAE  6D00 000A                671          BLT         HEX_TO_ASCII_NUMBER
00000AB2  0601 0037                672          ADDI.B      #$37,D1                     * HEX_TO_ASCII_LETTER
00000AB6  6000 0006                673          BRA         INCREMENT_NEXT_HEX_LOOP
00000ABA                           674  HEX_TO_ASCII_NUMBER
00000ABA  0601 0030                675          ADDI.B      #$30,D1
00000ABE                           676  INCREMENT_NEXT_HEX_LOOP
00000ABE  5205                     677          ADDI.B      #1,D5
00000AC0  103C 0006                678          MOVE.B      #6,D0
00000AC4  4E4F                     679          TRAP        #15
00000AC6  4281                     680          CLR.L       D1
00000AC8  60A4                     681          BRA         CONVERT_HEX_ASCII
00000ACA                           682  ***********************END OF PRINTING HEX ADDRESS TO ASCII *******************
00000ACA                           683  
00000ACA                           684  ********************************************************************************************
00000ACA                           685  *------------------ KEY -  -----------------------------------------------------------------
00000ACA                           686  * Desctiption:
00000ACA                           687  * Expect:       DO, D1, A1 to be empty
00000ACA                           688  * 
00000ACA                           689  *------------------ Prompt User for Enter, R, or Q -----------------------------------------
00000ACA                           690  USER_RESPONSE
00000ACA  43F9 00000C6A            691          LEA         PROMPTOPTIONS, A1            * Load the prompt message
00000AD0  103C 000E                692          MOVE.B      #14,D0
00000AD4  4E4F                     693          TRAP        #15 
00000AD6  13FC 0000 00000DAA       694          MOVE.B      #$00, LINE_COUNT            * Reset Line Count 
00000ADE  103C 0005                695          MOVE.B      #5, D0                      * Log keyboard input
00000AE2  4E4F                     696          TRAP        #15                 
00000AE4  B23C 000D                697          CMP.B       #$D, D1                     * Compare the key press with ENTER
00000AE8  6700 0028                698          BEQ         CLEAR_SCREEN                  
00000AEC  B23C 0072                699          CMP.B       #$72, D1                    * Compare the key press with R
00000AF0  6700 0030                700          BEQ         RESTART             
00000AF4  B23C 0052                701          CMP.B       #$52, D1                    * Compare the key press with r
00000AF8  6700 0028                702          BEQ         RESTART             
00000AFC  B23C 0071                703          CMP.B       #$71, D1                    * Compare the key press with q
00000B00  6700 0068                704          BEQ         END_PROGRAM             
00000B04  B23C 0051                705          CMP.B       #$51, D1                    * Compare the key press with Q
00000B08  6700 0060                706          BEQ         END_PROGRAM            
00000B0C  B23C 005D                707          CMP.B       #$5D, D1                    * Check the key press with ENTER
00000B10  66B8                     708          BNE         USER_RESPONSE              
00000B12                           709  CLEAR_SCREEN
00000B12  103C 000B                710          MOVE.B  #11, D0                         * Task 11 - Clear screen
00000B16  323C FF00                711          MOVE.W  #$FF00, D1          
00000B1A  4E4F                     712          TRAP    #15                 
00000B1C  4281                     713          CLR.L   D1
00000B1E  4280                     714          CLR.L   D0
00000B20  4E75                     715          RTS                 
00000B22                           716  *------------------ RESTART ----------------------------------------------------------------
00000B22                           717  RESTART
00000B22  4EB8 0B12                718          JSR         CLEAR_SCREEN
00000B26  4EB9 00000B3C            719          JSR         CLEAR_REGISTERS
00000B2C  2E7C 01000000            720          MOVEA.L     #$01000000,A7       Reset stack pointer
00000B32  2C7C 01000000            721          MOVEA.L     #$01000000,A6       Reset stack pointer
00000B38  6000 F8C6                722          BRA         START
00000B3C                           723          
00000B3C                           724  ********************************************************************************************
00000B3C                           725  *------------------ CLEAR REGISTERS --------------------------------------------------------
00000B3C                           726  * Desctiption:
00000B3C                           727  * 
00000B3C                           728  CLEAR_REGISTERS
00000B3C  4280                     729          CLR.L   D0
00000B3E  4285                     730          CLR.L   D5
00000B40  4282                     731          CLR.L   D2
00000B42  4281                     732          CLR.L   D1
00000B44  4283                     733          CLR.L   D3
00000B46  4284                     734          CLR.L   D4
00000B48  4286                     735          CLR.L   D6
00000B4A  227C 00000000            736          MOVE.L  #$00000000,A1
00000B50  247C 00000000            737          MOVE.L  #$00000000,A2
00000B56  267C 00000000            738          MOVE.L  #$00000000,A3
00000B5C  287C 00000000            739          MOVE.L  #$00000000,A4
00000B62  2A7C 00000000            740          MOVE.L  #$00000000,A5
00000B68  4E75                     741          RTS
00000B6A                           742  
00000B6A                           743  ********************************************************************************************
00000B6A                           744  ********************************************************************************************
00000B6A                           745  ********************************************************************************************
00000B6A                           746  END_PROGRAM
00000B6A  FFFF FFFF                747          SIMHALT             ; halt simulator
00000B6E                           748  ********************************************************************************************
00000B6E                           749  ********************************************************************************************
00000B6E                           750  ********************************************************************************************
00000B6E                           751  
00000B6E                           752  
00000B6E                           753  ********************************************************************************************
00000B6E                           754  * VARIABLES & MESSAGES ---------------------------------------------------------------------
00000B6E  =0000000D                755  CR        EQU       $0D
00000B6E  =0000000A                756  LF        EQU       $0A
00000B6E                           757  
00000B6E                           758  * MESSAGES ---------------------------------------------------------------------------------------------
00000B6E= 20 20 20 20 20 20 ...    759  GREETING        DC.B    '       HELLO THERE, WELCOME TO AWESOME DISASSEMBLER'
00000BA1= 0D 0A 4E 6F 74 65 ...    760                  DC.B    CR,LF,'Note: Addressess must be in HEX'
00000BC2= 0D 0A 4E 6F 74 65 ...    761                  DC.B    CR,LF,'Note: Addressess must be in caps'
00000BE4= 0D 0A 20 20 20 20 ...    762                  DC.B    CR,LF,'    : Starting Address must be greater than 70000',CR,LF,CR,LF,CR,LF,0 
00000C1E= 454E 5445 5220 4...      763  PROMPTSADDR     DC.W    'ENTER A STARTING ADDRESS (ON CAPS): ',0
00000C44= 454E 5445 5220 4...      764  PROMPTEADDR     DC.W    'ENTER A ENDING ADDRESS   (ON CAPS): ',0
00000C6A= 50 72 65 73 73 3A ...    765  PROMPTOPTIONS    DC.B    'Press: ENTER to Continue || Q or q to Quit || R OR r to Restart',CR,LF,CR,LF,0
00000CAE                           766  * ERROR MSG --------------------------------------------------------------------------------------------
00000CAE= 45 52 52 4F 52 3A ...    767  INVALIDSADDR        DC.B    'ERROR: INVALID STARTING ADDRESS VERSUS ENDING.',CR,LF,CR,LF,0
00000CE1= 45 52 52 4F 52 3A ...    768  ERRORINPUTSIZE      DC.B    'ERROR: INVALID ADDRESS SIZE',CR,LF,CR,LF,0
00000D01= 45 52 52 4F 52 3A ...    769  INVALIDCHAR         DC.B    'ERROR: INVALID ADDRESS CHARACTER',CR,LF,CR,LF,0
00000D26= 45 52 52 4F 52 3A ...    770  SGTEM               DC.B    'ERROR: STARTING ADDRESS > ENDING ADDRESS',CR,LF,CR,LF,0
00000D53= 45 52 52 4F 52 3A ...    771  ODD_ADD_MSG         DC.B    'ERROR: ODD ADDRESS',CR,LF,CR,LF,0
00000D6A= 45 52 52 4F 52 3A ...    772  STARTING_ADDR_7     DC.B    'ERROR: Invalid starting adress - must be greater than 7000',CR,LF,CR,LF,0
00000DA9                           773  * VARIABLES --------------------------------------------------------------------------------------------
00000DAA                           774  LINE_COUNT      DS.L    1
00000DAE                           775  BAD_DATA_SWITCH DS.L    1    
00000DB2                           776  SIZE            DS.B    1
00000DB4                           777  INPUT_HEX       DS.L    1   * Use to temp hold starting and ending address
00000DB8                           778  STARTING_ADD    DS.L    1   ;1 is the size, if I change to 4 then array size changes
00000DBC                           779  ENDING_ADD      DS.L    1
00000DC0= 00000001                 780  PRINTER         DC.L    1
00000DC4                           781          
00000DC4                           782          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR_LOOP           56A
ADDZERO             A9E
BADSIZES            46A
BAD_DATA            5FE
BAD_DATA_SWITCH     DAE
CLEAR_REGISTERS     B3C
CLEAR_SCREEN        B12
CONTINUE_ADDR_LOOP  594
CONTINUE_STORE      528
CONVERT_HEX_ASCII   A6E
CR                  D
CREGISTER000        A14
CREGISTER001        A3A
DATA_ASC            63E
DATA_CHAR           656
DATA_LET            646
DATA_NUM            64E
EAMODE000           938
EAMODE001           954
EAMODE010           956
EAMODE011           97A
EAMODE100           9A2
EAMODE101           9CA
EAMODE110           9D4
EAMODE111           9DE
EA_MODE             7C8
ENDING_ADD          DBC
END_PROGRAM         B6A
ERRORINPUTSIZE      CE1
GET_INSTRUCTION     660
GREETING            B6E
HEX_TO_ASCII_NUMBER  ABA
INCREMENT_BIT_LOOP  AA2
INCREMENT_NEXT_HEX_LOOP  ABE
INPUT_HEX           DB4
INVALIDCHAR         D01
INVALIDSADDR        CAE
INVALID_CHARACTER   47E
IS_NOP              874
IS_RTS              882
LETTERS             4B2
LF                  A
LINE_COUNT          DAA
LOOP                A8C
NUMBER              4AA
ODD_ADD_MSG         D53
ODD_TEST            4C8
ODD_TEST_FAIL       4E0
OPCODE0000          798
OPCODE0001          79A
OPCODE0010          79C
OPCODE0011          79E
OPCODE0100          7A0
OPCODE0101          77A
OPCODE0110          7B8
OPCODE0111          7BA
OPCODE1000          7C6
OPCODE1001          7BC
OPCODE1010          784
OPCODE1011          7BE
OPCODE1100          7C0
OPCODE1101          7C2
OPCODE1110          7C4
OPCODE1111          78E
OPCODE_JMP_TABLE    67A
PRINTER             DC0
PRINT_BAD_DATA      5D0
PRINT_CURRENT_ADD   A64
PROMPTEADDR         C44
PROMPTOPTIONS       C6A
PROMPTSADDR         C1E
READHEX             492
READNEXTL           A2A
READNEXTW           A04
READ_EADDR          43A
READ_SADDR          41C
REGISTER            7F8
REGISTER000         9F4
REGISTER001         A1A
REGISTER010         A40
REGISTER011         A46
REGISTER100         A4C
REGISTER101         A52
REGISTER110         A58
REGISTER111         A5E
RESTART             B22
SET_COUNTER_4       A84
SGTE                556
SGTEM               D26
SIZE                DB2
START               400
STARTING_ADD        DB8
STARTING_ADDR_7     D6A
STORE               4BA
STORE_ADDRESS       4FC
STORE_E             544
STORE_ENDING        53A
STORE_ONE_CHAR      AA8
THREE000            828
THREE001            82A
THREE010            842
THREE011            844
THREE100            846
THREE101            848
THREE110            84A
THREE111            84C
THREE2000           890
THREE2001           8C4
THREE2010           8F8
THREE2011           92E
THREE2100           930
THREE2101           932
THREE2110           934
THREE2111           936
THREE_TABLE         6FA
THREE_TABLE_2       73A
USER_RESPONSE       ACA
VALIDATE_STORE      456
WORD_ASCII          634
