00007000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/12/2016 6:20:19 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00007000                             7      ORG    $7000
00007000                             8  START:                  ; first instruction of program
00007000                             9  
00007000                            10  * Put program code here 
00007000                            11  **----------1. ADDI------------------
00007000                            12  **EA can't be An and #<data>
00007000                            13  *    ADDI.B  #111,D1          *Destination
00007000                            14  *    ADDI.B  #12, (A5)        * (An)
00007000                            15  *    ADDI.B  #101,(A3)+       * (An)+
00007000                            16  *    ADDI.B  #10,-(A4)        *-(An)
00007000                            17  *    ADDI.B  #13, $1234       * (xxx).W
00007000                            18  *    ADDI.B  #13, $12345678   * (xxx).L
00007000                            19  *    
00007000                            20  *    ADDI.W  #9999,D2  
00007000                            21  *    ADDI.W  #$3334,(A5)     
00007000                            22  *    ADDI.W  #$9000,(A6)+
00007000                            23  *    ADDI.W  #$8000,-(A1) 
00007000                            24  *    ADDI.W  #1313, $1234
00007000                            25  *    ADDI.W  #1300, $11111111
00007000                            26  *    
00007000                            27  *    ADDI.L  #$1010,D1
00007000                            28  *    ADDI.L  #$1010,(A2)         
00007000                            29  *    ADDI.L  #$5649,(A6)+   
00007000                            30  *    ADDI.L  #$5000,-(A2)      
00007000                            31  *    ADDI.L  #2000, $6666
00007000                            32  *    ADDI.L  #3000, $11112222
00007000                            33      
00007000                            34  **--------- TEST FOR BAD OPCODE----------------
00007000                            35  
00007000  0066 04D2                 36      ORI.W   #1234,-(A6)     
00007004  0C00 000C                 37      CMPI.B  #12,D0
00007008  0254 04D2                 38      ANDI.W  #1234, (A4)
0000700C  0678 08AE 1111            39      ADDI.W  #2222,$1111
00007012  0478 0055 2222            40      SUBI.W  #$55, $2222
00007018  0A7C 0009                 41      EORI.W  #09,SR
0000701C  0C5D 0D05                 42      CMPI.W  #3333,(A5)+
00007020  0512                      43      BTST.B  D2,(A2)
00007022  0805 000C                 44      BTST.L  #12,D5   * BTST.W IS NOT WORK
00007026  035A                      45      BCHG.B  D1,(A2)+
00007028                            46      
00007028                            47      
00007028                            48  ***-----------2. MOVE.B OPCODE-----------
00007028                            49  
00007028                            50  *    MOVE.B  #101,D1
00007028                            51  *    MOVE.B  $48,D2
00007028                            52  *    MOVE.B  #$AA,D1
00007028                            53  *    MOVE.B  D4,(A6)+
00007028                            54  *    MOVE.B  D2,(A5)
00007028                            55  *    MOVE.B  D5,-(A2)
00007028                            56  *    MOVE.B  (A1),D4
00007028                            57  *    MOVE.B  (A2)+,D3
00007028                            58  *    MOVE.B  -(A1),D1
00007028                            59  *    MOVE.B  #$44,D2
00007028                            60  *    MOVE.B  D0,-(A7)
00007028                            61  *    MOVE.B  D0, $E111
00007028                            62  *    MOVE.B  D0, $E1234560
00007028                            63  * 
00007028                            64  ***----------3. MOVE.W-------------------
00007028                            65  *    MOVE.W  #1201,D1
00007028                            66  *    MOVE.W  $418,D2
00007028                            67  *    MOVE.W  #$BA,D1
00007028                            68  *    MOVE.W  D1,(A6)+
00007028                            69  *    MOVE.W  D0,(A2)
00007028                            70  *    MOVE.W  D0,-(A0)
00007028                            71  *    MOVE.W  (A1),D1
00007028                            72  *    MOVE.W  (A1)+,D1
00007028                            73  *    MOVE.W  -(A1),D1
00007028                            74  *    MOVE.W  #$4120,D2
00007028                            75  *    MOVE.W  D0,D1
00007028                            76  *    MOVE.W  D0,$E111
00007028                            77  *    MOVE.W  D0,$1234   
00007028                            78  *  
00007028                            79  ***-----------4. MOVE.L---------------
00007028                            80  * 
00007028                            81  *    MOVE.L  #1201,D1
00007028                            82  *    MOVE.L  $418,D2
00007028                            83  *    MOVE.L  #$BA,D1
00007028                            84  *    MOVE.L  D1,(A6)+
00007028                            85  *    MOVE.L  D0,(A2)
00007028                            86  *    MOVE.L  D0,-(A0)
00007028                            87  *    MOVE.L  (A1),D1
00007028                            88  *    MOVE.L  (A1)+,D1
00007028                            89  *    MOVE.L  -(A1),D1
00007028                            90  *    MOVE.L  #$4120,D2
00007028                            91  *    MOVE.L  D2,D4
00007028                            92  *    MOVE.L  D4,$AE11  
00007028                            93  *    MOVE.L  D5,$E123 
00007028                            94  *    
00007028                            95  *
00007028                            96  ****-----------5. LEA----------------
00007028  41D3                      97      LEA     (A3),A0         (An),An
0000702A  47D3                      98      LEA     (A3),A3
0000702C  43F9 00009800             99      LEA     $9800,A1
00007032  45F8 0001                100      LEA     $0001,A2
00007036  4FF8 4000                101      LEA     $4000,A7
0000703A  4BF8 1230                102      LEA     $1230,A5
0000703E  4BF8 1301                103      LEA     $1301,A5
00007042  43F8 1001                104      LEA     $01001,A1    
00007046  43F9 00001234            105      LEA     VAR2,A1        (xxx).W,An
0000704C  45F9 FFAA1234            106      LEA     VAR3,A2        (xxx).L,An
00007052  49F8 0001                107      LEA     $1,A4
00007056  4FF9 00123456            108      LEA     $123456,A7   
0000705C                           109   
0000705C                           110  ***-------6. JRS-------------
0000705C  4EB8 0000                111      JSR      $0000
00007060  4EB9 0000A000            112      JSR      $A000
00007066  4E94                     113      JSR      (A4)
00007068  4EB8 1234                114      JSR     $1234
0000706C  4E91                     115      JSR     (A1)
0000706E  4E92                     116      JSR     (A2)
00007070  4E93                     117      JSR     (A3)
00007072  4E94                     118      JSR     (A4)
00007074  4E95                     119      JSR     (A5)
00007076  4EB9 000071F6            120      JSR     JUMP1
0000707C  4EB9 000071FA            121      JSR     JUMP2
00007082  4E91                     122      JSR     (A1)        (An)
00007084  4EB9 00001234            123      JSR     VAR2       (xxx).W
0000708A  4EB9 FFAA1234            124      JSR     VAR3       (xxx).L   
00007090                           125  **-------7. CLR-------------------
00007090                           126  ** IF THE SIZE IS NOT SPECIFIED, IT AUTOMATICALLY GO WITH SIZE W   
00007090  4240                     127      CLR      D0
00007092                           128  *   CLR      A4         *NOT An
00007092  4252                     129      CLR     (A2)        (An)
00007094  425B                     130      CLR     (A3)+       (An)+
00007096  4260                     131      CLR     -(A0)
00007098  4279 00001234            132      CLR     VAR2       (xxx).W
0000709E  4279 FFAA1234            133      CLR     VAR3       (xxx).L
000070A4  4278 1000                134      CLR     $1000
000070A8  4279 20003000            135      CLR     $20003000
000070AE                           136  *   CLR     #3          NOT #
000070AE                           137     
000070AE  4200                     138      CLR.B   D0
000070B0  4203                     139      CLR.B   D3
000070B2  4210                     140      CLR.B   (A0)
000070B4  4212                     141      CLR.B   (A2)
000070B6  421F                     142      CLR.B   (A7)+       (An)+
000070B8  4225                     143      CLR.B   -(A5)
000070BA  4238 7FFF                144      CLR.B   $7FFF     
000070BE  4239 00008000            145      CLR.B   $8000
000070C4  4239 AAAABBBB            146      CLR.B   $AAAABBBB 
000070CA                           147      
000070CA  4240                     148      CLR.W   D0
000070CC  4245                     149      CLR.W   D5 
000070CE  4250                     150      CLR.W   (A0)
000070D0  425B                     151      CLR.W   (A3)+
000070D2  4265                     152      CLR.W   -(A5)
000070D4  4278 0011                153      CLR.W   $0011      
000070D8  4279 0000BBBB            154      CLR.W   $BBBB
000070DE  4279 23232323            155      CLR.W   $23232323
000070E4                           156      
000070E4  4280                     157      CLR.L   D0
000070E6  4283                     158      CLR.L   D3 
000070E8  4290                     159      CLR.L   (A0)
000070EA  4298                     160      CLR.L   (A0)+ 
000070EC  42A4                     161      CLR.L   -(A4)       -(An)
000070EE  42B8 0001                162      CLR.L   $0001 
000070F2  42B9 12351235            163      CLR.L   $12351235
000070F8                           164      
000070F8                           165  ***---------BAD OPCODE FOR CLR------------    
000070F8                           166      
000070F8                           167   
000070F8  4042                     168      NEGX   D2    * NOT An AND #<DATA>  
000070FA  4053                     169      NEGX   (A3) 
000070FC  405C                     170      NEGX   (A4)+ 
000070FE  4064                     171      NEGX   -(A4) 
00007100  4078 3444                172      NEGX   $3444 
00007104  4079 04444999            173      NEGX   $4444999
0000710A                           174      
0000710A  4440                     175      NEG   D0    * NOT An AND #<DATA>  
0000710C  4452                     176      NEG   (A2) 
0000710E  445B                     177      NEG   (A3)+ 
00007110  4464                     178      NEG   -(A4) 
00007112  4478 1234                179      NEG   $1234 
00007116  4479 44445555            180      NEG   $44445555
0000711C                           181      
0000711C  4643                     182      NOT   D3    * NOT An AND #<DATA>  
0000711E  4652                     183      NOT   (A2) 
00007120  465B                     184      NOT   (A3)+ 
00007122  4664                     185      NOT   -(A4)
00007124  4678 0012                186      NOT   $12 
00007128  4678 1234                187      NOT   $1234 
0000712C  4679 44445555            188      NOT   $44445555
00007132                           189      
00007132  4882                     190      EXT.W D2   *ONLY W AND L AND Dn
00007134  48C7                     191      EXT.L D7  
00007136                           192      
00007136                           193      *Subtracts the destination operand and the extend bit from zero.
00007136  4800                     194      NBCD.B D0       *BYTE AND Dn ONLY, NO An And #<DATA>
00007138                           195      
00007138                           196      *Exchange the 16-bit words (halves) of a data register.
00007138  4843                     197      SWAP  D3    * ONLY WORD SIZE AND Dn
0000713A                           198      
0000713A                           199      *Computes the effective address and pushes it onto the stack. The effective address is a long address.
0000713A  4857                     200      PEA     (A7)
0000713C  4878 4000                201      PEA     $4000
00007140  4879 40001111            202      PEA     $40001111
00007146                           203      
00007146                           204      *Forces an illegal instruction exception, vector number 4. All other illegalinstruction bit patterns
00007146                           205      * are reserved for future extension of the instruction set and
00007146                           206      *should not be used to force an exception.
00007146  4AFC                     207      ILLEGAL
00007148                           208      
00007148                           209      *Tests and sets the byte operand addressed by the effective address field.
00007148  4AC3                     210      TAS   D3     * ONLY ON BYTE AND NOT An AND #<DATA> 
0000714A  4AD2                     211      TAS  (A2) 
0000714C  4ADB                     212      TAS   (A3)+ 
0000714E  4AE6                     213      TAS   -(A6)
00007150  4AF8 0022                214      TAS   $22 
00007154  4AF8 1004                215      TAS   $1004 
00007158  4AF9 49999995            216      TAS   $49999995    
0000715E                           217      
0000715E                           218      *Compares the operand with zero and sets the condition codes according to
0000715E                           219      *the results of the test.
0000715E  4A03                     220      TST.B   D3  
00007160                           221  *   TST.B   A4     INVALID   
00007160  4A15                     222      TST.B  (A5) 
00007162  4A1A                     223      TST.B  (A2)+ 
00007164  4A24                     224      TST.B  -(A4)
00007166  4A38 0034                225      TST.B   $34 
0000716A  4A38 6666                226      TST.B   $6666 
0000716E  4A39 49995555            227      TST.B   $49995555
00007174                           228  *   TST.B   #$4    INVALID  
00007174                           229      
00007174  4A43                     230      TST.W   D3  
00007176  4A55                     231      TST.W  (A5) 
00007178  4A5A                     232      TST.W  (A2)+ 
0000717A  4A64                     233      TST.W  -(A4)
0000717C  4A78 0034                234      TST.W   $34 
00007180  4A78 6666                235      TST.W   $6666 
00007184  4A79 49995555            236      TST.W   $49995555
0000718A                           237      
0000718A  4A83                     238      TST.L   D3  
0000718C  4A92                     239      TST.L  (A2) 
0000718E  4A9E                     240      TST.L  (A6)+ 
00007190  4AA4                     241      TST.L  -(A4)
00007192  4AB8 0011                242      TST.L   $11 
00007196  4AB9 0000ACDA            243      TST.L   $ACDA 
0000719C  4AB9 49995555            244      TST.L   $49995555
000071A2                           245      
000071A2                           246      *Causes a TRAP # < vector > exception.
000071A2  4E41                     247      TRAP   #1  *UNSIZED
000071A4  4E4F                     248      TRAP   #15
000071A6                           249      
000071A6                           250      *Pushes the contents of the specified address register onto the stack.
000071A6  4E52 0017                251      LINK    A2, #23
000071AA  4E53 000C                252      LINK    A3, #12
000071AE                           253      
000071AE                           254      *Loads the stack pointer from the specified address register, then loads the
000071AE                           255      *address register with the long word pulled from the top of the stack.
000071AE  4E5B                     256      UNLK   A3             *UNSIZED, An ONLY
000071B0                           257      
000071B0                           258      *Moves the contents of the user stack pointer to or from the specified address register.
000071B0  4E6B                     259      MOVE USP, A3
000071B2  4E62                     260      MOVE A2, USP
000071B4                           261      
000071B4                           262      *Asserts the RSTO signal for 512 (124 for MC68000, clock periods,
000071B4                           263      *resetting all external devices. The processor state, other than the program counter, is
000071B4                           264      *unaffected, and execution continues with the next instruction.
000071B4  4E70                     265      RESET
000071B6                           266      
000071B6                           267      *Loads the processor state information stored in the exception stack frame
000071B6                           268      *located at the top of the stack into the processor.
000071B6  4E73                     269      RTE
000071B8                           270      
000071B8                           271      *If the overflow condition is set, causes a TRAPV exception with a vector
000071B8                           272      *number 7. If the overflow condition is not set, the processor performs no operation and
000071B8                           273      *execution continues with the next instruction
000071B8  1638 0023                274      MOVE.B   $23, D3
000071BC  0643 03E8                275      ADDI.W   #1000, D3
000071C0  4E76                     276      TRAPV    *UNSIZED
000071C2                           277      
000071C2                           278      *Pulls the condition code and program counter values from the stack. The
000071C2                           279      *previous condition code and program counter values are lost. The supervisor portion
000071C2                           280      *of the status register is unaffected.
000071C2  4E77                     281      RTR
000071C4                           282      
000071C4                           283      *Program execution continues at the effective address specified by the instruction.
000071C4  4ED3                     284      JMP    (A3)
000071C6  4EF8 0080                285      JMP    $80
000071CA  4EF8 2000                286      JMP    $2000
000071CE  4EF9 10000000            287      JMP    $10000000
000071D4                           288      
000071D4                           289      *Compares the value in the data register specified in the instruction to zero and
000071D4                           290      *to the upper bound (effective address operand).
000071D4                           291      
000071D4  4380                     292      CHK.W    D0,D1 
000071D6  4391                     293      CHK.W   (A1),D1
000071D8  4398                     294      CHK.W   (A0)+,D1
000071DA  43A0                     295      CHK.W   -(A0),D1
000071DC  49B8 1111                296      CHK.W   $1111,D4
000071E0  49B9 11111111            297      CHK.W   $11111111,D4
000071E6  41BC 1000                298      CHK.W   #$1000,D0
000071EA                           299      
000071EA                           300  ****-------8. RTS-------------------
000071EA  4EB8 0000                301     JSR      $0000 
000071EE  4EB9 0000A000            302     JSR      $A000
000071F4  4E94                     303     JSR      (A4)
000071F6                           304  JUMP1    *For JSR & RTS test
000071F6  1201                     305     MOVE.B  D1, D1
000071F8  4E75                     306     RTS
000071FA                           307  
000071FA                           308  JUMP2   
000071FA  4E75                     309      RTS *For JSR & RTS test
000071FC                           310      
000071FC                           311  ***-------9. NOP-------------------
000071FC                           312  *    NOP
000071FC                           313  ***-------10. MOVEM-------------------
000071FC                           314  *
000071FC                           315  *    MOVEM.L  D0-D7,-(SP)
000071FC                           316  *    MOVEM.L  A3/D2,-(SP)
000071FC                           317  *    MOVEM.L  A1-A5/D1-D4,-(SP)
000071FC                           318  *    MOVEM.L  A1-A3,-(SP)
000071FC                           319  *    MOVEM.L  (SP)+,D0-D7
000071FC                           320  *    MOVEM.L  (SP)+,A3/D2
000071FC                           321  *    MOVEM.L  (SP)+,A1-A5/D1-D4
000071FC                           322  *    MOVEM.L  (SP)+,A1-A6/D2/D3   
000071FC                           323  *
000071FC                           324  *
000071FC                           325  ****----------10. BCC PASS---------------------- 
000071FC                           326  *   CMP.B    D0,D2
000071FC                           327  *   BCC      AAAA    
000071FC                           328  *    
000071FC                           329  ****----------11. BLE PASS---------------------  
000071FC                           330  *AAAA 
000071FC                           331  *    CMP.W    #1,D4
000071FC                           332  *    BLE      BBBB
000071FC                           333  *        
000071FC                           334  ****----------12. BGT PASS----------------------
000071FC                           335  *BBBB   
000071FC                           336  *    CMP.B    $5, D4
000071FC                           337  *    BGT      CCCC
000071FC                           338  *CCCC  
000071FC                           339  *    MOVEA.W   #4,A4         
000071FC                           340  ****-----------14. MOVEQ ------------------
000071FC                           341   
000071FC  7801                     342      MOVEQ    #1, D4   * BYTE AND An ONLY
000071FE  7802                     343      MOVEQ    #2, D4
00007200  7803                     344      MOVEQ    #3,D4
00007202  7A2D                     345      MOVEQ    #45, D5
00007204  7212                     346      MOVEQ    #$12,D1
00007206  7623                     347      MOVEQ    #$23,D3
00007208  7812                     348      MOVEQ    #$12,D4
0000720A  78FF                     349      MOVEQ    #255,D4 
0000720C                           350  
0000720C                           351  ****----------15. DIVU---------------------
0000720C  82C0                     352      DIVU    D0,D1
0000720E  80FC 1000                353      DIVU    #$1000,D0
00007212  82D0                     354      DIVU    (A0),D1
00007214  88F9 11111111            355      DIVU    $11111111,D4
0000721A                           356    
0000721A                           357  ****----------16. SUB-------------------------
0000721A                           358  *    SUB.B   $11,D0
0000721A                           359  *    SUB.W   $1111,D0
0000721A                           360  *    SUB.L   $11111111,D0 
0000721A                           361  *    SUB.B   $1111,D0
0000721A                           362  *    SUB.W   $11111111,D0
0000721A                           363  *    SUB.B   D0,$11
0000721A                           364  *    SUB.W   D0,$1111
0000721A                           365  *    SUB.L   D0,$11111111 
0000721A                           366  ****-----------17. CMP----------------- 
0000721A                           367  *      CMP.W  #1, D6   
0000721A                           368  *      CMP.W  A2, D2     *An case 
0000721A                           369  *      CMP.W  D2, A3     *BAD DATA
0000721A                           370  *      CMP.W  D2, D6     *Dn case
0000721A                           371  *      CMP.W  (A3),D5    *(An) case
0000721A                           372  *      CMP.B  -(A1),D0  *-(An) case
0000721A                           373  *      CMP.B  (A2)+, D1  *(An)+ case
0000721A                           374  *      CMP.W  #$10, D4   * (xxx).W
0000721A                           375  *      CMP.L  #$2000,D5  * (xxx).L
0000721A                           376  ****-----------18. MULS------------------   
0000721A                           377  *     MULS    $11,D0
0000721A                           378  *     MULS.W  $1111,D2
0000721A                           379  *     MULS    $1111,D2
0000721A                           380  *     MULS    $11111111,D5
0000721A                           381  *     MULS.W  #1,D4
0000721A                           382  *     MULS.W  D0,D5
0000721A                           383  *     MULS.W  #$1111,D4
0000721A                           384  *     MULS.W  #$03,D3
0000721A                           385  *     MULS.W  D0,D6
0000721A                           386  *TEST_FORWARD   RTS
0000721A                           387  ****-----------19. AND-------------------
0000721A                           388  *    AND.B   $11,D5
0000721A                           389  *    AND.W   $1111,D5
0000721A                           390  *    AND.L   $11111111,D5
0000721A                           391  *    AND.B   $1111,D5
0000721A                           392  *    AND.W   $11111111,D5  
0000721A                           393  *    AND.B   D5,$11
0000721A                           394  *    AND.W   D5,$1111
0000721A                           395  *    AND.L   D5,$11111111
0000721A                           396  *    AND.B   D1,$300
0000721A                           397  *    AND.B   D1,D0
0000721A                           398  *    AND.B   D2,D0
0000721A                           399  *    AND.W   D3,D0
0000721A                           400  *    AND.B   D4,D0
0000721A                           401  *    AND.B   D5,D0
0000721A                           402  *    AND.L   D6,D0
0000721A                           403  *    AND.B   D7,D0
0000721A                           404  *    AND.W   D1,D1
0000721A                           405  *    AND.L   D1,D1
0000721A                           406  *    AND.B   (A1),D1
0000721A                           407  *    AND.B   (A2),D2
0000721A                           408  *    AND.L   (A3),D2
0000721A                           409  *    AND.B   (A4),D2
0000721A                           410  *    AND.W   (A5),D2
0000721A                           411  *    AND.B   (A6),D2
0000721A                           412  *    AND.L   (A7),D2
0000721A                           413  *    AND.B   (A2)+,D2            
0000721A                           414  *    AND.L   -(A2),D2
0000721A                           415  *    AND.B   $4000,D2
0000721A                           416  *    AND.B   $7F,D2
0000721A                           417  *    AND.B   $80000000,D2
0000721A                           418  *    AND.W   D2,$80000000
0000721A                           419  *    AND.W   D3,$80000000
0000721A                           420  *    AND.W   D4,$80000000
0000721A                           421  *    AND.W   D5,$80000000
0000721A                           422  *    AND.W   D6,$80000000
0000721A                           423  *    AND.W   D7,$80000000
0000721A                           424  *    
0000721A                           425  *
0000721A                           426  ****----------20. ADD--------------------------
0000721A                           427  *    ADD.B   $11,D5
0000721A                           428  *    ADD.W   $1111,D5
0000721A                           429  *    ADD.L   $11111111,D5
0000721A                           430  *    ADD.B   $1111,D5
0000721A                           431  *    ADD.W   $11111111,D5
0000721A                           432  *    ADD.B   $48,D2
0000721A                           433  *    ADD.B   #$DA,D3
0000721A                           434  *    ADD.B   D3,(A6)+
0000721A                           435  *    ADD.B   D1,(A2)
0000721A                           436  *    ADD.B   D5,-(A0)
0000721A                           437  *    ADD.B   #$40,D2
0000721A                           438  *    ADD.B   D1,$E115
0000721A                           439  *    ADD.B   D5,$E1234567   
0000721A                           440  *    ADD.W   #101,A6
0000721A                           441  *    ADD.W   $48,D3
0000721A                           442  *    ADD.W   #$AA,D6
0000721A                           443  *    ADD.W   D3,(A5)+
0000721A                           444  *    ADD.W   D5,(A2)
0000721A                           445  *    ADD.W   D2,-(A0)
0000721A                           446  *    ADD.W   (A1),A5
0000721A                           447  *    ADD.W   (A1)+,A1
0000721A                           448  *    ADD.W   -(A1),A6
0000721A                           449  *    ADD.W   #$40,D7
0000721A                           450  *    ADD.W   D0,A2
0000721A                           451  *    ADD.W   D0,$E115
0000721A                           452  *    ADD.W   D0,$E1234567
0000721A                           453  *    ADD.B   D5,$11
0000721A                           454  *    ADD.W   D5,$1111
0000721A                           455  *    ADD.L   D5,$11111111
0000721A                           456  *
0000721A                           457  **
0000721A                           458  ****----------21. ADDA-------------------------
0000721A                           459  *
0000721A                           460  *    ADDX    -(A0),-(A1)  ; bad case
0000721A                           461  *    ADDA.W  D0,A0
0000721A                           462  *    ADDA.L  D1,A1
0000721A                           463  *    ADD.L   A0,A1  
0000721A                           464  *    ADDA.W  #123,A5
0000721A                           465  *    ADDA.L  #123,A5
0000721A                           466  *    ADD.L   #$123,A5
0000721A                           467  *             
0000721A                           468  ***----------22. ASR----------------------------    
0000721A                           469  *    ASR.W   #8,D0
0000721A                           470  *    ASR.W   #7,D1
0000721A                           471  *    ASR.W   #6,D2
0000721A                           472  *    ASR.W   #5,D3
0000721A                           473  *    ASR.W   #4,D4
0000721A                           474  *    ASR.W   #3,D5
0000721A                           475  *    ASR.W   #2,D6
0000721A                           476  *    ASR.W   #1,D7
0000721A                           477  *    
0000721A                           478  *    ASR.B   #8,D0
0000721A                           479  *    ASR.B   #7,D1
0000721A                           480  *    ASR.B   #6,D2
0000721A                           481  *    ASR.B   #5,D3
0000721A                           482  *    ASR.B   #4,D4
0000721A                           483  *    ASR.B   #3,D5
0000721A                           484  *    ASR.B   #2,D6
0000721A                           485  *    ASR.B   #1,D7
0000721A                           486  *    CLR.B   (A0)
0000721A                           487  *    ASR.W   $0FF00000
0000721A                           488  *    ASR.W   $0FF00000
0000721A                           489  *    
0000721A                           490  *    ASR.W   $0FF00000
0000721A                           491  *    ASR.W   (A4)+
0000721A                           492  *    ASR.W   -(A6)
0000721A                           493  *
0000721A                           494  *    ASR.B   D1, D0
0000721A                           495  *    ASR.B   D2, D0
0000721A                           496  *    ASR.B   D3, D0
0000721A                           497  *    ASR.B   D4, D0
0000721A                           498  *    ASR.B   D5, D6
0000721A                           499  *    ASR.B   D1, D6
0000721A                           500  *    ASR.B   D2, D6
0000721A                           501  *    ASR.B   D3, D6
0000721A                           502  *    ASR.L   #8,D0
0000721A                           503  *    ASR.L   #7,D1
0000721A                           504  *    ASR.L   #8,D2
0000721A                           505  *    ASR.L   #6,D3
0000721A                           506  *    ASR.L   #5,D4
0000721A                           507  *    ASR.L   #4,D5
0000721A                           508  *    ASR.L   #3,D6
0000721A                           509  *    ASR.L   #2,D7
0000721A                           510  *    ASR.L   #1,D7
0000721A                           511  *            
0000721A                           512  ***----------23. LSL----------------------------
0000721A                           513  *    LSL.B   D0,D2
0000721A                           514  *    LSL.L   D0,D2
0000721A                           515  *    lSR.B   #7,D4  ;  bad case for LSL
0000721A                           516  *    LSL.L   #8,D4
0000721A                           517  *    LSL.W   $0FF00000 ; 
0000721A                           518  *    LSL.W   (a4)+
0000721A                           519  *    LSL.W   -(a6)
0000721A                           520  ***-----------24. ROL-----------------
0000721A                           521  *    ROL.W   #6,D0
0000721A                           522  *    ROL.B   D0,D2
0000721A                           523  *    ROL.L   D0,D2
0000721A                           524  *    ROL.B   #7,D4  ;  bad case for LSL
0000721A                           525  *    ROL.L   #8,D4
0000721A                           526  *    ROL.W   $0FF00000 ; 
0000721A                           527  *    ROL.W   (a4)+
0000721A                           528  *    ROL.w   -(a6)
0000721A                           529  *    ROL.W   (a4)+     
0000721A                           530      
0000721A  FFFF FFFF                531      SIMHALT             ; halt simulator
0000721E                           532  
0000721E                           533  * Put variables and constants here
0000721E                           534      
0000721E  =000000BA                535  VAR1    EQU $BA    BVAR
0000721E  =00001234                536  VAR2    EQU $1234   WVAR
0000721E  =FFAA1234                537  VAR3    EQU $FFAA1234  WVAR
0000721E  =00000012                538  VAR4    EQU $12     DVAR
0000721E  =00000000                539  VAR5    EQU $00000000  ZVAR
0000721E  =FCFCFCFC                540  VAR6   EQU $FCFCFCFC    VBIN1
0000721E                           541  
0000721E                           542      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
JUMP1               71F6
JUMP2               71FA
START               7000
VAR1                BA
VAR2                1234
VAR3                FFAA1234
VAR4                12
VAR5                0
VAR6                FCFCFCFC
