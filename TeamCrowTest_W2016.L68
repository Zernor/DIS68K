00007000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/12/2016 6:20:19 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00007000                             7      ORG    $7000
00007000                             8  START:                  ; first instruction of program
00007000                             9      
00007000                            10  * Put program code here 
00007000                            11  **----------1. ADDI------------------
00007000                            12  **EA can't be An and #<data>
00007000  0601 006F                 13      ADDI.B  #111,D1          *Destination
00007004  0615 000C                 14      ADDI.B  #12, (A5)        * (An)
00007008  061B 0065                 15      ADDI.B  #101,(A3)+       * (An)+
0000700C  0624 000A                 16      ADDI.B  #10,-(A4)        *-(An)
00007010  0638 000D 1234            17      ADDI.B  #13, $1234       * (xxx).W
00007016  0639 000D 12345678        18      ADDI.B  #13, $12345678   * (xxx).L
0000701E                            19      
0000701E  0642 270F                 20      ADDI.W  #9999,D2  
00007022  0655 3334                 21      ADDI.W  #$3334,(A5)     
00007026  065E 9000                 22      ADDI.W  #$9000,(A6)+
0000702A  0661 8000                 23      ADDI.W  #$8000,-(A1) 
0000702E  0678 0521 1234            24      ADDI.W  #1313, $1234
00007034  0679 0514 11111111        25      ADDI.W  #1300, $11111111
0000703C                            26      
0000703C  0681 00001010             27      ADDI.L  #$1010,D1
00007042  0692 00001010             28      ADDI.L  #$1010,(A2)         
00007048  069E 00005649             29      ADDI.L  #$5649,(A6)+   
0000704E  06A2 00005000             30      ADDI.L  #$5000,-(A2)      
00007054  06B8 000007D0 6666        31      ADDI.L  #2000, $6666
0000705C  06B9 00000BB8 11112222    32      ADDI.L  #3000, $11112222
00007066                            33      
00007066                            34  **--------- TEST FOR BAD OPCODE----------------
00007066                            35  
00007066  0066 04D2                 36      ORI.W   #1234,-(A6)     
0000706A  0C00 000C                 37      CMPI.B  #12,D0
0000706E  0254 04D2                 38      ANDI.W  #1234, (A4)
00007072  0678 08AE 1111            39      ADDI.W  #2222,$1111
00007078  0478 0055 2222            40      SUBI.W  #$55, $2222
0000707E  0A7C 0009                 41      EORI.W  #09,SR
00007082  0C5D 0D05                 42      CMPI.W  #3333,(A5)+
00007086  0512                      43      BTST.B  D2,(A2)
00007088  0805 000C                 44      BTST.L  #12,D5   * BTST.W IS NOT WORK
0000708C  035A                      45      BCHG.B  D1,(A2)+
0000708E                            46      
0000708E                            47      
0000708E                            48  ***-----------2. MOVE.B OPCODE-----------
0000708E                            49  
0000708E                            50  *    MOVE.B  #101,D1
0000708E                            51  *    MOVE.B  $48,D2
0000708E                            52  *    MOVE.B  #$AA,D1
0000708E                            53  *    MOVE.B  D4,(A6)+
0000708E                            54  *    MOVE.B  D2,(A5)
0000708E                            55  *    MOVE.B  D5,-(A2)
0000708E                            56  *    MOVE.B  (A1),D4
0000708E                            57  *    MOVE.B  (A2)+,D3
0000708E                            58  *    MOVE.B  -(A1),D1
0000708E                            59  *    MOVE.B  #$44,D2
0000708E                            60  *    MOVE.B  D0,-(A7)
0000708E                            61  *    MOVE.B  D0, $E111
0000708E                            62  *    MOVE.B  D0, $E1234560
0000708E                            63  * 
0000708E                            64  ***----------3. MOVE.W-------------------
0000708E                            65  *    MOVE.W  #1201,D1
0000708E                            66  *    MOVE.W  $418,D2
0000708E                            67  *    MOVE.W  #$BA,D1
0000708E                            68  *    MOVE.W  D1,(A6)+
0000708E                            69  *    MOVE.W  D0,(A2)
0000708E                            70  *    MOVE.W  D0,-(A0)
0000708E                            71  *    MOVE.W  (A1),D1
0000708E                            72  *    MOVE.W  (A1)+,D1
0000708E                            73  *    MOVE.W  -(A1),D1
0000708E                            74  *    MOVE.W  #$4120,D2
0000708E                            75  *    MOVE.W  D0,D1
0000708E                            76  *    MOVE.W  D0,$E111
0000708E                            77  *    MOVE.W  D0,$1234   
0000708E                            78  *  
0000708E                            79  ***-----------4. MOVE.L---------------
0000708E                            80  * 
0000708E                            81  *    MOVE.L  #1201,D1
0000708E                            82  *    MOVE.L  $418,D2
0000708E                            83  *    MOVE.L  #$BA,D1
0000708E                            84  *    MOVE.L  D1,(A6)+
0000708E                            85  *    MOVE.L  D0,(A2)
0000708E                            86  *    MOVE.L  D0,-(A0)
0000708E                            87  *    MOVE.L  (A1),D1
0000708E                            88  *    MOVE.L  (A1)+,D1
0000708E                            89  *    MOVE.L  -(A1),D1
0000708E                            90  *    MOVE.L  #$4120,D2
0000708E                            91  *    MOVE.L  D2,D4
0000708E                            92  *    MOVE.L  D4,$AE11  
0000708E                            93  *    MOVE.L  D5,$E123 
0000708E                            94  *    
0000708E                            95  *
0000708E                            96  ****-----------5. LEA----------------
0000708E  41D3                      97      LEA     (A3),A0         (An),An
00007090  47D3                      98      LEA     (A3),A3
00007092  43F9 00009800             99      LEA     $9800,A1
00007098  45F8 0001                100      LEA     $0001,A2
0000709C  4FF8 4000                101      LEA     $4000,A7
000070A0  4BF8 1230                102      LEA     $1230,A5
000070A4  4BF8 1301                103      LEA     $1301,A5
000070A8  43F8 1001                104      LEA     $01001,A1    
000070AC  43F9 00001234            105      LEA     VAR2,A1        (xxx).W,An
000070B2  45F9 FFAA1234            106      LEA     VAR3,A2        (xxx).L,An
000070B8  49F8 0001                107      LEA     $1,A4
000070BC  4FF9 00123456            108      LEA     $123456,A7   
000070C2                           109   
000070C2                           110  ***-------6. JRS-------------
000070C2  4EB8 0000                111      JSR      $0000
000070C6  4EB9 0000A000            112      JSR      $A000
000070CC  4E94                     113      JSR      (A4)
000070CE  4EB8 1234                114      JSR     $1234
000070D2  4E91                     115      JSR     (A1)
000070D4  4E92                     116      JSR     (A2)
000070D6  4E93                     117      JSR     (A3)
000070D8  4E94                     118      JSR     (A4)
000070DA  4E95                     119      JSR     (A5)
000070DC  4EB9 0000725C            120      JSR     JUMP1
000070E2  4EB9 00007260            121      JSR     JUMP2
000070E8  4E91                     122      JSR     (A1)        (An)
000070EA  4EB9 00001234            123      JSR     VAR2       (xxx).W
000070F0  4EB9 FFAA1234            124      JSR     VAR3       (xxx).L   
000070F6                           125  **-------7. CLR-------------------
000070F6                           126  ** IF THE SIZE IS NOT SPECIFIED, IT AUTOMATICALLY GO WITH SIZE W   
000070F6  4240                     127      CLR      D0
000070F8                           128  *   CLR      A4         *NOT An
000070F8  4252                     129      CLR     (A2)        (An)
000070FA  425B                     130      CLR     (A3)+       (An)+
000070FC  4260                     131      CLR     -(A0)
000070FE  4279 00001234            132      CLR     VAR2       (xxx).W
00007104  4279 FFAA1234            133      CLR     VAR3       (xxx).L
0000710A  4278 1000                134      CLR     $1000
0000710E  4279 20003000            135      CLR     $20003000
00007114                           136  *   CLR     #3          NOT #
00007114                           137     
00007114  4200                     138      CLR.B   D0
00007116  4203                     139      CLR.B   D3
00007118  4210                     140      CLR.B   (A0)
0000711A  4212                     141      CLR.B   (A2)
0000711C  421F                     142      CLR.B   (A7)+       (An)+
0000711E  4225                     143      CLR.B   -(A5)
00007120  4238 7FFF                144      CLR.B   $7FFF     
00007124  4239 00008000            145      CLR.B   $8000
0000712A  4239 AAAABBBB            146      CLR.B   $AAAABBBB 
00007130                           147      
00007130  4240                     148      CLR.W   D0
00007132  4245                     149      CLR.W   D5 
00007134  4250                     150      CLR.W   (A0)
00007136  425B                     151      CLR.W   (A3)+
00007138  4265                     152      CLR.W   -(A5)
0000713A  4278 0011                153      CLR.W   $0011      
0000713E  4279 0000BBBB            154      CLR.W   $BBBB
00007144  4279 23232323            155      CLR.W   $23232323
0000714A                           156      
0000714A  4280                     157      CLR.L   D0
0000714C  4283                     158      CLR.L   D3 
0000714E  4290                     159      CLR.L   (A0)
00007150  4298                     160      CLR.L   (A0)+ 
00007152  42A4                     161      CLR.L   -(A4)       -(An)
00007154  42B8 0001                162      CLR.L   $0001 
00007158  42B9 12351235            163      CLR.L   $12351235
0000715E                           164      
0000715E                           165  ***---------BAD OPCODE FOR CLR------------    
0000715E                           166      
0000715E                           167   
0000715E  4042                     168      NEGX   D2    * NOT An AND #<DATA>  
00007160  4053                     169      NEGX   (A3) 
00007162  405C                     170      NEGX   (A4)+ 
00007164  4064                     171      NEGX   -(A4) 
00007166  4078 3444                172      NEGX   $3444 
0000716A  4079 04444999            173      NEGX   $4444999
00007170                           174      
00007170  4440                     175      NEG   D0    * NOT An AND #<DATA>  
00007172  4452                     176      NEG   (A2) 
00007174  445B                     177      NEG   (A3)+ 
00007176  4464                     178      NEG   -(A4) 
00007178  4478 1234                179      NEG   $1234 
0000717C  4479 44445555            180      NEG   $44445555
00007182                           181      
00007182  4643                     182      NOT   D3    * NOT An AND #<DATA>  
00007184  4652                     183      NOT   (A2) 
00007186  465B                     184      NOT   (A3)+ 
00007188  4664                     185      NOT   -(A4)
0000718A  4678 0012                186      NOT   $12 
0000718E  4678 1234                187      NOT   $1234 
00007192  4679 44445555            188      NOT   $44445555
00007198                           189      
00007198  4882                     190      EXT.W D2   *ONLY W AND L AND Dn
0000719A  48C7                     191      EXT.L D7  
0000719C                           192      
0000719C                           193      *Subtracts the destination operand and the extend bit from zero.
0000719C  4800                     194      NBCD.B D0       *BYTE AND Dn ONLY, NO An And #<DATA>
0000719E                           195      
0000719E                           196      *Exchange the 16-bit words (halves) of a data register.
0000719E  4843                     197      SWAP  D3    * ONLY WORD SIZE AND Dn
000071A0                           198      
000071A0                           199      *Computes the effective address and pushes it onto the stack. The effective address is a long address.
000071A0  4857                     200      PEA     (A7)
000071A2  4878 4000                201      PEA     $4000
000071A6  4879 40001111            202      PEA     $40001111
000071AC                           203      
000071AC                           204      *Forces an illegal instruction exception, vector number 4. All other illegalinstruction bit patterns
000071AC                           205      * are reserved for future extension of the instruction set and
000071AC                           206      *should not be used to force an exception.
000071AC  4AFC                     207      ILLEGAL
000071AE                           208      
000071AE                           209      *Tests and sets the byte operand addressed by the effective address field.
000071AE  4AC3                     210      TAS   D3     * ONLY ON BYTE AND NOT An AND #<DATA> 
000071B0  4AD2                     211      TAS  (A2) 
000071B2  4ADB                     212      TAS   (A3)+ 
000071B4  4AE6                     213      TAS   -(A6)
000071B6  4AF8 0022                214      TAS   $22 
000071BA  4AF8 1004                215      TAS   $1004 
000071BE  4AF9 49999995            216      TAS   $49999995    
000071C4                           217      
000071C4                           218      *Compares the operand with zero and sets the condition codes according to
000071C4                           219      *the results of the test.
000071C4  4A03                     220      TST.B   D3  
000071C6                           221  *   TST.B   A4     INVALID   
000071C6  4A15                     222      TST.B  (A5) 
000071C8  4A1A                     223      TST.B  (A2)+ 
000071CA  4A24                     224      TST.B  -(A4)
000071CC  4A38 0034                225      TST.B   $34 
000071D0  4A38 6666                226      TST.B   $6666 
000071D4  4A39 49995555            227      TST.B   $49995555
000071DA                           228  *   TST.B   #$4    INVALID  
000071DA                           229      
000071DA  4A43                     230      TST.W   D3  
000071DC  4A55                     231      TST.W  (A5) 
000071DE  4A5A                     232      TST.W  (A2)+ 
000071E0  4A64                     233      TST.W  -(A4)
000071E2  4A78 0034                234      TST.W   $34 
000071E6  4A78 6666                235      TST.W   $6666 
000071EA  4A79 49995555            236      TST.W   $49995555
000071F0                           237      
000071F0  4A83                     238      TST.L   D3  
000071F2  4A92                     239      TST.L  (A2) 
000071F4  4A9E                     240      TST.L  (A6)+ 
000071F6  4AA4                     241      TST.L  -(A4)
000071F8  4AB8 0011                242      TST.L   $11 
000071FC  4AB9 0000ACDA            243      TST.L   $ACDA 
00007202  4AB9 49995555            244      TST.L   $49995555
00007208                           245      
00007208                           246      *Causes a TRAP # < vector > exception.
00007208  4E41                     247      TRAP   #1  *UNSIZED
0000720A  4E4F                     248      TRAP   #15
0000720C                           249      
0000720C                           250      *Pushes the contents of the specified address register onto the stack.
0000720C  4E52 0017                251      LINK    A2, #23
00007210  4E53 000C                252      LINK    A3, #12
00007214                           253      
00007214                           254      *Loads the stack pointer from the specified address register, then loads the
00007214                           255      *address register with the long word pulled from the top of the stack.
00007214  4E5B                     256      UNLK   A3             *UNSIZED, An ONLY
00007216                           257      
00007216                           258      *Moves the contents of the user stack pointer to or from the specified address register.
00007216  4E6B                     259      MOVE USP, A3
00007218  4E62                     260      MOVE A2, USP
0000721A                           261      
0000721A                           262      *Asserts the RSTO signal for 512 (124 for MC68000, clock periods,
0000721A                           263      *resetting all external devices. The processor state, other than the program counter, is
0000721A                           264      *unaffected, and execution continues with the next instruction.
0000721A  4E70                     265      RESET
0000721C                           266      
0000721C                           267      *Loads the processor state information stored in the exception stack frame
0000721C                           268      *located at the top of the stack into the processor.
0000721C  4E73                     269      RTE
0000721E                           270      
0000721E                           271      *If the overflow condition is set, causes a TRAPV exception with a vector
0000721E                           272      *number 7. If the overflow condition is not set, the processor performs no operation and
0000721E                           273      *execution continues with the next instruction
0000721E  1638 0023                274      MOVE.B   $23, D3
00007222  0643 03E8                275      ADDI.W   #1000, D3
00007226  4E76                     276      TRAPV    *UNSIZED
00007228                           277      
00007228                           278      *Pulls the condition code and program counter values from the stack. The
00007228                           279      *previous condition code and program counter values are lost. The supervisor portion
00007228                           280      *of the status register is unaffected.
00007228  4E77                     281      RTR
0000722A                           282      
0000722A                           283      *Program execution continues at the effective address specified by the instruction.
0000722A  4ED3                     284      JMP    (A3)
0000722C  4EF8 0080                285      JMP    $80
00007230  4EF8 2000                286      JMP    $2000
00007234  4EF9 10000000            287      JMP    $10000000
0000723A                           288      
0000723A                           289      *Compares the value in the data register specified in the instruction to zero and
0000723A                           290      *to the upper bound (effective address operand).
0000723A                           291      
0000723A  4380                     292      CHK.W    D0,D1 
0000723C  4391                     293      CHK.W   (A1),D1
0000723E  4398                     294      CHK.W   (A0)+,D1
00007240  43A0                     295      CHK.W   -(A0),D1
00007242  49B8 1111                296      CHK.W   $1111,D4
00007246  49B9 11111111            297      CHK.W   $11111111,D4
0000724C  41BC 1000                298      CHK.W   #$1000,D0
00007250                           299      
00007250                           300  ****-------8. RTS-------------------
00007250  4EB8 0000                301     JSR      $0000 
00007254  4EB9 0000A000            302     JSR      $A000
0000725A  4E94                     303     JSR      (A4)
0000725C                           304  JUMP1    *For JSR & RTS test
0000725C  1201                     305     MOVE.B  D1, D1
0000725E  4E75                     306     RTS
00007260                           307  
00007260                           308  JUMP2   
00007260  4E75                     309      RTS *For JSR & RTS test
00007262                           310      
00007262                           311  ***-------9. NOP-------------------
00007262                           312  *    NOP
00007262                           313  ***-------10. MOVEM-------------------
00007262                           314  *
00007262                           315  *    MOVEM.L  D0-D7,-(SP)
00007262                           316  *    MOVEM.L  A3/D2,-(SP)
00007262                           317  *    MOVEM.L  A1-A5/D1-D4,-(SP)
00007262                           318  *    MOVEM.L  A1-A3,-(SP)
00007262                           319  *    MOVEM.L  (SP)+,D0-D7
00007262                           320  *    MOVEM.L  (SP)+,A3/D2
00007262                           321  *    MOVEM.L  (SP)+,A1-A5/D1-D4
00007262                           322  *    MOVEM.L  (SP)+,A1-A6/D2/D3   
00007262                           323  *
00007262                           324  *
00007262                           325  ****----------10. BCC PASS---------------------- 
00007262                           326  *   CMP.B    D0,D2
00007262                           327  *   BCC      AAAA    
00007262                           328  *    
00007262                           329  ****----------11. BLE PASS---------------------  
00007262                           330  *AAAA 
00007262                           331  *    CMP.W    #1,D4
00007262                           332  *    BLE      BBBB
00007262                           333  *        
00007262                           334  ****----------12. BGT PASS----------------------
00007262                           335  *BBBB   
00007262                           336  *    CMP.B    $5, D4
00007262                           337  *    BGT      CCCC
00007262                           338  *CCCC  
00007262                           339  *    MOVEA.W   #4,A4         
00007262                           340  ****-----------14. MOVEQ ------------------
00007262                           341   
00007262  7801                     342      MOVEQ    #1, D4   * BYTE AND An ONLY
00007264  7802                     343      MOVEQ    #2, D4
00007266  7803                     344      MOVEQ    #3,D4
00007268  7A2D                     345      MOVEQ    #45, D5
0000726A  7212                     346      MOVEQ    #$12,D1
0000726C  7623                     347      MOVEQ    #$23,D3
0000726E  7812                     348      MOVEQ    #$12,D4
00007270  78FF                     349      MOVEQ    #255,D4 
00007272                           350  
00007272                           351  ****----------15. DIVU---------------------
00007272  82C0                     352      DIVU    D0,D1
00007274  80FC 1000                353      DIVU    #$1000,D0
00007278  82D0                     354      DIVU    (A0),D1
0000727A  88F9 11111111            355      DIVU    $11111111,D4
00007280                           356    
00007280                           357  ****----------16. SUB-------------------------
00007280                           358  *    SUB.B   $11,D0
00007280                           359  *    SUB.W   $1111,D0
00007280                           360  *    SUB.L   $11111111,D0 
00007280                           361  *    SUB.B   $1111,D0
00007280                           362  *    SUB.W   $11111111,D0
00007280                           363  *    SUB.B   D0,$11
00007280                           364  *    SUB.W   D0,$1111
00007280                           365  *    SUB.L   D0,$11111111 
00007280                           366  ****-----------17. CMP----------------- 
00007280                           367  *      CMP.W  #1, D6   
00007280                           368  *      CMP.W  A2, D2     *An case 
00007280                           369  *      CMP.W  D2, A3     *BAD DATA
00007280                           370  *      CMP.W  D2, D6     *Dn case
00007280                           371  *      CMP.W  (A3),D5    *(An) case
00007280                           372  *      CMP.B  -(A1),D0  *-(An) case
00007280                           373  *      CMP.B  (A2)+, D1  *(An)+ case
00007280                           374  *      CMP.W  #$10, D4   * (xxx).W
00007280                           375  *      CMP.L  #$2000,D5  * (xxx).L
00007280                           376  ****-----------18. MULS------------------   
00007280                           377  *     MULS    $11,D0
00007280                           378  *     MULS.W  $1111,D2
00007280                           379  *     MULS    $1111,D2
00007280                           380  *     MULS    $11111111,D5
00007280                           381  *     MULS.W  #1,D4
00007280                           382  *     MULS.W  D0,D5
00007280                           383  *     MULS.W  #$1111,D4
00007280                           384  *     MULS.W  #$03,D3
00007280                           385  *     MULS.W  D0,D6
00007280                           386  *TEST_FORWARD   RTS
00007280                           387  ****-----------19. AND-------------------
00007280                           388  *    AND.B   $11,D5
00007280                           389  *    AND.W   $1111,D5
00007280                           390  *    AND.L   $11111111,D5
00007280                           391  *    AND.B   $1111,D5
00007280                           392  *    AND.W   $11111111,D5  
00007280                           393  *    AND.B   D5,$11
00007280                           394  *    AND.W   D5,$1111
00007280                           395  *    AND.L   D5,$11111111
00007280                           396  *    AND.B   D1,$300
00007280                           397  *    AND.B   D1,D0
00007280                           398  *    AND.B   D2,D0
00007280                           399  *    AND.W   D3,D0
00007280                           400  *    AND.B   D4,D0
00007280                           401  *    AND.B   D5,D0
00007280                           402  *    AND.L   D6,D0
00007280                           403  *    AND.B   D7,D0
00007280                           404  *    AND.W   D1,D1
00007280                           405  *    AND.L   D1,D1
00007280                           406  *    AND.B   (A1),D1
00007280                           407  *    AND.B   (A2),D2
00007280                           408  *    AND.L   (A3),D2
00007280                           409  *    AND.B   (A4),D2
00007280                           410  *    AND.W   (A5),D2
00007280                           411  *    AND.B   (A6),D2
00007280                           412  *    AND.L   (A7),D2
00007280                           413  *    AND.B   (A2)+,D2            
00007280                           414  *    AND.L   -(A2),D2
00007280                           415  *    AND.B   $4000,D2
00007280                           416  *    AND.B   $7F,D2
00007280                           417  *    AND.B   $80000000,D2
00007280                           418  *    AND.W   D2,$80000000
00007280                           419  *    AND.W   D3,$80000000
00007280                           420  *    AND.W   D4,$80000000
00007280                           421  *    AND.W   D5,$80000000
00007280                           422  *    AND.W   D6,$80000000
00007280                           423  *    AND.W   D7,$80000000
00007280                           424  *    
00007280                           425  *
00007280                           426  ****----------20. ADD--------------------------
00007280                           427  *    ADD.B   $11,D5
00007280                           428  *    ADD.W   $1111,D5
00007280                           429  *    ADD.L   $11111111,D5
00007280                           430  *    ADD.B   $1111,D5
00007280                           431  *    ADD.W   $11111111,D5
00007280                           432  *    ADD.B   $48,D2
00007280                           433  *    ADD.B   #$DA,D3
00007280                           434  *    ADD.B   D3,(A6)+
00007280                           435  *    ADD.B   D1,(A2)
00007280                           436  *    ADD.B   D5,-(A0)
00007280                           437  *    ADD.B   #$40,D2
00007280                           438  *    ADD.B   D1,$E115
00007280                           439  *    ADD.B   D5,$E1234567   
00007280                           440  *    ADD.W   #101,A6
00007280                           441  *    ADD.W   $48,D3
00007280                           442  *    ADD.W   #$AA,D6
00007280                           443  *    ADD.W   D3,(A5)+
00007280                           444  *    ADD.W   D5,(A2)
00007280                           445  *    ADD.W   D2,-(A0)
00007280                           446  *    ADD.W   (A1),A5
00007280                           447  *    ADD.W   (A1)+,A1
00007280                           448  *    ADD.W   -(A1),A6
00007280                           449  *    ADD.W   #$40,D7
00007280                           450  *    ADD.W   D0,A2
00007280                           451  *    ADD.W   D0,$E115
00007280                           452  *    ADD.W   D0,$E1234567
00007280                           453  *    ADD.B   D5,$11
00007280                           454  *    ADD.W   D5,$1111
00007280                           455  *    ADD.L   D5,$11111111
00007280                           456  *
00007280                           457  **
00007280                           458  ****----------21. ADDA-------------------------
00007280                           459  *
00007280                           460  *    ADDX    -(A0),-(A1)  ; bad case
00007280                           461  *    ADDA.W  D0,A0
00007280                           462  *    ADDA.L  D1,A1
00007280                           463  *    ADD.L   A0,A1  
00007280                           464  *    ADDA.W  #123,A5
00007280                           465  *    ADDA.L  #123,A5
00007280                           466  *    ADD.L   #$123,A5
00007280                           467  *             
00007280                           468  ***----------22. ASR----------------------------    
00007280                           469  *    ASR.W   #8,D0
00007280                           470  *    ASR.W   #7,D1
00007280                           471  *    ASR.W   #6,D2
00007280                           472  *    ASR.W   #5,D3
00007280                           473  *    ASR.W   #4,D4
00007280                           474  *    ASR.W   #3,D5
00007280                           475  *    ASR.W   #2,D6
00007280                           476  *    ASR.W   #1,D7
00007280                           477  *    
00007280                           478  *    ASR.B   #8,D0
00007280                           479  *    ASR.B   #7,D1
00007280                           480  *    ASR.B   #6,D2
00007280                           481  *    ASR.B   #5,D3
00007280                           482  *    ASR.B   #4,D4
00007280                           483  *    ASR.B   #3,D5
00007280                           484  *    ASR.B   #2,D6
00007280                           485  *    ASR.B   #1,D7
00007280                           486  *    CLR.B   (A0)
00007280                           487  *    ASR.W   $0FF00000
00007280                           488  *    ASR.W   $0FF00000
00007280                           489  *    
00007280                           490  *    ASR.W   $0FF00000
00007280                           491  *    ASR.W   (A4)+
00007280                           492  *    ASR.W   -(A6)
00007280                           493  *
00007280                           494  *    ASR.B   D1, D0
00007280                           495  *    ASR.B   D2, D0
00007280                           496  *    ASR.B   D3, D0
00007280                           497  *    ASR.B   D4, D0
00007280                           498  *    ASR.B   D5, D6
00007280                           499  *    ASR.B   D1, D6
00007280                           500  *    ASR.B   D2, D6
00007280                           501  *    ASR.B   D3, D6
00007280                           502  *    ASR.L   #8,D0
00007280                           503  *    ASR.L   #7,D1
00007280                           504  *    ASR.L   #8,D2
00007280                           505  *    ASR.L   #6,D3
00007280                           506  *    ASR.L   #5,D4
00007280                           507  *    ASR.L   #4,D5
00007280                           508  *    ASR.L   #3,D6
00007280                           509  *    ASR.L   #2,D7
00007280                           510  *    ASR.L   #1,D7
00007280                           511  *            
00007280                           512  ***----------23. LSL----------------------------
00007280                           513  *    LSL.B   D0,D2
00007280                           514  *    LSL.L   D0,D2
00007280                           515  *    lSR.B   #7,D4  ;  bad case for LSL
00007280                           516  *    LSL.L   #8,D4
00007280                           517  *    LSL.W   $0FF00000 ; 
00007280                           518  *    LSL.W   (a4)+
00007280                           519  *    LSL.W   -(a6)
00007280                           520  ***-----------24. ROL-----------------
00007280                           521  *    ROL.W   #6,D0
00007280                           522  *    ROL.B   D0,D2
00007280                           523  *    ROL.L   D0,D2
00007280                           524  *    ROL.B   #7,D4  ;  bad case for LSL
00007280                           525  *    ROL.L   #8,D4
00007280                           526  *    ROL.W   $0FF00000 ; 
00007280                           527  *    ROL.W   (a4)+
00007280                           528  *    ROL.w   -(a6)
00007280                           529  *    ROL.W   (a4)+     
00007280                           530      
00007280  FFFF FFFF                531      SIMHALT             ; halt simulator
00007284                           532  
00007284                           533  * Put variables and constants here
00007284                           534      
00007284  =000000BA                535  VAR1    EQU $BA    BVAR
00007284  =00001234                536  VAR2    EQU $1234   WVAR
00007284  =FFAA1234                537  VAR3    EQU $FFAA1234  WVAR
00007284  =00000012                538  VAR4    EQU $12     DVAR
00007284  =00000000                539  VAR5    EQU $00000000  ZVAR
00007284  =FCFCFCFC                540  VAR6   EQU $FCFCFCFC    VBIN1
00007284                           541  
00007284                           542      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
JUMP1               725C
JUMP2               7260
START               7000
VAR1                BA
VAR2                1234
VAR3                FFAA1234
VAR4                12
VAR5                0
VAR6                FCFCFCFC
