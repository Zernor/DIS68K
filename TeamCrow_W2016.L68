00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/3/2016 11:00:00 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title:  68K Disassembler
00000000                             3  * Written by :  Hoa, Tenzin Khando, Marco F.
00000000                             4  * Date       :
00000000                             5  * Description:  Awesome 68k disassembler 
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR        EQU       $0D
00000000  =0000000A                  8  LF        EQU       $0A
00000000                             9  
00000400                            10      ORG    $400
00000400                            11  START:  
00000400                            12     
00000400  43F9 00000610             13          LEA         GREETING, A1    *load the greeting message
00000406  103C 000E                 14          MOVE.B      #14,D0
0000040A  4E4F                      15          TRAP        #15 
0000040C                            16              
0000040C                            17  * Put program code here
0000040C                            18  READ_SADDR
0000040C  43F9 00000642             19          LEA         PROMPTSADDR, A1
00000412  103C 000E                 20          MOVE.B      #14, D0
00000416  4E4F                      21          TRAP        #15
00000418  227C 00000000             22          MOVE.L      #$0,A1             ; clear after printing message
0000041E  103C 0002                 23          MOVE.B      #2,D0              * Read string from keyboard and store at A1
00000422  4E4F                      24          TRAP        #15
00000424  6000 0042                 25          BRA         VALIDATE_STORE 
00000428                            26  BADSIZES
00000428  43F9 00000708             27          LEA         ERRORINPUTSIZE, A1
0000042E  103C 000E                 28          MOVE.B      #14,D0
00000432  4E4F                      29          TRAP        #15
00000434  B63C 0000                 30          CMP.B       #0,D3
00000438  67D2                      31          BEQ         READ_SADDR
0000043A  6000 0014                 32          BRA         READ_EADDR 
0000043E                            33  
0000043E                            34  INVALID_CHARACTER
0000043E  43F9 00000708             35          LEA         ERRORINPUTSIZE, A1
00000444  103C 000E                 36          MOVE.B      #14,D0 
00000448  4E4F                      37          TRAP        #15 
0000044A  B63C 0000                 38          CMP.B       #0,D3
0000044E  67BC                      39          BEQ         READ_SADDR 
00000450                            40          
00000450                            41  READ_EADDR
00000450  43F9 000006D4             42          LEA         PROMPTEADDR, A1
00000456  103C 000E                 43          MOVE.B      #14, D0
0000045A  4E4F                      44          TRAP        #15
0000045C                            45          
0000045C  227C 00000000             46          MOVE.L      #$0,A1             ; clear after printing message
00000462  103C 0002                 47          MOVE.B      #2,D0              * Read string from keyboard and store at A1
00000466  4E4F                      48          TRAP        #15  
00000468                            49          
00000468                            50  VALIDATE_STORE 
00000468  0C01 0004                 51          CMPI.B      #4, D1             * Check address size
0000046C  6DBA                      52          BLT         BADSIZES 
0000046E  0C01 0008                 53          CMPI.B      #8, D1 
00000472  6EB4                      54          BGT         BADSIZES
00000474                            55          
00000474                            56  READHEX       
00000474  0C11 0030                 57          CMPI.B      #$30,(A1)
00000478  6DC4                      58          BLT         INVALID_CHARACTER   * Wrong data
0000047A  0C11 0040                 59          CMPI.B      #$40,(A1)
0000047E  6D00 000C                 60          BLT         NUMBER              * Is number
00000482  0C11 0046                 61          CMPI.B      #$46,(A1)
00000486  6D00 000C                 62          BLT         LETTERS             * Is Letter
0000048A  60B2                      63          BRA         INVALID_CHARACTER
0000048C  0411 0030                 64  NUMBER      SUBI.B      #$30,(A1)           * Convert Numbers to Hex
00000490  6000 000A                 65          BRA         STORE   
00000494  0411 0037                 66  LETTERS     SUBI.B      #$37,(A1)           * Convert Numbers to Hex
00000498  6000 0002                 67           BRA         STORE
0000049C  DE19                      68  STORE       ADD.B       (A1)+,D7            * Save data from A1 to D7
0000049E  0C11 0000                 69          CMPI.B      #0,(A1) 
000004A2  6700 0006                 70          BEQ         STOREME     
000004A6  E98F                      71          LSL.L       #4,D7               * Keep reading next character
000004A8  60CA                      72          BRA         READHEX
000004AA                            73  STOREME     
000004AA  B63C 0000                 74          CMP.B       #0,D3
000004AE  6600 0012                 75          BNE         STORE_ENDING
000004B2  23C7 00000758             76          MOVE.L      D7, STARTING_ADD      * Save in the memory address 
000004B8  2C47                      77          MOVEA.L     D7, A6                *save starting at A6
000004BA  163C 0001                 78          MOVE.B      #1, D3               * Counter - for VALID_STORE
000004BE  4287                      79          CLR.L       D7
000004C0  608E                      80          BRA         READ_EADDR    
000004C2                            81          
000004C2                            82  STORE_ENDING 
000004C2  BEB9 00000758             83          CMP.L       (STARTING_ADD), D7
000004C8  6D00 0012                 84          BLT         SGTE
000004CC  23C7 0000075C             85          MOVE.L      D7, ENDING_ADD  
000004D2  2A47                      86          MOVE.L      D7, A5                 *save starting at A7
000004D4  4287                      87          CLR.L       D7
000004D6  4283                      88          CLR.L       D3
000004D8  6000 0016                 89          BRA         ADDR_LOOP
000004DC                            90          
000004DC                            91  SGTE    ;starting greater then ending
000004DC  43F9 00000686             92          LEA         INVALIDSADDR, A1
000004E2  103C 000E                 93          MOVE.B      #14, D0
000004E6  4E4F                      94          TRAP        #15
000004E8  4287                      95          CLR.L       D7
000004EA  4283                      96          CLR.L       D3
000004EC  6000 FF1E                 97          BRA         READ_SADDR
000004F0                            98  
000004F0                            99  *-----------------------------Addressess------------------------------*  
000004F0                           100  
000004F0                           101  ADDR_LOOP
000004F0  2A79 0000075C            102          MOVE.L  ENDING_ADD,A5
000004F6  BBCE                     103          CMP.L   A6,A5
000004F8  6700 0112                104          BEQ     END_PROGRAM
000004FC                           105          
000004FC  4EB9 00000588            106          JSR     CLEAR_REGISTERS
00000502  6000 002E                107          BRA     PRINT_CURRENT_ADD           ;PRINT CURRENT ADDRESS
00000506                           108  
00000506  49F9 00000754            109          LEA     OPCODE,A4
0000050C  4EB9 000005B8            110          JSR     UNCHANGED_CONSTANT          ;NOP
00000512                           111          
00000512  7001                     112          MOVE.L  #1, D0          ;shift 4 bit
00000514  7404                     113          MOVE.L  #4, D2
00000516                           114          
00000516                           115  
00000516                           116  OPCODELOOP 
00000516  B400                     117          CMP.B   D0, D2
00000518  6700 0018                118          BEQ     OPCODEDONE
0000051C  E38B                     119          LSL.L   #1, D3
0000051E  6500 000C                120          BCS     ADDONE
00000522  0604 0000                121          ADDI.B  #%0, D4                 * Add 0 bit to d2
00000526  E384                     122           ASL.L   #1, D4
00000528  5280                     123           ADDQ.L  #1,D0
0000052A  60EA                     124           BRA     OPCODELOOP 
0000052C                           125  ADDONE      
0000052C  5204                     126          ADDI.B  #%1, D4                 * Add 1 bit to d2
0000052E  5280                     127          ADDQ.L  #1,D0
00000530  60E4                     128          BRA     OPCODELOOP
00000532                           129  OPCODEDONE            
00000532                           130  
00000532                           131  ****************************PRINTING HEX ADDRESS TO ASCII *******************
00000532                           132  
00000532                           133  PRINT_CURRENT_ADD
00000532  240E                     134      MOVE.L  A6,D2
00000534                           135      ;LEA     CURRENT_ADDRESS,A7
00000534  1A3C 0000                136      MOVE.B  #0,D5
00000538  1C3C 0008                137      MOVE.B  #8,D6
0000053C                           138  
0000053C                           139  CONVERT_HEX_ASCII
0000053C  BC05                     140      CMP.B   D5,D6
0000053E  6700 0048                141      BEQ     CLEAR_REGISTERS
00000542                           142  
00000542                           143  SET_COUNTER_4
00000542  163C 0000                144      MOVE.B  #0,D3
00000546  183C 0004                145      MOVE.B  #4,D4    
0000054A                           146  Loop
0000054A  B803                     147      CMP.B   D3,D4
0000054C  6700 0018                148      BEQ     STORE_ONE_CHAR
00000550  E38A                     149      LSL.L   #1,D2
00000552  6400 0008                150      BCC     ADDZERO
00000556                           151  
00000556  5201                     152      ADDI.B  #1,D1
00000558  6000 0006                153      BRA     INCREMENT_BIT_LOOP
0000055C                           154      
0000055C                           155  ADDZERO
0000055C  0601 0000                156      ADDI.B  #0,D1
00000560                           157  
00000560                           158  INCREMENT_BIT_LOOP
00000560  5203                     159      ADDI.B  #1,D3
00000562  E389                     160      LSL.L   #1,D1
00000564  60E4                     161      BRA     Loop
00000566                           162      
00000566                           163  STORE_ONE_CHAR
00000566  E289                     164      LSR.L   #1,D1
00000568  B23C 0009                165      CMP.B   #$9,D1
0000056C  6D00 000A                166      BLT     HEX_TO_ASCII_NUMBER
00000570                           167      
00000570  0601 0037                168      ADDI.B  #$37,D1     ;HEX_TO_ASCII_LETTER
00000574  6000 0006                169      BRA     INCREMENT_NEXT_HEX_LOOP
00000578                           170      
00000578                           171  HEX_TO_ASCII_NUMBER
00000578  0601 0030                172      ADDI.B  #$30,D1
0000057C                           173  
0000057C                           174      ;MOVE.B  D7,(A7)+
0000057C                           175  INCREMENT_NEXT_HEX_LOOP
0000057C  5205                     176      ADDI.B  #1,D5
0000057E  103C 0006                177      MOVE.B  #6,D0
00000582  4E4F                     178      TRAP    #15
00000584  4281                     179      CLR.L   D1
00000586  60B4                     180      BRA     CONVERT_HEX_ASCII
00000588                           181  
00000588                           182  CLEAR_REGISTERS
00000588  4285                     183      CLR.L   D5
0000058A  4282                     184      CLR.L   D2
0000058C  4281                     185      CLR.L   D1
0000058E  4283                     186      CLR.L   D3
00000590  4284                     187      CLR.L   D4
00000592  227C 00000000            188      MOVE.L  #$00000000,A1
00000598  247C 00000000            189      MOVE.L  #$00000000,A2
0000059E  267C 00000000            190      MOVE.L  #$00000000,A3
000005A4  287C 00000000            191      MOVE.L  #$00000000,A4
000005AA  2E7C 00000000            192      MOVE.L  #$00000000,A7
000005B0  2A7C 00000000            193      MOVE.L  #$00000000,A5
000005B6  4E75                     194      RTS
000005B8                           195  
000005B8                           196  ***********************END OF PRINTING HEX ADDRESS TO ASCII *******************
000005B8                           197  UNCHANGED_CONSTANT
000005B8  18FC 0020                198      MOVE.B  #' ',(A4)+
000005BC  18FC 0020                199      MOVE.B  #' ',(A4)+
000005C0  18FC 0020                200      MOVE.B  #' ',(A4)+
000005C4  18FC 0020                201      MOVE.B  #' ',(A4)+
000005C8                           202      
000005C8  0C56 4E71                203      CMP.W   #$4E71,(A6)
000005CC  6700 000C                204      BEQ     PRINT_NOP
000005D0  0C56 4E75                205      CMP.W   #$4E75,(A6)
000005D4  6700 0026                206      BEQ     PRINT_RTS
000005D8                           207  JUMP_BACK
000005D8  4E75                     208      RTS      
000005DA                           209  PRINT_NOP
000005DA  18FC 004E                210      MOVE.B  #'N',(A4)+
000005DE  18FC 004F                211      MOVE.B  #'O',(A4)+
000005E2  18FC 0050                212      MOVE.B  #'P',(A4)+
000005E6  227C 00000000            213      MOVEA.L  #$00000000,A1
000005EC  43F9 00000754            214      LEA     OPCODE,A1
000005F2  103C 000D                215      MOVE.B  #13,D0
000005F6  4E4F                     216      TRAP    #15
000005F8  548E                     217      ADD.L   #$2,A6          ;increase by 2 bytes if it prints NOP
000005FA  60DC                     218      BRA     JUMP_BACK
000005FC                           219  PRINT_RTS
000005FC  18FC 0052                220      MOVE.B  #'R',(A4)+
00000600  18FC 0054                221      MOVE.B  #'T',(A4)+
00000604  18FC 0053                222      MOVE.B  #'S',(A4)+
00000608  548E                     223      ADD.L   #$2,A6
0000060A  60CC                     224      BRA     JUMP_BACK
0000060C                           225  
0000060C                           226     
0000060C                           227  END_PROGRAM
0000060C  FFFF FFFF                228          SIMHALT             ; halt simulator
00000610                           229  
00000610                           230  * Put variables and constants here
00000610                           231  
00000610                           232  * Hex values -----------------------------------------------  
00000610  =00000000                233  numzero     EQU     0  
00000610  =00000001                234  numone      EQU     1
00000610  =00000002                235  numtwo      EQU     2
00000610  =00000003                236  numthree    EQU     3
00000610  =00000004                237  numfour     EQU     4
00000610  =00000005                238  numfive     EQU     5
00000610  =00000006                239  numsix      EQU     6
00000610  =00000007                240  numseven    EQU     7
00000610  =00000008                241  numeight    EQU     8
00000610  =00000009                242  numnine     EQU     9
00000610  =0000000A                243  numA        EQU     10
00000610  =0000000B                244  numB        EQU     11
00000610  =0000000C                245  numC        EQU     12
00000610  =0000000D                246  numD        EQU     13
00000610  =0000000E                247  numE        EQU     $E
00000610  =0000000F                248  numF        EQU     15
00000610                           249  
00000610                           250  * Binary Hex Values ----------------------------------------
00000610  =00000000                251  hex0        EQU     %0000   
00000610  =00000001                252  hex1        EQU     %0001   
00000610  =00000002                253  hex2        EQU     %0010   
00000610  =00000003                254  hex3        EQU     %0011   
00000610  =00000004                255  hex4        EQU     %0100   
00000610  =00000005                256  hex5        EQU     %0101   
00000610  =00000006                257  hex6        EQU     %0110   
00000610  =00000007                258  hex7        EQU     %0111   
00000610  =00000008                259  hex8        EQU     %1000   
00000610  =00000009                260  hex9        EQU     %1001   
00000610  =0000000A                261  hexA        EQU     %1010   
00000610  =0000000B                262  hexB        EQU     %1011   
00000610  =0000000C                263  hexC        EQU     %1100   
00000610  =0000000D                264  hexD        EQU     %1101   
00000610  =0000000E                265  hexE        EQU     %1110   
00000610  =0000000F                266  hexF        EQU     %1111   
00000610                           267  
00000610                           268  * OP Codes -------------------------------------------------
00000610  =00000000                269  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
00000610  =00000001                270  bin0001     EQU     %0001   ;MOVE.B
00000610  =00000002                271  bin0010     EQU     %0010   ;MOVE.L
00000610  =00000003                272  bin0011     EQU     %0011   ;MOVE.W
00000610  =00000004                273  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
00000610  =00000005                274  bin0101     EQU     %0101   ;SUBQ
00000610  =00000006                275  bin0110     EQU     %0110   ;Bcc
00000610  =00000007                276  bin0111     EQU     %0111   ;MOVEQ
00000610  =00000008                277  bin1000     EQU     %1000   ;DIVU.W
00000610  =00000009                278  bin1001     EQU     %1001   ;SUB, SUBA
00000610  =0000000B                279  bin1011     EQU     %1011   ;CMP, CMPA, EOR
00000610  =0000000C                280  bin1100     EQU     %1100   ;AND, MULS.W
00000610  =0000000D                281  bin1101     EQU     %1101   ;ADD, ADDA
00000610  =0000000E                282  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
00000610                           283  
00000610= 48 45 4C 4C 4F 20 ...    284  GREETING        DC.B    'HELLO THERE, WELCOME TO AWESOME DISASSEMBLER',CR,LF,CR,LF,0 
00000642= 504C 4541 5345 2...      285  PROMPTSADDR     DC.W    'PLEASE ENTER THE STARTING ADDRESS MUST BE GREATER THAN 7000: ',0,CR,LF
00000686= 49 4E 56 41 4C 49 ...    286  INVALIDSADDR    DC.B    'INVALID STARTING ADDRESS VERSUS ENDING.',CR,LF,0
000006B0= 50 4C 45 41 53 45 ...    287  PROMPT3         DC.B    'PLEASE ENTER THE ENDING ADDRESS: ',CR,LF,0
000006D4= 504C 4541 5345 2...      288  PROMPTEADDR     DC.W    'PLEASE ENTER THE ENDING ADDRESS AND ALL CAPITALS: ',0
00000708= 45 52 52 4F 52 3A ...    289  ERRORINPUTSIZE  DC.B    'ERROR: INVALID ADDRESS SIZE',CR,LF,CR,LF,0
00000728= 45 52 52 4F 52 3A ...    290  SGTEM           DC.B    'ERROR: STARTING ADDRESS > ENDING ADDRESS',CR,LF,0
00000753                           291  
00000754= 00000001                 292  OPCODE          DC.L    1
00000758                           293  
00000758                           294  STARTING_ADD    DS.L    1   ;1 is the size, if I change to 4 then array size changes
0000075C                           295  ENDING_ADD      DS.L    1
00000760                           296  
00000760                           297  
00000760                           298   END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDONE              52C
ADDR_LOOP           4F0
ADDZERO             55C
BADSIZES            428
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CLEAR_REGISTERS     588
CONVERT_HEX_ASCII   53C
CR                  D
ENDING_ADD          75C
END_PROGRAM         60C
ERRORINPUTSIZE      708
GREETING            610
HEX0                0
HEX1                1
HEX2                2
HEX3                3
HEX4                4
HEX5                5
HEX6                6
HEX7                7
HEX8                8
HEX9                9
HEXA                A
HEXB                B
HEXC                C
HEXD                D
HEXE                E
HEXF                F
HEX_TO_ASCII_NUMBER  578
INCREMENT_BIT_LOOP  560
INCREMENT_NEXT_HEX_LOOP  57C
INVALIDSADDR        686
INVALID_CHARACTER   43E
JUMP_BACK           5D8
LETTERS             494
LF                  A
LOOP                54A
NUMA                A
NUMB                B
NUMBER              48C
NUMC                C
NUMD                D
NUME                E
NUMEIGHT            8
NUMF                F
NUMFIVE             5
NUMFOUR             4
NUMNINE             9
NUMONE              1
NUMSEVEN            7
NUMSIX              6
NUMTHREE            3
NUMTWO              2
NUMZERO             0
OPCODE              754
OPCODEDONE          532
OPCODELOOP          516
PRINT_CURRENT_ADD   532
PRINT_NOP           5DA
PRINT_RTS           5FC
PROMPT3             6B0
PROMPTEADDR         6D4
PROMPTSADDR         642
READHEX             474
READ_EADDR          450
READ_SADDR          40C
SET_COUNTER_4       542
SGTE                4DC
SGTEM               728
START               400
STARTING_ADD        758
STORE               49C
STOREME             4AA
STORE_ENDING        4C2
STORE_ONE_CHAR      566
UNCHANGED_CONSTANT  5B8
VALIDATE_STORE      468
