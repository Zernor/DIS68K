00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/8/2016 12:10:15 PM

00000000                             1  *------------------------------------------------------------------------------------------
00000000                             2  * Title:  68K Disassembler
00000000                             3  * Written by :  Hoa, Tenzin Khando, Marco F.
00000000                             4  * Date       :
00000000                             5  * Description:  Awesome 68k disassembler 
00000000                             6  *------------------------------------------------------------------------------------------
00000400                             7      ORG    $400
00000400                             8  START:  
00000400  43F9 00000BA6              9          LEA         GREETING, A1            * Load the greeting message
00000406  103C 000E                 10          MOVE.B      #14,D0
0000040A  4E4F                      11          TRAP        #15 
0000040C  13FC 0000 00000DE2        12          MOVE.B      #0, LINE_COUNT          * Initilize the LINE_COUNTER variable 
00000414  13FC 0000 00000DE6        13          MOVE.B      #0, BAD_DATA_SWITCH            * Reset Line Count 
0000041C                            14  
0000041C                            15  ********************************************************************************************
0000041C                            16  * DESCRIPTION: Reading Addresses
0000041C                            17  *------------------ STARTING ADDRESS -------------------------------------------------------
0000041C                            18  READ_SADDR
0000041C  4287                      19          CLR.L       D7
0000041E  43F9 00000C56             20          LEA         PROMPTSADDR, A1
00000424  103C 000E                 21          MOVE.B      #14, D0
00000428  4E4F                      22          TRAP        #15
0000042A  43F9 00000DEC             23          LEA         INPUT_HEX,A1            * Temp hold starting address
00000430  103C 0002                 24          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
00000434  4E4F                      25          TRAP        #15
00000436  6000 001E                 26          BRA         VALIDATE_STORE 
0000043A                            27  *------------------ ENDING ADDRESS -------------------------------------------------------
0000043A                            28  READ_EADDR
0000043A  43F9 00000C7C             29          LEA         PROMPTEADDR, A1
00000440  103C 000E                 30          MOVE.B      #14, D0
00000444  4E4F                      31          TRAP        #15
00000446  43F9 00000DEC             32          LEA         INPUT_HEX,A1            * Temp hold ending address
0000044C  103C 0002                 33          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
00000450  4E4F                      34          TRAP        #15  
00000452  6000 0002                 35          BRA         VALIDATE_STORE 
00000456                            36  
00000456                            37  ********************************************************************************************
00000456                            38  * Validating and storing addresses
00000456                            39  *------------------ VALIDATE & STORE  ADDRESS ----------------------------------------------
00000456                            40  VALIDATE_STORE 
00000456  0C01 0004                 41          CMPI.B      #4, D1                  
0000045A  6D00 000E                 42          BLT         BADSIZES 
0000045E  0C01 0008                 43          CMPI.B      #8, D1 
00000462  6E00 0006                 44          BGT         BADSIZES
00000466  6000 002A                 45          BRA         READHEX
0000046A                            46  BADSIZES
0000046A  43F9 00000D19             47          LEA         ERRORINPUTSIZE, A1      * Print Bad Size Error
00000470  103C 000E                 48          MOVE.B      #14,D0
00000474  4E4F                      49          TRAP        #15
00000476  B63C 0000                 50          CMP.B       #0,D3                   * D3 - HOLDS 0 if starting address has not being stored yet
0000047A  67A0                      51          BEQ         READ_SADDR
0000047C  60BC                      52          BRA         READ_EADDR 
0000047E                            53  INVALID_CHARACTER                           * Print Invalid Character for Address
0000047E  43F9 00000D39             54          LEA         INVALIDCHAR, A1
00000484  103C 000E                 55          MOVE.B      #14,D0 
00000488  4E4F                      56          TRAP        #15 
0000048A  B63C 0000                 57          CMP.B       #0,D3
0000048E  678C                      58          BEQ         READ_SADDR 
00000490  60A8                      59          BRA         READ_EADDR
00000492                            60  *------------------ Read ASCII & Convert + Store as Hex ----------------------------------
00000492                            61  READHEX       
00000492  0C11 0030                 62          CMPI.B      #$30,(A1)
00000496  6DE6                      63          BLT         INVALID_CHARACTER       * Wrong data
00000498  0C11 0040                 64          CMPI.B      #$40,(A1)
0000049C  6D00 000C                 65          BLT         NUMBER                  * Is number
000004A0  0C11 0047                 66          CMPI.B      #$47,(A1)
000004A4  6D00 000C                 67          BLT         LETTERS                 * Is Letter
000004A8  60D4                      68          BRA         INVALID_CHARACTER
000004AA                            69  NUMBER      
000004AA  0411 0030                 70          SUBI.B      #$30,(A1)               * Convert Numbers to Hex
000004AE  6000 000A                 71          BRA         STORE   
000004B2                            72  LETTERS     
000004B2  0411 0037                 73          SUBI.B      #$37,(A1)               * Convert Numbers to Hex
000004B6  6000 0002                 74          BRA         STORE
000004BA                            75  STORE       
000004BA  DE19                      76          ADD.B       (A1)+,D7                * Save data from A1 to D7
000004BC  0C11 0000                 77          CMPI.B      #0,(A1)                 * NO MORE TO READ SO CHECK IF ADDRESS IS ODD
000004C0  6700 0006                 78          BEQ         ODD_TEST     
000004C4  E98F                      79          LSL.L       #4,D7                   * Keep reading next character
000004C6  60CA                      80          BRA         READHEX
000004C8                            81  
000004C8                            82  * Before storing address - check if odd --------------------------------------------------------
000004C8                            83  ODD_TEST                                    * Check if address is odd
000004C8  7202                      84          MOVE.L      #$00000002,D1           * Put 2 in D1 so we can use it to divide input by 2
000004CA  2C07                      85          MOVE.L      D7,D6
000004CC  8CC1                      86          DIVU        D1,D6                   * Divide the input address by 2
000004CE  4846                      87          SWAP        D6                      * Store the remainder in D2
000004D0  BC3C 0001                 88          CMP.B       #1,D6                   * Is the remainder ==1
000004D4  6700 000A                 89          BEQ         ODD_TEST_FAIL           * Remainder is 1 so input fails odd test 
000004D8  B63C 0000                 90          CMP.B       #0,D3
000004DC                            91              
000004DC  6000 001E                 92          BRA         STORE_ADDRESS                           
000004E0                            93  ODD_TEST_FAIL   
000004E0  43F9 00000D8B             94          LEA         ODD_ADD_MSG,A1          * Load ODD_ADD_MSG to A1
000004E6  103C 000E                 95          MOVE.B      #14,D0                  * Print odd address error message
000004EA  4E4F                      96          TRAP        #15                     
000004EC  4286                      97          CLR.L       D6
000004EE  4287                      98          CLR.L       D7      
000004F0  B63C 0000                 99          CMP.B       #0,D3
000004F4  6700 FF26                100          BEQ         READ_SADDR
000004F8  6000 FF40                101          BRA         READ_EADDR 
000004FC                           102  
000004FC                           103  * STORE ADDRESSESSS INTO MEMORY ----------------------------------------------------------------              
000004FC                           104  STORE_ADDRESS
000004FC  4286                     105          CLR.L       D6
000004FE  B63C 0000                106          CMP.B       #0,D3
00000502  6600 0036                107          BNE         STORE_ENDING
00000506                           108          
00000506  BEBC 00007000            109          CMP.L       #$00007000, D7
0000050C  6E00 001A                110          BGT         CONTINUE_STORE
00000510  6700 0016                111          BEQ         CONTINUE_STORE
00000514                           112      
00000514  4286                     113          CLR.L       D6
00000516  4287                     114          CLR.L       D7
00000518  43F9 00000DA2            115          LEA         STARTING_ADDR_7, A1         * Load ODD_ADD_MSG to A1
0000051E  103C 000E                116          MOVE.B      #14,D0                      * Print odd address error message
00000522  4E4F                     117          TRAP        #15  
00000524  6000 FEF6                118          BRA         READ_SADDR
00000528                           119          
00000528                           120  CONTINUE_STORE        
00000528  23C7 00000DF0            121          MOVE.L      D7, STARTING_ADD            * Save in the memory address 
0000052E  2C47                     122          MOVEA.L     D7, A6                      * Save starting at A6
00000530  163C 0001                123          MOVE.B      #1, D3                      * Counter - for VALID_STORE
00000534  4287                     124          CLR.L       D7
00000536  6000 FF02                125          BRA         READ_EADDR    
0000053A                           126  STORE_ENDING 
0000053A  BEB9 00000DF0            127          CMP.L       (STARTING_ADD), D7
00000540  6D00 0014                128          BLT         SGTE
00000544                           129  
00000544                           130  STORE_E             
00000544  23C7 00000DF4            131          MOVE.L      D7, ENDING_ADD  
0000054A  4287                     132          CLR.L       D7
0000054C  4EB9 00000B4A            133          JSR         CLEAR_SCREEN
00000552  6000 0016                134          BRA         ADDR_LOOP
00000556                           135  SGTE                                            * Starting greater then ending
00000556  43F9 00000CE6            136          LEA         INVALIDSADDR, A1
0000055C  103C 000E                137          MOVE.B      #14, D0
00000560  4E4F                     138          TRAP        #15
00000562  4287                     139          CLR.L       D7
00000564  4283                     140          CLR.L       D3
00000566  6000 FEB4                141          BRA         READ_SADDR
0000056A                           142    
0000056A                           143          
0000056A                           144  ********************************************************************************************
0000056A                           145  *------------------ OPCODE READ ------------------------------------------------------------
0000056A                           146  * Description:
0000056A                           147  *
0000056A                           148  *------------------ Compare Current Address to Ending Adddres ------------------------------ 
0000056A                           149  ADDR_LOOP
0000056A  4EB9 00000B74            150          JSR         CLEAR_REGISTERS             * Clear registers
00000570  2A79 00000DF4            151          MOVE.L      ENDING_ADD,A5               * Check current address against ending adress           
00000576  BDCD                     152          CMP.L       A5,A6
00000578  6E00 0628                153          BGT         END_PROGRAM    
0000057C                           154  
0000057C  2A7C 00000000            155          MOVE.L      #$00000000, A5
00000582  0C39 0019 00000DE2       156          CMP.B       #25, LINE_COUNT             * Check line counter
0000058A  6600 0008                157          BNE         CONTINUE_ADDR_LOOP
0000058E  4EB9 00000B02            158          JSR         USER_RESPONSE         
00000594                           159  CONTINUE_ADDR_LOOP        
00000594  5239 00000DE2            160          ADD.B       #1, LINE_COUNT              * Update Line counter
0000059A  4EB9 00000B74            161          JSR         CLEAR_REGISTERS             * Clear registers
000005A0  4EB9 00000A9C            162          JSR         PRINT_CURRENT_ADD           * PRINT CURRENT ADDRESS
000005A6                           163          
000005A6  4BF9 00000DF8            164          LEA         PRINTER, A5                  
000005AC  3E1E                     165          MOVE.W      (A6)+, D7
000005AE  4EB9 0000068C            166          JSR         GET_INSTRUCTION
000005B4                           167          
000005B4  0C39 000A 00000DE6       168          CMP.B       #10, BAD_DATA_SWITCH        * Check if Bad Data Switch is True
000005BC  6700 0012                169          BEQ         PRINT_BAD_DATA  
000005C0  1AFC 0000                170          MOVE.B      #$00,(A5)+                  * Add 00 to opcode printer
000005C4                           171          
000005C4  43F9 00000DF8            172          LEA         PRINTER, A1                 * Print
000005CA  700D                     173          MOVEQ       #13,D0              
000005CC  4E4F                     174          TRAP        #15                 
000005CE                           175  
000005CE  609A                     176          BRA         ADDR_LOOP
000005D0                           177  PRINT_BAD_DATA                                  * Asume is Empty 
000005D0  4EB9 00000B74            178          JSR         CLEAR_REGISTERS             * Clear registers
000005D6  4BF9 00000DF8            179          LEA         PRINTER, A5
000005DC  3E1E                     180          MOVE.W      (A6)+, D7
000005DE  4EB9 000005FE            181          JSR         BAD_DATA                
000005E4  1AFC 0000                182          MOVE.B      #$00,(A5)+                  * Add 00 BAD_BUFFER so we can end the line.
000005E8  43F9 00000DF8            183          LEA         PRINTER,A1                  * Load the bad data into A1
000005EE  700D                     184          MOVEQ       #13,D0                      * Set print trap
000005F0  4E4F                     185          TRAP        #15     
000005F2  13FC 0000 00000DE6       186          MOVE.B      #$00, BAD_DATA_SWITCH            * Reset Line Count 
000005FA  6000 FF6E                187          BRA         ADDR_LOOP       Go back to main loop
000005FE                           188          
000005FE                           189  
000005FE                           190  *---------------------------------------------------------------------------------------
000005FE                           191  BAD_DATA
000005FE  1AFC 0042                192          MOVE.B      #'B',(A5)+                      * Print BAD DATA using A4
00000602  1AFC 0041                193          MOVE.B      #'A',(A5)+          
00000606  1AFC 0044                194          MOVE.B      #'D',(A5)+          
0000060A  1AFC 0020                195          MOVE.B      #' ',(A5)+          
0000060E  1AFC 0044                196          MOVE.B      #'D',(A5)+          
00000612  1AFC 0041                197          MOVE.B      #'A',(A5)+          
00000616  1AFC 0054                198          MOVE.B      #'T',(A5)+          
0000061A  1AFC 0041                199          MOVE.B      #'A',(A5)+          
0000061E  1AFC 0020                200          MOVE.B      #' ',(A5)+          
00000622  1AFC 0020                201          MOVE.B      #' ',(A5)+
00000626  1AFC 0024                202          MOVE.B      #'$',(A5)+          
0000062A                           203          
0000062A  1C3C 0000                204          MOVE.B      #0,D6                           * Set 0
0000062E  3A07                     205          MOVE.W      D7,D5                           * Bad Code to D5
00000630  163C 0004                206          MOVE.B      #4,D3
00000634                           207  
00000634                           208  WORD_ASCII                          
00000634  E95D                     209          ROL.W       #4,D5                           * Move the MSB to LSB
00000636  2805                     210          MOVE.L      D5,D4                           * Move longword address to D5
00000638  0284 0000000F            211          ANDI.L      #$0000000F,D4                   * Clear everything except for MSB
0000063E                           212  DATA_ASC
0000063E  0C04 0009                213          CMPI.B      #$09,D4                             * Is the character a number?
00000642  6F00 000A                214          BLE         DATA_NUM                        * Branch if yes.
00000646                           215  DATA_LET
00000646  0604 0037                216          ADDI.B      #$37,D4                         * Convert into a prinatble ascii letter
0000064A  6000 000A                217          BRA         DATA_CHAR
0000064E                           218  DATA_NUM 
0000064E  0604 0030                219          ADDI.B      #$30,D4                         * Convert into a prinatble ascii number
00000652  6000 0002                220          BRA         DATA_CHAR
00000656                           221          
00000656                           222  DATA_CHAR
00000656  5206                     223          ADDI.B      #1,D6                           * Update counter
00000658  1AC4                     224          MOVE.B      D4,(A5)+                        * Add ASCII to printer
0000065A  BC03                     225          CMP.B      D3,D6                
0000065C  6DD6                     226          BLT         WORD_ASCII                      * if not, repeat loop
0000065E  4E75                     227          RTS
00000660                           228          
00000660                           229  LONG_ASCII                          
00000660  E99D                     230          ROL.L       #4,D5                           * Move the MSB to LSB
00000662  2805                     231          MOVE.L      D5,D4                           * Move longword address to D5
00000664  0284 0000000F            232          ANDI.L      #$0000000F,D4                   * Clear everything except for MSB
0000066A                           233  DATA_ASC2
0000066A  0C04 0009                234          CMPI.B      #$09,D4                             * Is the character a number?
0000066E  6F00 000A                235          BLE         DATA_NUM2                        * Branch if yes.
00000672                           236  DATA_LET2
00000672  0604 0037                237          ADDI.B      #$37,D4                         * Convert into a prinatble ascii letter
00000676  6000 000A                238          BRA         DATA_CHAR2
0000067A                           239  DATA_NUM2 
0000067A  0604 0030                240          ADDI.B      #$30,D4                         * Convert into a prinatble ascii number
0000067E  6000 0002                241          BRA         DATA_CHAR2
00000682                           242          
00000682                           243  DATA_CHAR2
00000682  5206                     244          ADDI.B      #1,D6                           * Update counter
00000684  1AC4                     245          MOVE.B      D4,(A5)+                        * Add ASCII to printer
00000686  BC03                     246          CMP.B       D3,D6                   
00000688  6DD6                     247          BLT         LONG_ASCII                      * if not, repeat loop
0000068A  4E75                     248          RTS     
0000068C                           249          
0000068C                           250          
0000068C                           251  *---------------------------------------------------------------------------------
0000068C                           252  
0000068C                           253  GET_INSTRUCTION
0000068C  3C07                     254          MOVE.W      D7, D6                          * Move the instruction so we can shift it
0000068E  E95E                     255          ROL.W       #4, D6                          * Shift 8 bits to the right
00000690  3A06                     256          MOVE.W      D6, D5
00000692  41F9 000006A6            257          LEA         OPCODE_JMP_TABLE, A0            * Set the table to A0 so we know where to jump to
00000698  0246 000F                258          ANDI.W      #$000F, D6
0000069C  CCFC 0008                259          MULU        #8, D6                          * Offset D5 to show the word binary for the instruction
000006A0                           260          *MOVE.B      D6, D4
000006A0                           261          *ADD.W       A0, D4
000006A0  4EB0 6000                262          JSR         0(A0,D6)                        
000006A4  4E75                     263          RTS        
000006A6                           264  
000006A6                           265  ********************************************************************************************
000006A6                           266  * OP CODE                                              
000006A6                           267  OPCODE_JMP_TABLE
000006A6  4EB9 000007C4            268      JSR     OPCODE0000                           * - ADDI
000006AC  4E75                     269      RTS
000006AE  4EB9 000007C6            270      JSR     OPCODE0001                           * - MOVE.B
000006B4  4E75                     271      RTS
000006B6  4EB9 000007C8            272      JSR     OPCODE0010                           * - MOVE.L
000006BC  4E75                     273      RTS
000006BE  4EB9 000007CA            274      JSR     OPCODE0011                           * - MOVE.W
000006C4  4E75                     275      RTS
000006C6  4EB9 000007CC            276      JSR     OPCODE0100                           * - MOVEM, LEA, JSR, CLR, RTS, NOP
000006CC  4E75                     277      RTS
000006CE  4EB9 000007A6            278      JSR     OPCODE0101                           * - BAD DATA
000006D4  4E75                     279      RTS   
000006D6  4EB9 000007E4            280      JSR     OPCODE0110                           * - BCC, BLE, BGT
000006DC  4E75                     281      RTS
000006DE  4EB9 000007E6            282      JSR     OPCODE0111                           * - MOVEQ
000006E4  4E75                     283      RTS
000006E6  4EB9 000007F2            284      JSR     OPCODE1000                           * - DIVU
000006EC  4E75                     285      RTS 
000006EE  4EB9 000007E8            286      JSR     OPCODE1001                           * - SUB
000006F4  4E75                     287      RTS
000006F6  4EB9 000007B0            288      JSR     OPCODE1010                           * - BAD DATA
000006FC  4E75                     289      RTS  
000006FE  4EB9 000007EA            290      JSR     OPCODE1011                           * - CMP
00000704  4E75                     291      RTS
00000706  4EB9 000007EC            292      JSR     OPCODE1100                           * - ADD, MULS
0000070C  4E75                     293      RTS
0000070E  4EB9 000007EE            294      JSR     OPCODE1101                           * - ADDA, AND, 
00000714  4E75                     295      RTS
00000716  4EB9 000007F0            296      JSR     OPCODE1110                           * - ASR, LSL, ROL
0000071C  4E75                     297      RTS  
0000071E  4EB9 000007BA            298      JSR     OPCODE1111                           * - BAD DATA
00000724  4E75                     299      RTS   
00000726                           300  
00000726                           301  *********************************************************
00000726                           302  * 0100 Jump Table CLR, JSR, LEA, MOVEM, RTS INSTRUCTIONS
00000726                           303  THREE_TABLE     
00000726  4EB9 00000854            304      JSR     THREE000            - LEA                  
0000072C  4E75                     305      RTS                                 
0000072E  4EB9 00000856            306      JSR     THREE001            - LEA, CLR        
00000734  4E75                     307      RTS                                 
00000736  4EB9 0000086E            308      JSR     THREE010            - LEA
0000073C  4E75                     309      RTS                                 
0000073E  4EB9 00000870            310      JSR     THREE011            - LEA        
00000744  4E75                     311      RTS                                 
00000746  4EB9 00000872            312      JSR     THREE100            - LEA, MOVEM        
0000074C  4E75                     313      RTS                                 
0000074E  4EB9 00000874            314      JSR     THREE101            - LEA
00000754  4E75                     315      RTS                                 
00000756  4EB9 00000876            316      JSR     THREE110            - LEA, MOVEM        
0000075C  4E75                     317      RTS                                 
0000075E  4EB9 00000878            318      JSR     THREE111            - LEA, JSR, NOP, RTS       
00000764  4E75                     319      RTS    
00000766                           320      
00000766                           321  *********************************************************
00000766                           322  * 0100 
00000766                           323  THREE_TABLE_2     
00000766  4EB9 000008BC            324      JSR     THREE2000            - CLR.B               
0000076C  4E75                     325      RTS                                 
0000076E  4EB9 000008F0            326      JSR     THREE2001            - CLR.W       
00000774  4E75                     327      RTS                                 
00000776  4EB9 00000924            328      JSR     THREE2010            - CLR.L, MOVEM.W
0000077C  4E75                     329      RTS                                 
0000077E  4EB9 00000958            330      JSR     THREE2011            - MOVEM.L, JSR        
00000784  4E75                     331      RTS                                 
00000786  4EB9 0000095A            332      JSR     THREE2100            - Bad Data       
0000078C  4E75                     333      RTS                                 
0000078E  4EB9 0000095C            334      JSR     THREE2101            - Bad Data
00000794  4E75                     335      RTS                                 
00000796  4EB9 0000095E            336      JSR     THREE2110            - Bad Data
0000079C  4E75                     337      RTS                                 
0000079E  4EB9 00000960            338      JSR     THREE2111            - LEA     
000007A4  4E75                     339      RTS    
000007A6                           340      
000007A6                           341   
000007A6                           342      
000007A6                           343      
000007A6                           344      
000007A6                           345  ********************************************************
000007A6                           346  
000007A6                           347  
000007A6                           348  OPCODE0101       
000007A6  0639 000A 00000DE6       349      ADD.B       #10, BAD_DATA_SWITCH             
000007AE  4E75                     350      RTS
000007B0                           351  OPCODE1010  
000007B0  0639 000A 00000DE6       352      ADD.B       #10, BAD_DATA_SWITCH              
000007B8  4E75                     353      RTS                         
000007BA                           354  OPCODE1111 
000007BA  0639 000A 00000DE6       355      ADD.B       #10, BAD_DATA_SWITCH               
000007C2  4E75                     356      RTS                          
000007C4                           357  
000007C4                           358  
000007C4                           359  OPCODE0000
000007C4  4E75                     360      RTS
000007C6                           361  OPCODE0001
000007C6  4E75                     362      RTS
000007C8                           363  OPCODE0010
000007C8  4E75                     364      RTS
000007CA                           365  OPCODE0011
000007CA  4E75                     366      RTS
000007CC                           367  OPCODE0100
000007CC  3C05                     368      MOVE.W          D5, D6                     
000007CE  E75E                     369      ROL.W           #3, D6
000007D0  3A06                     370      MOVE.W          D6, D5
000007D2  0246 0007                371      ANDI.W          #$0007, D6
000007D6  CCFC 0008                372      MULU            #8, D6
000007DA  41F8 0726                373      LEA             THREE_TABLE, A0
000007DE  4EB0 6000                374      JSR             00(A0,D6)   
000007E2  4E75                     375      RTS
000007E4                           376  OPCODE0110
000007E4  4E75                     377      RTS
000007E6                           378  OPCODE0111
000007E6  4E75                     379      RTS
000007E8                           380  OPCODE1001
000007E8  4E75                     381      RTS
000007EA                           382  OPCODE1011
000007EA  4E75                     383      RTS  
000007EC                           384  OPCODE1100
000007EC  4E75                     385      RTS
000007EE                           386  OPCODE1101
000007EE  4E75                     387      RTS  
000007F0                           388  OPCODE1110
000007F0  4E75                     389      RTS
000007F2                           390  OPCODE1000
000007F2  4E75                     391      RTS
000007F4                           392      
000007F4                           393  
000007F4                           394                               
000007F4                           395  
000007F4                           396  *********************************************************
000007F4                           397  EA_MODE
000007F4  4EF9 00000962            398      JMP    EAMODE000            Call function with EA mode of 000
000007FA  4EF9 0000097E            399      JMP    EAMODE001            Call function with EA mode of 001
00000800  4EF9 00000980            400      JMP    EAMODE010            Call function with EA mode of 010
00000806  4EF9 000009A4            401      JMP    EAMODE011            Call function with EA mode of 011
0000080C  4EF9 000009CC            402      JMP    EAMODE100            Call function with EA mode of 100
00000812  4EF9 000009F4            403      JMP    EAMODE101            Call function with EA mode of 101
00000818  4EF9 000009FE            404      JMP    EAMODE110            Call function with EA mode of 110
0000081E  4EF9 00000A08            405      JMP    EAMODE111            Call function with EA mode of 111
00000824                           406  *********************************************************   
00000824                           407  REGISTER
00000824  4EF9 00000A20            408      JMP    REGISTER000          Call function with EA register of 000
0000082A  4EF9 00000A4C            409      JMP    REGISTER001          Call function with EA register of 001
00000830  4EF9 00000A78            410      JMP    REGISTER010          Call function with EA register of 010
00000836  4EF9 00000A7E            411      JMP    REGISTER011          Call function with EA register of 011
0000083C  4EF9 00000A84            412      JMP    REGISTER100          Call function with EA register of 100
00000842  4EF9 00000A8A            413      JMP    REGISTER101          Call function with EA register of 101
00000848  4EF9 00000A90            414      JMP    REGISTER110          Call function with EA register of 110
0000084E  4EF9 00000A96            415      JMP    REGISTER111          Call function with EA register of 111
00000854                           416  *********************************************************   
00000854                           417  *ABSOLUTE
00000854                           418  *    JMP    ABSOLUTE000         Call function with absolute register of 000
00000854                           419  *    JMP    ABSOLUTE001         Call function with absolute register of 001
00000854                           420  *    JMP    ABSOLUTE010         Call function with absolute register of 100
00000854                           421  *    JMP    ABSOLUTE011         Call function with absolute register of 100
00000854                           422  *    JMP    ABSOLUTE100         Call function with absolute register of 100
00000854                           423  *
00000854                           424  
00000854                           425  
00000854                           426  
00000854                           427     
00000854                           428  THREE000
00000854  4E75                     429      RTS
00000856                           430  THREE001
00000856  3C05                     431      MOVE.W          D5, D6                     
00000858  E75E                     432      ROL.W           #3, D6
0000085A  3A06                     433      MOVE.W          D6, D5
0000085C  0246 0007                434      ANDI.W          #$0007, D6
00000860  CCFC 0008                435      MULU            #8, D6
00000864  41F8 0766                436      LEA             THREE_TABLE_2, A0
00000868  4EB0 6000                437      JSR             00(A0,D6) 
0000086C  4E75                     438      RTS    
0000086E                           439  THREE010
0000086E                           440      
0000086E  4E75                     441      RTS
00000870                           442  THREE011
00000870  4E75                     443      RTS
00000872                           444  THREE100
00000872  4E75                     445      RTS
00000874                           446  THREE101
00000874  4E75                     447      RTS
00000876                           448  THREE110
00000876  4E75                     449      RTS
00000878                           450  THREE111
00000878  BE7C 4E75                451          CMP.W           #$4E75, D7                      Is this an RTS function
0000087C  6700 0030                452          BEQ             IS_RTS                         If so go to the ITSARTS function
00000880  BE7C 4E71                453          CMP.W           #$4E71, D7
00000884  6700 001A                454          BEQ             IS_NOP
00000888                           455      
00000888  3C05                     456          MOVE.W          D5, D6                     
0000088A  E75E                     457          ROL.W           #3, D6
0000088C  3A06                     458          MOVE.W          D6, D5
0000088E  0246 0007                459          ANDI.W          #$0007, D6
00000892  CCFC 0006                460          MULU            #6, D6
00000896  41F8 0766                461          LEA             THREE_TABLE_2, A0
0000089A  4EB0 6000                462          JSR             00(A0,D6)   
0000089E  4E75                     463          RTS
000008A0                           464  IS_NOP
000008A0  1AFC 004E                465      MOVE.B  #'N',(A5)+                      Insert R into output
000008A4  1AFC 004F                466      MOVE.B  #'O',(A5)+                      Insert T into output
000008A8  1AFC 0050                467      MOVE.B  #'P',(A5)+                      Insert S into output
000008AC  4E75                     468      RTS  
000008AE                           469  IS_RTS
000008AE  1AFC 0052                470      MOVE.B  #'R',(A5)+                      Insert R into output
000008B2  1AFC 0054                471      MOVE.B  #'T',(A5)+                      Insert T into output
000008B6  1AFC 0053                472      MOVE.B  #'S',(A5)+                      Insert S into output
000008BA  4E75                     473      RTS       
000008BC                           474      
000008BC                           475      
000008BC                           476  THREE2000
000008BC  1AFC 0043                477      MOVE.B      #'C',(A5)+
000008C0  1AFC 004C                478      MOVE.B      #'L',(A5)+
000008C4  1AFC 0052                479      MOVE.B      #'R',(A5)+
000008C8  1AFC 002E                480      MOVE.B      #'.',(A5)+
000008CC  1AFC 0042                481      MOVE.B      #'B',(A5)+
000008D0  1AFC 0020                482      MOVE.B      #' ',(A5)+
000008D4  1AFC 0020                483      MOVE.B      #' ',(A5)+
000008D8                           484      
000008D8  3C05                     485      MOVE.W      D5, D6                     
000008DA  E75E                     486      ROL.W       #3, D6
000008DC  3A06                     487      MOVE.W      D6, D5
000008DE  0246 0007                488      ANDI.W      #$0007, D6
000008E2  CCFC 0006                489      MULU        #6, D6
000008E6  41F8 07F4                490      LEA         EA_MODE, A0
000008EA  4EB0 6000                491      JSR         00(A0,D6)   
000008EE                           492         
000008EE  4E75                     493      RTS
000008F0                           494  THREE2001
000008F0  1AFC 0043                495      MOVE.B      #'C',(A5)+
000008F4  1AFC 004C                496      MOVE.B      #'L',(A5)+
000008F8  1AFC 0052                497      MOVE.B      #'R',(A5)+
000008FC  1AFC 002E                498      MOVE.B      #'.',(A5)+
00000900  1AFC 0057                499      MOVE.B      #'W',(A5)+
00000904  1AFC 0020                500      MOVE.B      #' ',(A5)+
00000908  1AFC 0020                501      MOVE.B      #' ',(A5)+
0000090C                           502      
0000090C  3C05                     503      MOVE.W      D5, D6                     
0000090E  E75E                     504      ROL.W       #3, D6
00000910  3A06                     505      MOVE.W      D6, D5
00000912  0246 0007                506      ANDI.W      #$0007, D6
00000916  CCFC 0006                507      MULU        #6, D6
0000091A  41F8 07F4                508      LEA         EA_MODE, A0
0000091E  4EB0 6000                509      JSR         00(A0,D6)   
00000922                           510         
00000922  4E75                     511      RTS
00000924                           512  
00000924                           513  THREE2010
00000924  1AFC 0043                514      MOVE.B      #'C',(A5)+
00000928  1AFC 004C                515      MOVE.B      #'L',(A5)+
0000092C  1AFC 0052                516      MOVE.B      #'R',(A5)+
00000930  1AFC 002E                517      MOVE.B      #'.',(A5)+
00000934  1AFC 004C                518      MOVE.B      #'L',(A5)+
00000938  1AFC 0020                519      MOVE.B      #' ',(A5)+
0000093C  1AFC 0020                520      MOVE.B      #' ',(A5)+
00000940                           521      
00000940  3C05                     522      MOVE.W      D5, D6                     
00000942  E75E                     523      ROL.W       #3, D6
00000944  3A06                     524      MOVE.W      D6, D5
00000946  0246 0007                525      ANDI.W      #$0007, D6
0000094A  CCFC 0006                526      MULU        #6, D6
0000094E  41F8 07F4                527      LEA         EA_MODE, A0
00000952  4EB0 6000                528      JSR         00(A0,D6)  
00000956  4E75                     529      RTS
00000958                           530  THREE2011
00000958  4E75                     531      RTS
0000095A                           532  THREE2100
0000095A  4E75                     533      RTS
0000095C                           534  THREE2101
0000095C  4E75                     535      RTS
0000095E                           536  THREE2110
0000095E  4E75                     537      RTS
00000960                           538  THREE2111 
00000960  4E75                     539      RTS
00000962                           540      
00000962                           541  
00000962                           542  
00000962                           543  
00000962                           544  EAMODE000
00000962  1AFC 0044                545      MOVE.B      #'D',(A5)+  
00000966  3C05                     546      MOVE.W      D5, D6                     
00000968  E75E                     547      ROL.W       #3, D6
0000096A  3A06                     548      MOVE.W      D6, D5
0000096C  0246 0007                549      ANDI.W      #$0007, D6
00000970  CCFC 0006                550      MULU        #6, D6
00000974  41F8 0824                551      LEA         REGISTER, A0
00000978  4EB0 6000                552      JSR         00(A0,D6)
0000097C  4E75                     553      RTS   
0000097E                           554  EAMODE001
0000097E  4E75                     555      RTS             
00000980                           556  EAMODE010 
00000980  1AFC 0028                557      MOVE.B      #'(',(A5)+  
00000984  1AFC 0041                558      MOVE.B      #'A',(A5)+  
00000988  3C05                     559      MOVE.W      D5, D6                     
0000098A  E75E                     560      ROL.W       #3, D6
0000098C  3A06                     561      MOVE.W      D6, D5
0000098E  0246 0007                562      ANDI.W      #$0007, D6
00000992  CCFC 0006                563      MULU        #6, D6
00000996  41F8 0824                564      LEA         REGISTER, A0
0000099A  4EB0 6000                565      JSR         00(A0,D6)
0000099E  1AFC 0029                566      MOVE.B      #')',(A5)+
000009A2  4E75                     567      RTS     
000009A4                           568  EAMODE011 
000009A4  1AFC 0028                569      MOVE.B      #'(',(A5)+  
000009A8  1AFC 0041                570      MOVE.B      #'A',(A5)+  
000009AC  3C05                     571      MOVE.W      D5, D6                     
000009AE  E75E                     572      ROL.W       #3, D6
000009B0  3A06                     573      MOVE.W      D6, D5
000009B2  0246 0007                574      ANDI.W      #$0007, D6
000009B6  CCFC 0006                575      MULU        #6, D6
000009BA  41F8 0824                576      LEA         REGISTER, A0
000009BE  4EB0 6000                577      JSR         00(A0,D6)
000009C2  1AFC 0029                578      MOVE.B      #')',(A5)+
000009C6  1AFC 002B                579      MOVE.B      #'+',(A5)+
000009CA  4E75                     580      RTS
000009CC                           581  EAMODE100
000009CC  1AFC 002D                582      MOVE.B      #'-',(A5)+
000009D0  1AFC 0028                583      MOVE.B      #'(',(A5)+  
000009D4  1AFC 0041                584      MOVE.B      #'A',(A5)+  
000009D8  3C05                     585      MOVE.W      D5, D6                     
000009DA  E75E                     586      ROL.W       #3, D6
000009DC  3A06                     587      MOVE.W      D6, D5
000009DE  0246 0007                588      ANDI.W      #$0007, D6
000009E2  CCFC 0006                589      MULU        #6, D6
000009E6  41F8 0824                590      LEA         REGISTER, A0
000009EA  4EB0 6000                591      JSR         00(A0,D6)
000009EE  1AFC 0029                592      MOVE.B      #')',(A5)+
000009F2  4E75                     593      RTS             
000009F4                           594  EAMODE101
000009F4  0639 000A 00000DE6       595      ADD.B       #10, BAD_DATA_SWITCH             
000009FC  4E75                     596      RTS             
000009FE                           597  EAMODE110
000009FE  0639 000A 00000DE6       598      ADD.B       #10, BAD_DATA_SWITCH             
00000A06  4E75                     599      RTS             
00000A08                           600  EAMODE111
00000A08  3C05                     601      MOVE.W      D5, D6                     
00000A0A  E75E                     602      ROL.W       #3, D6
00000A0C  3A06                     603      MOVE.W      D6, D5
00000A0E  0246 0007                604      ANDI.W      #$0007, D6
00000A12  CCFC 0006                605      MULU        #6, D6
00000A16  41F8 0824                606      LEA         REGISTER, A0
00000A1A  4EB0 6000                607      JSR         00(A0,D6)
00000A1E  4E75                     608      RTS         
00000A20                           609  
00000A20                           610  
00000A20                           611  * Registers ------------------------------------------------
00000A20                           612  REGISTER000
00000A20  3C05                     613      MOVE.W      D5, D6                     
00000A22  E15E                     614      ROL.W       #8, D6
00000A24  EB5E                     615      ROL.W       #5, D6
00000A26  0246 0007                616      ANDI.W      #$0007, D6
00000A2A  BC3C 0007                617      CMP.B       #$7,D6
00000A2E  6700 0006                618      BEQ         ReadNextW
00000A32  6000 0012                619      BRA         CREGISTER000
00000A36                           620  ReadNextW
00000A36  1C3C 0000                621      MOVE.B      #0,D6                           * Set 0
00000A3A  3A1E                     622      MOVE.W      (A6)+,D5                           * Bad Code to D5
00000A3C  163C 0004                623      MOVE.B      #4,D3
00000A40  4EB8 0634                624      JSR         WORD_ASCII
00000A44  4E75                     625      RTS
00000A46                           626  CREGISTER000
00000A46  1AFC 0030                627      MOVE.B      #'0',(A5)+
00000A4A  4E75                     628      RTS
00000A4C                           629  REGISTER001
00000A4C  3C05                     630      MOVE.W      D5, D6                     
00000A4E  E15E                     631      ROL.W       #8, D6
00000A50  EB5E                     632      ROL.W       #5, D6
00000A52  0246 0007                633      ANDI.W      #$0007, D6
00000A56  BC3C 0007                634      CMP.B       #$7,D6
00000A5A  6700 0006                635      BEQ         ReadNextL
00000A5E  6000 0012                636      BRA         CREGISTER001  
00000A62                           637  ReadNextL
00000A62  1C3C 0000                638      MOVE.B      #0,D6                           * Set 0
00000A66  2A1E                     639      MOVE.L      (A6)+,D5                           * Bad Code to D5
00000A68  163C 0008                640      MOVE.B      #8,D3
00000A6C  4EB8 0660                641      JSR         LONG_ASCII
00000A70  4E75                     642      RTS
00000A72                           643  
00000A72                           644  CREGISTER001  
00000A72  1AFC 0031                645      MOVE.B      #'1',(A5)+
00000A76  4E75                     646      RTS
00000A78                           647  REGISTER010
00000A78  1AFC 0032                648      MOVE.B      #'2',(A5)+
00000A7C  4E75                     649      RTS
00000A7E                           650  REGISTER011
00000A7E  1AFC 0033                651      MOVE.B      #'3',(A5)+
00000A82  4E75                     652      RTS
00000A84                           653  REGISTER100
00000A84  1AFC 0034                654      MOVE.B      #'4',(A5)+
00000A88  4E75                     655      RTS
00000A8A                           656  REGISTER101
00000A8A  1AFC 0035                657      MOVE.B      #'5',(A5)+
00000A8E  4E75                     658      RTS
00000A90                           659  REGISTER110
00000A90  1AFC 0036                660      MOVE.B      #'6',(A5)+
00000A94  4E75                     661      RTS
00000A96                           662  REGISTER111
00000A96  1AFC 0037                663      MOVE.B      #'7',(A5)+
00000A9A  4E75                     664      RTS
00000A9C                           665  *---------------------------------------------------------------
00000A9C                           666  
00000A9C                           667  
00000A9C                           668  ********************************************************************************************
00000A9C                           669  *------------------ PRINT CURRENT ADDRESS IN ASCII -----------------------------------------
00000A9C                           670  PRINT_CURRENT_ADD
00000A9C  240E                     671          MOVE.L      A6,D2                       * Move current address into D2
00000A9E  1A3C 0000                672          MOVE.B      #0,D5                       * Set counter to read all hex
00000AA2  1C3C 0008                673          MOVE.B      #8,D6                       
00000AA6                           674  CONVERT_HEX_ASCII
00000AA6  BC05                     675          CMP.B       D5,D6                       * Check if last hex character is read
00000AA8  6600 0012                676          BNE         SET_COUNTER_4               * Set counter to read 4 bits
00000AAC  103C 0006                677          MOVE.B      #6, D0
00000AB0  123C 0020                678          MOVE.B      #32, D1
00000AB4  4E4F                     679          TRAP        #15
00000AB6  4E4F                     680          TRAP        #15
00000AB8  4E4F                     681          TRAP        #15
00000ABA  4E75                     682          RTS
00000ABC                           683  SET_COUNTER_4
00000ABC  163C 0000                684          MOVE.B      #0,D3                       
00000AC0  183C 0004                685          MOVE.B      #4,D4    
00000AC4                           686  Loop
00000AC4  B803                     687          CMP.B       D3,D4                       * Read one character at a time
00000AC6  6700 0018                688          BEQ         STORE_ONE_CHAR
00000ACA  E38A                     689          LSL.L       #1,D2
00000ACC  6400 0008                690          BCC         ADDZERO
00000AD0  5201                     691          ADDI.B      #1,D1
00000AD2  6000 0006                692          BRA         INCREMENT_BIT_LOOP
00000AD6                           693  ADDZERO
00000AD6  0601 0000                694          ADDI.B      #0,D1
00000ADA                           695  INCREMENT_BIT_LOOP
00000ADA  5203                     696          ADDI.B      #1,D3
00000ADC  E389                     697          LSL.L       #1,D1
00000ADE  60E4                     698          BRA         Loop
00000AE0                           699  STORE_ONE_CHAR                                   * Store hex character
00000AE0  E289                     700          LSR.L       #1,D1
00000AE2  B23C 000A                701          CMP.B       #$A,D1
00000AE6  6D00 000A                702          BLT         HEX_TO_ASCII_NUMBER
00000AEA  0601 0037                703          ADDI.B      #$37,D1                     * HEX_TO_ASCII_LETTER
00000AEE  6000 0006                704          BRA         INCREMENT_NEXT_HEX_LOOP
00000AF2                           705  HEX_TO_ASCII_NUMBER
00000AF2  0601 0030                706          ADDI.B      #$30,D1
00000AF6                           707  INCREMENT_NEXT_HEX_LOOP
00000AF6  5205                     708          ADDI.B      #1,D5
00000AF8  103C 0006                709          MOVE.B      #6,D0
00000AFC  4E4F                     710          TRAP        #15
00000AFE  4281                     711          CLR.L       D1
00000B00  60A4                     712          BRA         CONVERT_HEX_ASCII
00000B02                           713  ***********************END OF PRINTING HEX ADDRESS TO ASCII *******************
00000B02                           714  
00000B02                           715  ********************************************************************************************
00000B02                           716  *------------------ KEY -  -----------------------------------------------------------------
00000B02                           717  * Desctiption:
00000B02                           718  * Expect:       DO, D1, A1 to be empty
00000B02                           719  * 
00000B02                           720  *------------------ Prompt User for Enter, R, or Q -----------------------------------------
00000B02                           721  USER_RESPONSE
00000B02  43F9 00000CA2            722          LEA         PROMPTOPTIONS, A1            * Load the prompt message
00000B08  103C 000E                723          MOVE.B      #14,D0
00000B0C  4E4F                     724          TRAP        #15 
00000B0E  13FC 0000 00000DE2       725          MOVE.B      #$00, LINE_COUNT            * Reset Line Count 
00000B16  103C 0005                726          MOVE.B      #5, D0                      * Log keyboard input
00000B1A  4E4F                     727          TRAP        #15                 
00000B1C  B23C 000D                728          CMP.B       #$D, D1                     * Compare the key press with ENTER
00000B20  6700 0028                729          BEQ         CLEAR_SCREEN                  
00000B24  B23C 0072                730          CMP.B       #$72, D1                    * Compare the key press with R
00000B28  6700 0030                731          BEQ         RESTART             
00000B2C  B23C 0052                732          CMP.B       #$52, D1                    * Compare the key press with r
00000B30  6700 0028                733          BEQ         RESTART             
00000B34  B23C 0071                734          CMP.B       #$71, D1                    * Compare the key press with q
00000B38  6700 0068                735          BEQ         END_PROGRAM             
00000B3C  B23C 0051                736          CMP.B       #$51, D1                    * Compare the key press with Q
00000B40  6700 0060                737          BEQ         END_PROGRAM            
00000B44  B23C 005D                738          CMP.B       #$5D, D1                    * Check the key press with ENTER
00000B48  66B8                     739          BNE         USER_RESPONSE              
00000B4A                           740  CLEAR_SCREEN
00000B4A  103C 000B                741          MOVE.B  #11, D0                         * Task 11 - Clear screen
00000B4E  323C FF00                742          MOVE.W  #$FF00, D1          
00000B52  4E4F                     743          TRAP    #15                 
00000B54  4281                     744          CLR.L   D1
00000B56  4280                     745          CLR.L   D0
00000B58  4E75                     746          RTS                 
00000B5A                           747  *------------------ RESTART ----------------------------------------------------------------
00000B5A                           748  RESTART
00000B5A  4EB8 0B4A                749          JSR         CLEAR_SCREEN
00000B5E  4EB9 00000B74            750          JSR         CLEAR_REGISTERS
00000B64  2E7C 01000000            751          MOVEA.L     #$01000000,A7       Reset stack pointer
00000B6A  2C7C 01000000            752          MOVEA.L     #$01000000,A6       Reset stack pointer
00000B70  6000 F88E                753          BRA         START
00000B74                           754          
00000B74                           755  ********************************************************************************************
00000B74                           756  *------------------ CLEAR REGISTERS --------------------------------------------------------
00000B74                           757  * Desctiption:
00000B74                           758  * 
00000B74                           759  CLEAR_REGISTERS
00000B74  4280                     760          CLR.L   D0
00000B76  4285                     761          CLR.L   D5
00000B78  4282                     762          CLR.L   D2
00000B7A  4281                     763          CLR.L   D1
00000B7C  4283                     764          CLR.L   D3
00000B7E  4284                     765          CLR.L   D4
00000B80  4286                     766          CLR.L   D6
00000B82  227C 00000000            767          MOVE.L  #$00000000,A1
00000B88  247C 00000000            768          MOVE.L  #$00000000,A2
00000B8E  267C 00000000            769          MOVE.L  #$00000000,A3
00000B94  287C 00000000            770          MOVE.L  #$00000000,A4
00000B9A  2A7C 00000000            771          MOVE.L  #$00000000,A5
00000BA0  4E75                     772          RTS
00000BA2                           773  
00000BA2                           774  ********************************************************************************************
00000BA2                           775  ********************************************************************************************
00000BA2                           776  ********************************************************************************************
00000BA2                           777  END_PROGRAM
00000BA2  FFFF FFFF                778          SIMHALT             ; halt simulator
00000BA6                           779  ********************************************************************************************
00000BA6                           780  ********************************************************************************************
00000BA6                           781  ********************************************************************************************
00000BA6                           782  
00000BA6                           783  
00000BA6                           784  ********************************************************************************************
00000BA6                           785  * VARIABLES & MESSAGES ---------------------------------------------------------------------
00000BA6  =0000000D                786  CR        EQU       $0D
00000BA6  =0000000A                787  LF        EQU       $0A
00000BA6                           788  
00000BA6                           789  * MESSAGES ---------------------------------------------------------------------------------------------
00000BA6= 20 20 20 20 20 20 ...    790  GREETING        DC.B    '       HELLO THERE, WELCOME TO AWESOME DISASSEMBLER'
00000BD9= 0D 0A 4E 6F 74 65 ...    791                  DC.B    CR,LF,'Note: Addressess must be in HEX'
00000BFA= 0D 0A 4E 6F 74 65 ...    792                  DC.B    CR,LF,'Note: Addressess must be in caps'
00000C1C= 0D 0A 20 20 20 20 ...    793                  DC.B    CR,LF,'    : Starting Address must be greater than 70000',CR,LF,CR,LF,CR,LF,0 
00000C56= 454E 5445 5220 4...      794  PROMPTSADDR     DC.W    'ENTER A STARTING ADDRESS (ON CAPS): ',0
00000C7C= 454E 5445 5220 4...      795  PROMPTEADDR     DC.W    'ENTER A ENDING ADDRESS   (ON CAPS): ',0
00000CA2= 50 72 65 73 73 3A ...    796  PROMPTOPTIONS    DC.B    'Press: ENTER to Continue || Q or q to Quit || R OR r to Restart',CR,LF,CR,LF,0
00000CE6                           797  * ERROR MSG --------------------------------------------------------------------------------------------
00000CE6= 45 52 52 4F 52 3A ...    798  INVALIDSADDR        DC.B    'ERROR: INVALID STARTING ADDRESS VERSUS ENDING.',CR,LF,CR,LF,0
00000D19= 45 52 52 4F 52 3A ...    799  ERRORINPUTSIZE      DC.B    'ERROR: INVALID ADDRESS SIZE',CR,LF,CR,LF,0
00000D39= 45 52 52 4F 52 3A ...    800  INVALIDCHAR         DC.B    'ERROR: INVALID ADDRESS CHARACTER',CR,LF,CR,LF,0
00000D5E= 45 52 52 4F 52 3A ...    801  SGTEM               DC.B    'ERROR: STARTING ADDRESS > ENDING ADDRESS',CR,LF,CR,LF,0
00000D8B= 45 52 52 4F 52 3A ...    802  ODD_ADD_MSG         DC.B    'ERROR: ODD ADDRESS',CR,LF,CR,LF,0
00000DA2= 45 52 52 4F 52 3A ...    803  STARTING_ADDR_7     DC.B    'ERROR: Invalid starting adress - must be greater than 7000',CR,LF,CR,LF,0
00000DE1                           804  * VARIABLES --------------------------------------------------------------------------------------------
00000DE2                           805  LINE_COUNT      DS.L    1
00000DE6                           806  BAD_DATA_SWITCH DS.L    1    
00000DEA                           807  SIZE            DS.B    1
00000DEC                           808  INPUT_HEX       DS.L    1   * Use to temp hold starting and ending address
00000DF0                           809  STARTING_ADD    DS.L    1   ;1 is the size, if I change to 4 then array size changes
00000DF4                           810  ENDING_ADD      DS.L    1
00000DF8= 00000001                 811  PRINTER         DC.L    1
00000DFC                           812          
00000DFC                           813          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR_LOOP           56A
ADDZERO             AD6
BADSIZES            46A
BAD_DATA            5FE
BAD_DATA_SWITCH     DE6
CLEAR_REGISTERS     B74
CLEAR_SCREEN        B4A
CONTINUE_ADDR_LOOP  594
CONTINUE_STORE      528
CONVERT_HEX_ASCII   AA6
CR                  D
CREGISTER000        A46
CREGISTER001        A72
DATA_ASC            63E
DATA_ASC2           66A
DATA_CHAR           656
DATA_CHAR2          682
DATA_LET            646
DATA_LET2           672
DATA_NUM            64E
DATA_NUM2           67A
EAMODE000           962
EAMODE001           97E
EAMODE010           980
EAMODE011           9A4
EAMODE100           9CC
EAMODE101           9F4
EAMODE110           9FE
EAMODE111           A08
EA_MODE             7F4
ENDING_ADD          DF4
END_PROGRAM         BA2
ERRORINPUTSIZE      D19
GET_INSTRUCTION     68C
GREETING            BA6
HEX_TO_ASCII_NUMBER  AF2
INCREMENT_BIT_LOOP  ADA
INCREMENT_NEXT_HEX_LOOP  AF6
INPUT_HEX           DEC
INVALIDCHAR         D39
INVALIDSADDR        CE6
INVALID_CHARACTER   47E
IS_NOP              8A0
IS_RTS              8AE
LETTERS             4B2
LF                  A
LINE_COUNT          DE2
LONG_ASCII          660
LOOP                AC4
NUMBER              4AA
ODD_ADD_MSG         D8B
ODD_TEST            4C8
ODD_TEST_FAIL       4E0
OPCODE0000          7C4
OPCODE0001          7C6
OPCODE0010          7C8
OPCODE0011          7CA
OPCODE0100          7CC
OPCODE0101          7A6
OPCODE0110          7E4
OPCODE0111          7E6
OPCODE1000          7F2
OPCODE1001          7E8
OPCODE1010          7B0
OPCODE1011          7EA
OPCODE1100          7EC
OPCODE1101          7EE
OPCODE1110          7F0
OPCODE1111          7BA
OPCODE_JMP_TABLE    6A6
PRINTER             DF8
PRINT_BAD_DATA      5D0
PRINT_CURRENT_ADD   A9C
PROMPTEADDR         C7C
PROMPTOPTIONS       CA2
PROMPTSADDR         C56
READHEX             492
READNEXTL           A62
READNEXTW           A36
READ_EADDR          43A
READ_SADDR          41C
REGISTER            824
REGISTER000         A20
REGISTER001         A4C
REGISTER010         A78
REGISTER011         A7E
REGISTER100         A84
REGISTER101         A8A
REGISTER110         A90
REGISTER111         A96
RESTART             B5A
SET_COUNTER_4       ABC
SGTE                556
SGTEM               D5E
SIZE                DEA
START               400
STARTING_ADD        DF0
STARTING_ADDR_7     DA2
STORE               4BA
STORE_ADDRESS       4FC
STORE_E             544
STORE_ENDING        53A
STORE_ONE_CHAR      AE0
THREE000            854
THREE001            856
THREE010            86E
THREE011            870
THREE100            872
THREE101            874
THREE110            876
THREE111            878
THREE2000           8BC
THREE2001           8F0
THREE2010           924
THREE2011           958
THREE2100           95A
THREE2101           95C
THREE2110           95E
THREE2111           960
THREE_TABLE         726
THREE_TABLE_2       766
USER_RESPONSE       B02
VALIDATE_STORE      456
WORD_ASCII          634
