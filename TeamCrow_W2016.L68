00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/5/2016 4:10:12 PM

00000000                             1  *------------------------------------------------------------------------------------------
00000000                             2  * Title:  68K Disassembler
00000000                             3  * Written by :  Hoa, Tenzin Khando, Marco F.
00000000                             4  * Date       :
00000000                             5  * Description:  Awesome 68k disassembler 
00000000                             6  *------------------------------------------------------------------------------------------
00000400                             7      ORG    $400
00000400                             8  START:  
00000400  43F9 00000892              9          LEA         GREETING, A1            * Load the greeting message
00000406  103C 000E                 10          MOVE.B      #14,D0
0000040A  4E4F                      11          TRAP        #15 
0000040C  13FC 0000 00000ACE        12          MOVE.B      #0, LINE_COUNT          * Initilize the LINE_COUNTER variable 
00000414                            13      
00000414                            14  ********************************************************************************************
00000414                            15  * DESCRIPTION: Reading Addresses
00000414                            16  *------------------ STARTING ADDRESS -------------------------------------------------------
00000414                            17  READ_SADDR
00000414  4287                      18          CLR.L       D7
00000416  43F9 00000942             19          LEA         PROMPTSADDR, A1
0000041C  103C 000E                 20          MOVE.B      #14, D0
00000420  4E4F                      21          TRAP        #15
00000422  43F9 00000AD4             22          LEA         INPUT_HEX,A1            * Temp hold starting address
00000428  103C 0002                 23          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
0000042C  4E4F                      24          TRAP        #15
0000042E  6000 001E                 25          BRA         VALIDATE_STORE 
00000432                            26  *------------------ ENDING ADDRESS -------------------------------------------------------
00000432                            27  READ_EADDR
00000432  43F9 00000968             28          LEA         PROMPTEADDR, A1
00000438  103C 000E                 29          MOVE.B      #14, D0
0000043C  4E4F                      30          TRAP        #15
0000043E  43F9 00000AD4             31          LEA         INPUT_HEX,A1            * Temp hold ending address
00000444  103C 0002                 32          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
00000448  4E4F                      33          TRAP        #15  
0000044A  6000 0002                 34          BRA         VALIDATE_STORE 
0000044E                            35  
0000044E                            36  ********************************************************************************************
0000044E                            37  * Validating and storing addresses
0000044E                            38  *------------------ VALIDATE & STORE  ADDRESS ----------------------------------------------
0000044E                            39  VALIDATE_STORE 
0000044E                            40  
0000044E                            41          * Check address size
0000044E  0C01 0004                 42          CMPI.B      #4, D1                  
00000452  6D00 000E                 43          BLT         BADSIZES 
00000456  0C01 0008                 44          CMPI.B      #8, D1 
0000045A  6E00 0006                 45          BGT         BADSIZES
0000045E  6000 002A                 46          BRA         READHEX
00000462                            47  BADSIZES
00000462  43F9 00000A05             48          LEA         ERRORINPUTSIZE, A1      * Print Bad Size Error
00000468  103C 000E                 49          MOVE.B      #14,D0
0000046C  4E4F                      50          TRAP        #15
0000046E  B63C 0000                 51          CMP.B       #0,D3                   * D3 - HOLDS 0 if starting address has not being stored yet
00000472  67A0                      52          BEQ         READ_SADDR
00000474  60BC                      53          BRA         READ_EADDR 
00000476                            54  INVALID_CHARACTER                           * Print Invalid Character for Address
00000476  43F9 00000A25             55          LEA         INVALIDCHAR, A1
0000047C  103C 000E                 56          MOVE.B      #14,D0 
00000480  4E4F                      57          TRAP        #15 
00000482  B63C 0000                 58          CMP.B       #0,D3
00000486  678C                      59          BEQ         READ_SADDR 
00000488  60A8                      60          BRA         READ_EADDR
0000048A                            61  *------------------ Read ASCII & Convert + Store as Hex ----------------------------------
0000048A                            62  READHEX       
0000048A  0C11 0030                 63          CMPI.B      #$30,(A1)
0000048E  6DE6                      64          BLT         INVALID_CHARACTER       * Wrong data
00000490  0C11 0040                 65          CMPI.B      #$40,(A1)
00000494  6D00 000C                 66          BLT         NUMBER                  * Is number
00000498  0C11 0047                 67          CMPI.B      #$47,(A1)
0000049C  6D00 000C                 68          BLT         LETTERS                 * Is Letter
000004A0  60D4                      69          BRA         INVALID_CHARACTER
000004A2                            70  NUMBER      
000004A2  0411 0030                 71          SUBI.B      #$30,(A1)               * Convert Numbers to Hex
000004A6  6000 000A                 72          BRA         STORE   
000004AA                            73  LETTERS     
000004AA  0411 0037                 74          SUBI.B      #$37,(A1)               * Convert Numbers to Hex
000004AE  6000 0002                 75          BRA         STORE
000004B2                            76  STORE       
000004B2  DE19                      77          ADD.B       (A1)+,D7                * Save data from A1 to D7
000004B4  0C11 0000                 78          CMPI.B      #0,(A1)                 * NO MORE TO READ SO CHECK IF ADDRESS IS ODD
000004B8  6700 0006                 79          BEQ         ODD_TEST     
000004BC  E98F                      80          LSL.L       #4,D7                   * Keep reading next character
000004BE  60CA                      81          BRA         READHEX
000004C0                            82  
000004C0                            83  * Before storing address - check if odd --------------------------------------------------------
000004C0                            84  ODD_TEST                                    * Check if address is odd
000004C0  7202                      85          MOVE.L      #$00000002,D1           * Put 2 in D1 so we can use it to divide input by 2
000004C2  2C07                      86          MOVE.L      D7,D6
000004C4  8CC1                      87          DIVU        D1,D6                   * Divide the input address by 2
000004C6  4846                      88          SWAP        D6                      * Store the remainder in D2
000004C8  BC3C 0001                 89          CMP.B       #1,D6                   * Is the remainder ==1
000004CC  6700 000A                 90          BEQ         ODD_TEST_FAIL           * Remainder is 1 so input fails odd test 
000004D0  B63C 0000                 91          CMP.B       #0,D3
000004D4                            92              
000004D4  6000 001E                 93          BRA         STORE_ADDRESS                           
000004D8                            94  ODD_TEST_FAIL   
000004D8  43F9 00000A77             95          LEA         ODD_ADD_MSG,A1          * Load ODD_ADD_MSG to A1
000004DE  103C 000E                 96          MOVE.B      #14,D0                  * Print odd address error message
000004E2  4E4F                      97          TRAP        #15                     
000004E4  4286                      98          CLR.L       D6
000004E6  4287                      99          CLR.L       D7      
000004E8  B63C 0000                100          CMP.B       #0,D3
000004EC  6700 FF26                101          BEQ         READ_SADDR
000004F0  6000 FF40                102          BRA         READ_EADDR 
000004F4                           103  
000004F4                           104  * STORE ADDRESSESSS INTO MEMORY ----------------------------------------------------------------              
000004F4                           105  STORE_ADDRESS
000004F4  4286                     106          CLR.L       D6
000004F6  B63C 0000                107          CMP.B       #0,D3
000004FA  6600 0036                108          BNE         STORE_ENDING
000004FE                           109          
000004FE  BEBC 00007000            110          CMP.L       #$00007000, D7
00000504  6E00 001A                111          BGT         CONTINUE_STORE
00000508  6700 0016                112          BEQ         CONTINUE_STORE
0000050C                           113      
0000050C  4286                     114          CLR.L       D6
0000050E  4287                     115          CLR.L       D7
00000510  43F9 00000A8E            116          LEA         STARTING_ADDR_7, A1         * Load ODD_ADD_MSG to A1
00000516  103C 000E                117          MOVE.B      #14,D0                  * Print odd address error message
0000051A  4E4F                     118          TRAP        #15  
0000051C  6000 FEF6                119          BRA         READ_SADDR
00000520                           120          
00000520                           121  CONTINUE_STORE        
00000520  23C7 00000AD8            122          MOVE.L      D7, STARTING_ADD        * Save in the memory address 
00000526  2C47                     123          MOVEA.L     D7, A6                  * Save starting at A6
00000528  163C 0001                124          MOVE.B      #1, D3                  * Counter - for VALID_STORE
0000052C  4287                     125          CLR.L       D7
0000052E  6000 FF02                126          BRA         READ_EADDR    
00000532                           127  STORE_ENDING 
00000532  BEB9 00000AD8            128          CMP.L       (STARTING_ADD), D7
00000538  6D00 0014                129          BLT         SGTE
0000053C                           130  
0000053C                           131  STORE_E             
0000053C  23C7 00000ADC            132          MOVE.L      D7, ENDING_ADD  
00000542  4287                     133          CLR.L       D7
00000544  4EB9 00000836            134          JSR         OPCODESETUP
0000054A  6000 0016                135          BRA         ADDR_LOOP
0000054E                           136  SGTE                                        * Starting greater then ending
0000054E  43F9 000009D2            137          LEA         INVALIDSADDR, A1
00000554  103C 000E                138          MOVE.B      #14, D0
00000558  4E4F                     139          TRAP        #15
0000055A  4287                     140          CLR.L       D7
0000055C  4283                     141          CLR.L       D3
0000055E  6000 FEB4                142          BRA         READ_SADDR
00000562                           143    
00000562                           144          
00000562                           145  ********************************************************************************************
00000562                           146  *------------------ OPCODE READ ------------------------------------------------------------
00000562                           147  * Description:
00000562                           148  *
00000562                           149  *------------------ Compare Current Address to Ending Adddres ------------------------------ 
00000562                           150  ADDR_LOOP
00000562  2A79 00000ADC            151          MOVE.L      ENDING_ADD,A5               * Check current address against ending adress           
00000568  BDCD                     152          CMP.L       A5,A6
0000056A  6E00 0322                153          BGT         END_PROGRAM    
0000056E  0C39 0019 00000ACE       154          CMP.B       #25, LINE_COUNT             * Check line counter
00000576  6600 0008                155          BNE         CONTINUE_ADDR_LOOP
0000057A  4EB9 000007E4            156          JSR         GETKEY        
00000580                           157  CONTINUE_ADDR_LOOP        
00000580  5239 00000ACE            158          ADD.B       #1, LINE_COUNT              * Update Line counter
00000586  4EB9 00000860            159          JSR         CLEAR_REGISTERS             * Clear registers
0000058C  4EB9 000005A4            160          JSR         PRINT_CURRENT_ADD           * PRINT CURRENT ADDRESS
00000592                           161         
00000592                           162  *------------------ NOP & RTS ADDRESS ------------------------------------------------------
00000592                           163  Decode_Constant                                 * Check for NOP & RTS
00000592  4EB9 00000860            164          JSR         CLEAR_REGISTERS
00000598  49F9 00000AE0            165          LEA         OPCODE, A4                  * Load opcode to A4
0000059E  4EB9 000005FC            166          JSR         UNCHANGED_CONSTANT          * NOP & RTS
000005A4                           167  
000005A4                           168          
000005A4                           169  ****************************PRINTING HEX ADDRESS TO ASCII *******************
000005A4                           170  PRINT_CURRENT_ADD
000005A4  240E                     171          MOVE.L      A6,D2
000005A6  1A3C 0000                172          MOVE.B      #0,D5
000005AA  1C3C 0008                173          MOVE.B      #8,D6
000005AE                           174  
000005AE                           175  CONVERT_HEX_ASCII
000005AE  BC05                     176          CMP.B       D5,D6
000005B0  6600 0004                177          BNE         SET_COUNTER_4
000005B4  4E75                     178          RTS
000005B6                           179  
000005B6                           180  SET_COUNTER_4
000005B6  163C 0000                181          MOVE.B      #0,D3
000005BA  183C 0004                182          MOVE.B      #4,D4    
000005BE                           183  Loop
000005BE  B803                     184          CMP.B       D3,D4
000005C0  6700 0018                185          BEQ         STORE_ONE_CHAR
000005C4  E38A                     186          LSL.L       #1,D2
000005C6  6400 0008                187          BCC         ADDZERO
000005CA                           188  
000005CA  5201                     189          ADDI.B      #1,D1
000005CC  6000 0006                190          BRA         INCREMENT_BIT_LOOP
000005D0                           191      
000005D0                           192  ADDZERO
000005D0  0601 0000                193          ADDI.B  #0,D1
000005D4                           194  
000005D4                           195  INCREMENT_BIT_LOOP
000005D4  5203                     196          ADDI.B  #1,D3
000005D6  E389                     197          LSL.L   #1,D1
000005D8  60E4                     198          BRA     Loop
000005DA                           199      
000005DA                           200  STORE_ONE_CHAR
000005DA  E289                     201          LSR.L   #1,D1
000005DC  B23C 0009                202          CMP.B   #$9,D1
000005E0  6D00 000A                203          BLT     HEX_TO_ASCII_NUMBER
000005E4                           204      
000005E4  0601 0037                205          ADDI.B  #$37,D1                 * HEX_TO_ASCII_LETTER
000005E8  6000 0006                206          BRA     INCREMENT_NEXT_HEX_LOOP
000005EC                           207      
000005EC                           208  HEX_TO_ASCII_NUMBER
000005EC  0601 0030                209          ADDI.B  #$30,D1
000005F0                           210  
000005F0                           211  INCREMENT_NEXT_HEX_LOOP
000005F0  5205                     212          ADDI.B  #1,D5
000005F2  103C 0006                213          MOVE.B  #6,D0
000005F6  4E4F                     214          TRAP    #15
000005F8  4281                     215          CLR.L   D1
000005FA  60B2                     216          BRA     CONVERT_HEX_ASCII
000005FC                           217  
000005FC                           218  
000005FC                           219  
000005FC                           220  ***********************END OF PRINTING HEX ADDRESS TO ASCII *******************
000005FC                           221  
000005FC                           222  
000005FC                           223  *-------------------------------------------------------------------------------------------
000005FC                           224  * PRINT NOP OR RTS -------------------------------------------------------------------------
000005FC                           225  
000005FC                           226  UNCHANGED_CONSTANT
000005FC  18FC 0020                227      MOVE.B  #' ',(A4)+
00000600  18FC 0020                228      MOVE.B  #' ',(A4)+
00000604  18FC 0020                229      MOVE.B  #' ',(A4)+
00000608  18FC 0020                230      MOVE.B  #' ',(A4)+
0000060C                           231      
0000060C  0C56 4E71                232      CMP.W   #$4E71,(A6)
00000610  6700 0014                233      BEQ     PRINT_NOP
00000614  0C56 4E75                234      CMP.W   #$4E75,(A6)
00000618  6700 002E                235      BEQ     PRINT_RTS
0000061C  0C56 FFFF                236      CMP.W   #$FFFF,(A6)
00000620  6700 0048                237      BEQ     PRINT_NO_CODE    
00000624  4E75                     238      RTS  
00000626                           239      
00000626                           240  PRINT_NOP
00000626  18FC 004E                241      MOVE.B  #'N',(A4)+
0000062A  18FC 004F                242      MOVE.B  #'O',(A4)+
0000062E  18FC 0050                243      MOVE.B  #'P',(A4)+
00000632  18FC 0000                244      MOVE.B  #$00,(A4)+
00000636                           245      *MOVEA.L  #$00000000,A1
00000636  43F9 00000AE0            246      LEA     OPCODE,A1
0000063C  103C 000D                247      MOVE.B  #13,D0
00000640  4E4F                     248      TRAP    #15
00000642  548E                     249      ADD.L   #$2,A6          ;increase by 2 bytes if it prints NOP
00000644  6000 FF1C                250      BRA     ADDR_LOOP
00000648                           251  PRINT_RTS
00000648  18FC 0052                252      MOVE.B  #'R',(A4)+
0000064C  18FC 0054                253      MOVE.B  #'T',(A4)+
00000650  18FC 0053                254      MOVE.B  #'S',(A4)+
00000654  18FC 0000                255      MOVE.B  #$00,(A4)+
00000658  43F9 00000AE0            256      LEA     OPCODE,A1
0000065E  103C 000D                257      MOVE.B  #13,D0
00000662  4E4F                     258      TRAP    #15
00000664  548E                     259      ADD.L   #$2,A6
00000666  6000 FEFA                260      BRA     ADDR_LOOP
0000066A                           261  PRINT_NO_CODE
0000066A  18FC 004E                262      MOVE.B  #'N',(A4)+
0000066E  18FC 004F                263      MOVE.B  #'O',(A4)+
00000672  18FC 0020                264      MOVE.B  #' ',(A4)+
00000676  18FC 0044                265      MOVE.B  #'D',(A4)+
0000067A  18FC 0041                266      MOVE.B  #'A',(A4)+
0000067E  18FC 0054                267      MOVE.B  #'T',(A4)+
00000682  18FC 0041                268      MOVE.B  #'A',(A4)+
00000686  18FC 0020                269      MOVE.B  #' ',(A4)+
0000068A  18FC 0024                270      MOVE.B  #'$',(A4)+
0000068E  143C 0000                271      MOVE.B  #0,D2                   ;Setting counter for print Must be word size
00000692  163C 0004                272      MOVE.B  #4,D3
00000696  4EB9 000006B2            273      JSR     PRINT_IMMIDIATE_DATA
0000069C  18FC 0000                274      MOVE.B  #$00,(A4)+
000006A0  43F9 00000AE0            275      LEA     OPCODE,A1
000006A6  103C 000D                276      MOVE.B  #13,D0
000006AA  4E4F                     277      TRAP    #15
000006AC  548E                     278      ADD.L   #$2,A6
000006AE  6000 FEB2                279      BRA     ADDR_LOOP
000006B2                           280     
000006B2                           281  
000006B2                           282  
000006B2                           283  *-------------------------------------------------------------------------------------------
000006B2                           284  * PRINT_IMMIDIATE_DATA---------------------------------------------------------------------
000006B2                           285  
000006B2                           286  PRINT_IMMIDIATE_DATA
000006B2  B63C 0002                287      CMP.B   #2,D3
000006B6  6700 0012                288      BEQ     BYTE_SIZE
000006BA  B63C 0004                289      CMP.B   #4,D3
000006BE  6700 0018                290      BEQ     WORD_SIZE
000006C2  B63C 0008                291      CMP.B   #8,D3
000006C6  6700 001E                292      BEQ     LONG_SIZE
000006CA                           293  
000006CA                           294  BYTE_SIZE
000006CA  1016                     295      MOVE.B  (A6),D0
000006CC  13FC 0001 00000AD2       296      MOVE.B  #1,SIZE
000006D4  6000 001E                297      BRA     LOOP_IMMIDIATE_DATA
000006D8                           298  WORD_SIZE
000006D8  3016                     299      MOVE.W  (A6),D0
000006DA  13FC 0003 00000AD2       300      MOVE.B  #3,SIZE
000006E2  6000 0010                301      BRA     LOOP_IMMIDIATE_DATA
000006E6                           302  LONG_SIZE
000006E6  2016                     303      MOVE.L  (A6),D0
000006E8  13FC 0003 00000AD2       304      MOVE.B  #3,SIZE
000006F0  6000 0002                305      BRA     LOOP_IMMIDIATE_DATA
000006F4                           306      
000006F4                           307  LOOP_IMMIDIATE_DATA    
000006F4  B602                     308      CMP.B   D2,D3               ;D3 WIIL BE 8 FOR BYTE, 16 FOR WORD, 32 FOR LONG
000006F6  6600 0008                309      BNE     CONTINUE_SHIFT
000006FA  4282                     310      CLR.L   D2
000006FC  4283                     311      CLR.L   D3       
000006FE  4E75                     312      RTS
00000700                           313      
00000700                           314  CONTINUE_SHIFT
00000700  4EB9 00000714            315      JSR     SHIFT_4_BIT         ;SHIFT 4 BIT TO SEE WHAT TYPE OF 
00000706                           316  
00000706                           317  ;HEX_D    
00000706                           318      ;CMP.B   #hexD,D1
00000706                           319      ;BEQ     PRINT_F
00000706                           320     
00000706                           321  
00000706                           322  ;HEX_E    
00000706                           323      ;CMP.B   #hexE,D1
00000706                           324      ;BEQ     PRINT_E
00000706                           325  
00000706                           326  HEX_F    
00000706  B23C 000F                327      CMP.B   #hexF,D1
0000070A  6700 00D0                328      BEQ     PRINT_F
0000070E                           329      
0000070E                           330  ADD_COUNTER
0000070E  5202                     331      ADDI.B  #1,D2
00000710  4281                     332      CLR.L   D1
00000712  60E0                     333      BRA     LOOP_IMMIDIATE_DATA
00000714                           334  
00000714                           335  *-------------------------------------------------------------------------------------------
00000714                           336  * SHIFT_4_BIT--------------------------------------------------------------------
00000714                           337  SHIFT_4_BIT
00000714  183C 0000                338          MOVE.B   #0,D4
00000718  1A3C 0004                339          MOVE.B   #4,D5              ;SHIFTS FROM 
0000071C                           340      
0000071C                           341  START_SHIFT_4_BIT   
0000071C  BA04                     342          CMP.B    D4,D5
0000071E  6600 0006                343          BNE      SHIFT_SIZE 
00000722  E289                     344          LSR.L    #1,D1
00000724  4E75                     345          RTS
00000726                           346  
00000726                           347  SHIFT_SIZE 
00000726  B63C 0002                348      CMP.B   #2,D3
0000072A  6700 0012                349      BEQ     SHIFT_SIZE_BYTE
0000072E  B63C 0004                350      CMP.B   #4,D3
00000732  6700 0014                351      BEQ     SHIFT_SIZE_WORD
00000736  B63C 0008                352      CMP.B   #8,D3
0000073A  6700 0016                353      BEQ     SHIFT_SIZE_LONG
0000073E                           354  
0000073E                           355  SHIFT_SIZE_BYTE
0000073E  E308                     356      LSL.B   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
00000740  6500 0020                357      BCS     ADDONE
00000744  6000 0012                358      BRA     ADD_ZERO
00000748                           359  SHIFT_SIZE_WORD
00000748  E348                     360      LSL.W   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
0000074A  6500 0016                361      BCS     ADDONE
0000074E  6000 0008                362      BRA     ADD_ZERO
00000752                           363  SHIFT_SIZE_LONG
00000752  E388                     364      LSL.L   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
00000754  6500 000C                365      BCS     ADDONE
00000758                           366  
00000758                           367  ADD_ZERO        
00000758  0601 0000                368      ADDI.B  #%0, D1                    * add 0 bit to d2
0000075C  E381                     369      ASL.L   #1, D1     
0000075E  6000 000A                370      BRA     COUNTER_SHIFT_4_BIT
00000762                           371           
00000762                           372  ADDONE        
00000762  5201                     373      ADDI.B  #%1, D1                    * add 1 bit to d2
00000764  E381                     374      ASL.L   #1, D1
00000766  6000 0002                375      BRA     COUNTER_SHIFT_4_BIT 
0000076A                           376  
0000076A                           377  COUNTER_SHIFT_4_BIT
0000076A  5284                     378      ADDI.L  #1,D4
0000076C  60AE                     379      BRA     START_SHIFT_4_BIT
0000076E                           380  
0000076E                           381  *-------------------------------------------------------------------------------------------
0000076E                           382  * PRINT_ASCCI_HEX---------------------------------------------------------------------
0000076E                           383  PRINT_0
0000076E  18FC 0030                384      MOVE.B  #'0',(A4)+
00000772  609A                     385      BRA     ADD_COUNTER
00000774                           386  
00000774                           387  PRINT_1
00000774  18FC 0031                388      MOVE.B  #'1',(A4)+
00000778  6094                     389      BRA     ADD_COUNTER
0000077A                           390  
0000077A                           391  PRINT_2
0000077A  18FC 0032                392      MOVE.B  #'2',(A4)+
0000077E  608E                     393      BRA     ADD_COUNTER
00000780                           394  
00000780                           395  PRINT_3
00000780  18FC 0033                396      MOVE.B  #'3',(A4)+
00000784  6088                     397      BRA     ADD_COUNTER
00000786                           398  
00000786                           399  PRINT_4
00000786  18FC 0034                400      MOVE.B  #'4',(A4)+
0000078A  6082                     401      BRA     ADD_COUNTER
0000078C                           402  
0000078C                           403  PRINT_5
0000078C  18FC 0035                404      MOVE.B  #'5',(A4)+
00000790  6000 FF7C                405      BRA     ADD_COUNTER
00000794                           406  
00000794                           407  PRINT_6
00000794  18FC 0036                408      MOVE.B  #'6',(A4)+
00000798  6000 FF74                409      BRA     ADD_COUNTER
0000079C                           410  
0000079C                           411  PRINT_7
0000079C  18FC 0037                412      MOVE.B  #'7',(A4)+
000007A0  6000 FF6C                413      BRA     ADD_COUNTER
000007A4                           414  
000007A4                           415  PRINT_8
000007A4  18FC 0038                416      MOVE.B  #'8',(A4)+
000007A8  6000 FF64                417      BRA     ADD_COUNTER
000007AC                           418  
000007AC                           419  PRINT_9
000007AC  18FC 0039                420      MOVE.B  #'9',(A4)+
000007B0  6000 FF5C                421      BRA     ADD_COUNTER
000007B4                           422  
000007B4                           423  PRINT_A
000007B4  18FC 0041                424      MOVE.B  #'A',(A4)+
000007B8  6000 FF54                425      BRA     ADD_COUNTER
000007BC                           426  
000007BC                           427  PRINT_B
000007BC  18FC 0042                428      MOVE.B  #'B',(A4)+
000007C0  6000 FF4C                429      BRA     ADD_COUNTER
000007C4                           430  
000007C4                           431  PRINT_C
000007C4  18FC 0043                432      MOVE.B  #'C',(A4)+
000007C8  6000 FF44                433      BRA     ADD_COUNTER
000007CC                           434  
000007CC                           435  PRINT_D
000007CC  18FC 0044                436      MOVE.B  #'D',(A4)+
000007D0  6000 FF3C                437      BRA     ADD_COUNTER
000007D4                           438  
000007D4                           439  PRINT_E
000007D4  18FC 0045                440      MOVE.B  #'E',(A4)+
000007D8  6000 FF34                441      BRA     ADD_COUNTER
000007DC                           442  
000007DC                           443  PRINT_F
000007DC  18FC 0046                444      MOVE.B  #'F',(A4)+
000007E0  6000 FF2C                445      BRA     ADD_COUNTER
000007E4                           446  
000007E4                           447  
000007E4                           448      
000007E4                           449  ********************************************************************************************
000007E4                           450  *------------------ KEY -  -----------------------------------------------------------------
000007E4                           451  * Desctiption:
000007E4                           452  * Expect:       DO, D1, A1 to be empty
000007E4                           453  * 
000007E4                           454  *------------------ Prompt User for Enter, R, or Q -----------------------------------------
000007E4                           455  GETKEY
000007E4  43F9 0000098E            456          LEA         PROMPTOPTIONS, A1            * Load the greeting message
000007EA  103C 000E                457          MOVE.B      #14,D0
000007EE  4E4F                     458          TRAP        #15 
000007F0  13FC 0000 00000ACE       459          MOVE.B      #$00, LINE_COUNT        * Reset Line Count
000007F8  103C 000C                460          MOVE.B      #12,D0                  * Use keyboard echo trap
000007FC  123C 0000                461          MOVE.B      #0,D1                   * Reset Keyboard input
00000800  4E4F                     462          TRAP        #15                 
00000802  103C 0005                463          MOVE.B      #5, D0                  * Log keyboard input
00000806  4E4F                     464          TRAP        #15                 
00000808  B23C 000D                465          CMP.B       #$D, D1                 * Compare the key press with ENTER
0000080C  6700 0028                466          BEQ         OPCODESETUP         
00000810  B23C 0072                467          CMP.B       #$72, D1                * Compare the key press with R
00000814  6700 0030                468          BEQ         RESTART             
00000818  B23C 0052                469          CMP.B       #$52, D1                * Compare the key press with r
0000081C  6700 0028                470          BEQ         RESTART             
00000820  B23C 0071                471          CMP.B       #$71, D1                * Compare the key press with q
00000824  6700 0068                472          BEQ         END_PROGRAM             
00000828  B23C 0051                473          CMP.B       #$51, D1                * Compare the key press with Q
0000082C  6700 0060                474          BEQ         END_PROGRAM            
00000830  B23C 005D                475          CMP.B       #$5D, D1                * Check the key press with ENTER
00000834  66AE                     476          BNE         GETKEY              
00000836                           477  OPCODESETUP
00000836  103C 000B                478          MOVE.B  #11, D0                     * Task 11 - Clear screen
0000083A  323C FF00                479          MOVE.W  #$FF00, D1          
0000083E  4E4F                     480          TRAP    #15                 
00000840  4281                     481          CLR.L   D1
00000842  4280                     482          CLR.L   D0
00000844  4E75                     483          RTS                 
00000846                           484  *------------------ RESTART ----------------------------------------------------------------
00000846                           485  RESTART
00000846  4EB8 0836                486          JSR         OPCODESETUP
0000084A  4EB9 00000860            487          JSR         CLEAR_REGISTERS
00000850  2E7C 01000000            488          MOVEA.L     #$01000000,A7       Reset stack pointer
00000856  2C7C 01000000            489          MOVEA.L     #$01000000,A6       Reset stack pointer
0000085C  6000 FBA2                490          BRA         START
00000860                           491          
00000860                           492  ********************************************************************************************
00000860                           493  *------------------ CLEAR REGISTERS --------------------------------------------------------
00000860                           494  * Desctiption:
00000860                           495  * 
00000860                           496  CLEAR_REGISTERS
00000860  4280                     497          CLR.L   D0
00000862  4285                     498          CLR.L   D5
00000864  4282                     499          CLR.L   D2
00000866  4281                     500          CLR.L   D1
00000868  4283                     501          CLR.L   D3
0000086A  4284                     502          CLR.L   D4
0000086C  4286                     503          CLR.L   D6
0000086E  227C 00000000            504          MOVE.L  #$00000000,A1
00000874  247C 00000000            505          MOVE.L  #$00000000,A2
0000087A  267C 00000000            506          MOVE.L  #$00000000,A3
00000880  287C 00000000            507          MOVE.L  #$00000000,A4
00000886  2A7C 00000000            508          MOVE.L  #$00000000,A5
0000088C  4E75                     509          RTS
0000088E                           510  
0000088E                           511  ********************************************************************************************
0000088E                           512  ********************************************************************************************
0000088E                           513  ********************************************************************************************
0000088E                           514  END_PROGRAM
0000088E  FFFF FFFF                515          SIMHALT             ; halt simulator
00000892                           516  ********************************************************************************************
00000892                           517  ********************************************************************************************
00000892                           518  ********************************************************************************************
00000892                           519  
00000892                           520  
00000892                           521  ********************************************************************************************
00000892                           522  * VARIABLES & MESSAGES ---------------------------------------------------------------------
00000892  =0000000D                523  CR        EQU       $0D
00000892  =0000000A                524  LF        EQU       $0A
00000892                           525  * Hex values -------------------------------------------------------------------------------  
00000892  =00000000                526  numzero     EQU     0  
00000892  =00000001                527  numone      EQU     1
00000892  =00000002                528  numtwo      EQU     2
00000892  =00000003                529  numthree    EQU     3
00000892  =00000004                530  numfour     EQU     4
00000892  =00000005                531  numfive     EQU     5
00000892  =00000006                532  numsix      EQU     6
00000892  =00000007                533  numseven    EQU     7
00000892  =00000008                534  numeight    EQU     8
00000892  =00000009                535  numnine     EQU     9
00000892  =0000000A                536  numA        EQU     10
00000892  =0000000B                537  numB        EQU     11
00000892  =0000000C                538  numC        EQU     12
00000892  =0000000D                539  numD        EQU     13
00000892  =0000000E                540  numE        EQU     $E
00000892  =0000000F                541  numF        EQU     15
00000892                           542  * Binary Hex Values ------------------------------------------------------------------------
00000892  =00000000                543  hex0        EQU     %0000   
00000892  =00000001                544  hex1        EQU     %0001   
00000892  =00000002                545  hex2        EQU     %0010   
00000892  =00000003                546  hex3        EQU     %0011   
00000892  =00000004                547  hex4        EQU     %0100   
00000892  =00000005                548  hex5        EQU     %0101   
00000892  =00000006                549  hex6        EQU     %0110   
00000892  =00000007                550  hex7        EQU     %0111   
00000892  =00000008                551  hex8        EQU     %1000   
00000892  =00000009                552  hex9        EQU     %1001   
00000892  =0000000A                553  hexA        EQU     %1010   
00000892  =0000000B                554  hexB        EQU     %1011   
00000892  =0000000C                555  hexC        EQU     %1100   
00000892  =0000000D                556  hexD        EQU     %1101   
00000892  =0000000E                557  hexE        EQU     %1110   
00000892  =0000000F                558  hexF        EQU     %1111   
00000892                           559  * OP Codes ---------------------------------------------------------------------------------
00000892  =00000000                560  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
00000892  =00000001                561  bin0001     EQU     %0001   ;MOVE.B
00000892  =00000002                562  bin0010     EQU     %0010   ;MOVE.L
00000892  =00000003                563  bin0011     EQU     %0011   ;MOVE.W
00000892  =00000004                564  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
00000892  =00000005                565  bin0101     EQU     %0101   ;SUBQ
00000892  =00000006                566  bin0110     EQU     %0110   ;Bcc
00000892  =00000007                567  bin0111     EQU     %0111   ;MOVEQ
00000892  =00000008                568  bin1000     EQU     %1000   ;DIVU.W
00000892  =00000009                569  bin1001     EQU     %1001   ;SUB, SUBA
00000892  =0000000B                570  bin1011     EQU     %1011   ;CMP, CMPA, EOR
00000892  =0000000C                571  bin1100     EQU     %1100   ;AND, MULS.W
00000892  =0000000D                572  bin1101     EQU     %1101   ;ADD, ADDA
00000892  =0000000E                573  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
00000892                           574  * MESSAGES ---------------------------------------------------------------------------------------------
00000892= 20 20 20 20 20 20 ...    575  GREETING        DC.B    '       HELLO THERE, WELCOME TO AWESOME DISASSEMBLER'
000008C5= 0D 0A 4E 6F 74 65 ...    576                  DC.B    CR,LF,'Note: Addressess must be in HEX'
000008E6= 0D 0A 4E 6F 74 65 ...    577                  DC.B    CR,LF,'Note: Addressess must be in caps'
00000908= 0D 0A 20 20 20 20 ...    578                  DC.B    CR,LF,'    : Starting Address must be greater than 70000',CR,LF,CR,LF,CR,LF,0 
00000942= 454E 5445 5220 4...      579  PROMPTSADDR     DC.W    'ENTER A STARTING ADDRESS (ON CAPS): ',0
00000968= 454E 5445 5220 4...      580  PROMPTEADDR     DC.W    'ENTER A ENDING ADDRESS   (ON CAPS): ',0
0000098E= 50 72 65 73 73 3A ...    581  PROMPTOPTIONS    DC.B    'Press: ENTER to Continue || Q or q to Quit || R OR r to Restart',CR,LF,CR,LF,0
000009D2                           582  * ERROR MSG --------------------------------------------------------------------------------------------
000009D2= 45 52 52 4F 52 3A ...    583  INVALIDSADDR        DC.B    'ERROR: INVALID STARTING ADDRESS VERSUS ENDING.',CR,LF,CR,LF,0
00000A05= 45 52 52 4F 52 3A ...    584  ERRORINPUTSIZE      DC.B    'ERROR: INVALID ADDRESS SIZE',CR,LF,CR,LF,0
00000A25= 45 52 52 4F 52 3A ...    585  INVALIDCHAR         DC.B    'ERROR: INVALID ADDRESS CHARACTER',CR,LF,CR,LF,0
00000A4A= 45 52 52 4F 52 3A ...    586  SGTEM               DC.B    'ERROR: STARTING ADDRESS > ENDING ADDRESS',CR,LF,CR,LF,0
00000A77= 45 52 52 4F 52 3A ...    587  ODD_ADD_MSG         DC.B    'ERROR: ODD ADDRESS',CR,LF,CR,LF,0
00000A8E= 45 52 52 4F 52 3A ...    588  STARTING_ADDR_7     DC.B    'ERROR: Invalid starting adress - must be greater than 7000',CR,LF,CR,LF,0
00000ACD                           589  * VARIABLES --------------------------------------------------------------------------------------------
00000ACE                           590  LINE_COUNT      DS.L    1
00000AD2                           591  SIZE            DS.B    1
00000AD4                           592  INPUT_HEX       DS.L    1   * Use to temp hold starting and ending address
00000AD8                           593  STARTING_ADD    DS.L    1   ;1 is the size, if I change to 4 then array size changes
00000ADC                           594  ENDING_ADD      DS.L    1
00000AE0= 00000001                 595  OPCODE          DC.L    1
00000AE4                           596          
00000AE4                           597          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDONE              762
ADDR_LOOP           562
ADDZERO             5D0
ADD_COUNTER         70E
ADD_ZERO            758
BADSIZES            462
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
BYTE_SIZE           6CA
CLEAR_REGISTERS     860
CONTINUE_ADDR_LOOP  580
CONTINUE_SHIFT      700
CONTINUE_STORE      520
CONVERT_HEX_ASCII   5AE
COUNTER_SHIFT_4_BIT  76A
CR                  D
DECODE_CONSTANT     592
ENDING_ADD          ADC
END_PROGRAM         88E
ERRORINPUTSIZE      A05
GETKEY              7E4
GREETING            892
HEX0                0
HEX1                1
HEX2                2
HEX3                3
HEX4                4
HEX5                5
HEX6                6
HEX7                7
HEX8                8
HEX9                9
HEXA                A
HEXB                B
HEXC                C
HEXD                D
HEXE                E
HEXF                F
HEX_F               706
HEX_TO_ASCII_NUMBER  5EC
INCREMENT_BIT_LOOP  5D4
INCREMENT_NEXT_HEX_LOOP  5F0
INPUT_HEX           AD4
INVALIDCHAR         A25
INVALIDSADDR        9D2
INVALID_CHARACTER   476
LETTERS             4AA
LF                  A
LINE_COUNT          ACE
LONG_SIZE           6E6
LOOP                5BE
LOOP_IMMIDIATE_DATA  6F4
NUMA                A
NUMB                B
NUMBER              4A2
NUMC                C
NUMD                D
NUME                E
NUMEIGHT            8
NUMF                F
NUMFIVE             5
NUMFOUR             4
NUMNINE             9
NUMONE              1
NUMSEVEN            7
NUMSIX              6
NUMTHREE            3
NUMTWO              2
NUMZERO             0
ODD_ADD_MSG         A77
ODD_TEST            4C0
ODD_TEST_FAIL       4D8
OPCODE              AE0
OPCODESETUP         836
PRINT_0             76E
PRINT_1             774
PRINT_2             77A
PRINT_3             780
PRINT_4             786
PRINT_5             78C
PRINT_6             794
PRINT_7             79C
PRINT_8             7A4
PRINT_9             7AC
PRINT_A             7B4
PRINT_B             7BC
PRINT_C             7C4
PRINT_CURRENT_ADD   5A4
PRINT_D             7CC
PRINT_E             7D4
PRINT_F             7DC
PRINT_IMMIDIATE_DATA  6B2
PRINT_NOP           626
PRINT_NO_CODE       66A
PRINT_RTS           648
PROMPTEADDR         968
PROMPTOPTIONS       98E
PROMPTSADDR         942
READHEX             48A
READ_EADDR          432
READ_SADDR          414
RESTART             846
SET_COUNTER_4       5B6
SGTE                54E
SGTEM               A4A
SHIFT_4_BIT         714
SHIFT_SIZE          726
SHIFT_SIZE_BYTE     73E
SHIFT_SIZE_LONG     752
SHIFT_SIZE_WORD     748
SIZE                AD2
START               400
STARTING_ADD        AD8
STARTING_ADDR_7     A8E
START_SHIFT_4_BIT   71C
STORE               4B2
STORE_ADDRESS       4F4
STORE_E             53C
STORE_ENDING        532
STORE_ONE_CHAR      5DA
UNCHANGED_CONSTANT  5FC
VALIDATE_STORE      44E
WORD_SIZE           6D8
