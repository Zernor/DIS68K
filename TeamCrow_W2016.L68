00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/4/2016 10:57:37 PM

00000000                             1  *------------------------------------------------------------------------------------------
00000000                             2  * Title:  68K Disassembler
00000000                             3  * Written by :  Hoa, Tenzin Khando, Marco F.
00000000                             4  * Date       :
00000000                             5  * Description:  Awesome 68k disassembler 
00000000                             6  *------------------------------------------------------------------------------------------
00000400                             7      ORG    $400
00000400                             8  START:  
00000400  43F9 000007F0              9          LEA         GREETING, A1            * Load the greeting message
00000406  103C 000E                 10          MOVE.B      #14,D0
0000040A  4E4F                      11          TRAP        #15 
0000040C                            12              
0000040C                            13  *-------------------------------------------------------------------------------------------
0000040C                            14  *------------------ STARTING ADDRESS -------------------------------------------------------
0000040C                            15  READ_SADDR
0000040C  4287                      16          CLR.L       D7
0000040E  43F9 000008A0             17          LEA         PROMPTSADDR, A1
00000414  103C 000E                 18          MOVE.B      #14, D0
00000418  4E4F                      19          TRAP        #15
0000041A  43F9 000009E8             20          LEA         INPUT_HEX,A1            * Temp hold starting address
00000420  103C 0002                 21          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
00000424  4E4F                      22          TRAP        #15
00000426  6000 001E                 23          BRA         VALIDATE_STORE 
0000042A                            24  *------------------ STARTING ADDRESS -------------------------------------------------------
0000042A                            25  READ_EADDR
0000042A  43F9 000008C6             26          LEA         PROMPTEADDR, A1
00000430  103C 000E                 27          MOVE.B      #14, D0
00000434  4E4F                      28          TRAP        #15
00000436  43F9 000009E8             29          LEA         INPUT_HEX,A1            * Temp hold ending address
0000043C  103C 0002                 30          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
00000440  4E4F                      31          TRAP        #15  
00000442  6000 0002                 32          BRA         VALIDATE_STORE 
00000446                            33  
00000446                            34  *-------------------------------------------------------------------------------------------
00000446                            35  *------------------ VALIDATE & STORE  ADDRESS ----------------------------------------------
00000446                            36  VALIDATE_STORE 
00000446                            37  
00000446                            38          * Check address size
00000446  0C01 0004                 39          CMPI.B      #4, D1                  
0000044A  6D00 000E                 40          BLT         BADSIZES 
0000044E  0C01 0008                 41          CMPI.B      #8, D1 
00000452  6E00 0006                 42          BGT         BADSIZES
00000456  6000 002A                 43          BRA         READHEX
0000045A                            44  BADSIZES
0000045A  43F9 0000091F             45          LEA         ERRORINPUTSIZE, A1      * Print Bad Size Error
00000460  103C 000E                 46          MOVE.B      #14,D0
00000464  4E4F                      47          TRAP        #15
00000466  B63C 0000                 48          CMP.B       #0,D3                   * D3 - HOLDS 0 if starting address has not being stored yet
0000046A  67A0                      49          BEQ         READ_SADDR
0000046C  60BC                      50          BRA         READ_EADDR 
0000046E                            51  INVALID_CHARACTER                           * Print Invalid Character for Address
0000046E  43F9 0000093F             52          LEA         INVALIDCHAR, A1
00000474  103C 000E                 53          MOVE.B      #14,D0 
00000478  4E4F                      54          TRAP        #15 
0000047A  B63C 0000                 55          CMP.B       #0,D3
0000047E  678C                      56          BEQ         READ_SADDR 
00000480  60A8                      57          BRA         READ_EADDR
00000482                            58  *------------------ Read ASCII & Convert + Store as Hex ----------------------------------
00000482                            59  READHEX       
00000482  0C11 0030                 60          CMPI.B      #$30,(A1)
00000486  6DE6                      61          BLT         INVALID_CHARACTER       * Wrong data
00000488  0C11 0040                 62          CMPI.B      #$40,(A1)
0000048C  6D00 000C                 63          BLT         NUMBER                  * Is number
00000490  0C11 0047                 64          CMPI.B      #$47,(A1)
00000494  6D00 000C                 65          BLT         LETTERS                 * Is Letter
00000498  60D4                      66          BRA         INVALID_CHARACTER
0000049A                            67  NUMBER      
0000049A  0411 0030                 68          SUBI.B      #$30,(A1)               * Convert Numbers to Hex
0000049E  6000 000A                 69          BRA         STORE   
000004A2                            70  LETTERS     
000004A2  0411 0037                 71          SUBI.B      #$37,(A1)               * Convert Numbers to Hex
000004A6  6000 0002                 72          BRA         STORE
000004AA                            73  STORE       
000004AA  DE19                      74          ADD.B       (A1)+,D7                * Save data from A1 to D7
000004AC  0C11 0000                 75          CMPI.B      #0,(A1)                 * NO MORE TO READ SO CHECK IF ADDRESS IS ODD
000004B0  6700 0006                 76          BEQ         ODD_TEST     
000004B4  E98F                      77          LSL.L       #4,D7                   * Keep reading next character
000004B6  60CA                      78          BRA         READHEX
000004B8                            79  
000004B8                            80  * Before storing address - check if odd --------------------------------------------------------
000004B8                            81  ODD_TEST                                    * Check if address is odd
000004B8  7202                      82          MOVE.L      #$00000002,D1           * Put 2 in D1 so we can use it to divide input by 2
000004BA  2C07                      83          MOVE.L      D7,D6
000004BC  8CC1                      84          DIVU        D1,D6                   * Divide the input address by 2
000004BE  4846                      85          SWAP        D6                      * Store the remainder in D2
000004C0  BC3C 0001                 86          CMP.B       #1,D6                   * Is the remainder ==1
000004C4  6700 000A                 87          BEQ         ODD_TEST_FAIL           * Remainder is 1 so input fails odd test 
000004C8  B63C 0000                 88          CMP.B       #0,D3
000004CC                            89              
000004CC  6000 001E                 90          BRA         STORE_ADDRESS                           
000004D0                            91  ODD_TEST_FAIL   
000004D0  43F9 00000991             92          LEA         ODD_ADD_MSG,A1          * Load ODD_ADD_MSG to A1
000004D6  103C 000E                 93          MOVE.B      #14,D0                  * Print odd address error message
000004DA  4E4F                      94          TRAP        #15                     
000004DC  4286                      95          CLR.L       D6
000004DE  4287                      96          CLR.L       D7      
000004E0  B63C 0000                 97          CMP.B       #0,D3
000004E4  6700 FF26                 98          BEQ         READ_SADDR
000004E8  6000 FF40                 99          BRA         READ_EADDR 
000004EC                           100  
000004EC                           101  * STORE ADDRESSESSS INTO MEMORY ----------------------------------------------------------------              
000004EC                           102  STORE_ADDRESS
000004EC  4286                     103          CLR.L       D6
000004EE  B63C 0000                104          CMP.B       #0,D3
000004F2  6600 0036                105          BNE         STORE_ENDING
000004F6                           106          
000004F6  BEBC 00007000            107          CMP.L       #$00007000, D7
000004FC  6E00 001A                108          BGT         CONTINUE_STORE
00000500  6700 0016                109          BEQ         CONTINUE_STORE
00000504                           110      
00000504  4286                     111          CLR.L       D6
00000506  4287                     112          CLR.L       D7
00000508  43F9 000009A8            113          LEA         STARTING_ADDR_7, A1         * Load ODD_ADD_MSG to A1
0000050E  103C 000E                114          MOVE.B      #14,D0                  * Print odd address error message
00000512  4E4F                     115          TRAP        #15  
00000514  6000 FEF6                116          BRA         READ_SADDR
00000518                           117          
00000518                           118  CONTINUE_STORE        
00000518  23C7 000009EC            119          MOVE.L      D7, STARTING_ADD        * Save in the memory address 
0000051E  2C47                     120          MOVEA.L     D7, A6                  * Save starting at A6
00000520  163C 0001                121          MOVE.B      #1, D3                  * Counter - for VALID_STORE
00000524  4287                     122          CLR.L       D7
00000526  6000 FF02                123          BRA         READ_EADDR    
0000052A                           124  STORE_ENDING 
0000052A  BEB9 000009EC            125          CMP.L       (STARTING_ADD), D7
00000530  6D00 000E                126          BLT         SGTE
00000534                           127          *BEQ         SGTE
00000534                           128          *JSR         ODD_TEST
00000534                           129  STORE_E             
00000534  23C7 000009F0            130          MOVE.L      D7, ENDING_ADD  
0000053A                           131          *MOVE.L      D7, A7                  * Save starting at A7
0000053A  4287                     132          CLR.L       D7
0000053C  6000 0016                133          BRA         ADDR_LOOP
00000540                           134  SGTE                                        * Starting greater then ending
00000540  43F9 000008EC            135          LEA         INVALIDSADDR, A1
00000546  103C 000E                136          MOVE.B      #14, D0
0000054A  4E4F                     137          TRAP        #15
0000054C  4287                     138          CLR.L       D7
0000054E  4283                     139          CLR.L       D3
00000550  6000 FEBA                140          BRA         READ_SADDR
00000554                           141          
00000554                           142  *-------------------------------------------------------------------------------------------
00000554                           143  *------------------ Compare Current Address to Ending Adddres ------------------------------ 
00000554                           144  ADDR_LOOP
00000554  2A79 000009F0            145          MOVE.L      ENDING_ADD,A5           
0000055A  BDCD                     146          CMP.L       A5,A6
0000055C  6E00 015C                147          BGT         END_PROGRAM
00000560  4EB9 000005D6            148          JSR         CLEAR_REGISTERS
00000566  4EB9 0000057E            149          JSR         PRINT_CURRENT_ADD           * PRINT CURRENT ADDRESS
0000056C                           150          
0000056C                           151  *-------------------------------------------------------------------------------------------  
0000056C                           152  *------------------ NOP & RTS ADDRESS ------------------------------------------------------
0000056C                           153  Decode_Constant                             * Check for NOP & RTS
0000056C  4EB9 000005D6            154          JSR     CLEAR_REGISTERS
00000572  49F9 000009F4            155          LEA     OPCODE, A4                  * Load opcode to A4
00000578  4EB9 00000604            156          JSR     UNCHANGED_CONSTANT          * NOP & RTS
0000057E                           157  
0000057E                           158  ****************************PRINTING HEX ADDRESS TO ASCII *******************
0000057E                           159  
0000057E                           160  PRINT_CURRENT_ADD
0000057E  240E                     161      MOVE.L  A6,D2
00000580                           162      ;LEA     CURRENT_ADDRESS,A7
00000580  1A3C 0000                163      MOVE.B  #0,D5
00000584  1C3C 0008                164      MOVE.B  #8,D6
00000588                           165  
00000588                           166  CONVERT_HEX_ASCII
00000588  BC05                     167      CMP.B   D5,D6
0000058A  6600 0004                168      BNE     SET_COUNTER_4
0000058E  4E75                     169      RTS
00000590                           170  
00000590                           171  SET_COUNTER_4
00000590  163C 0000                172      MOVE.B  #0,D3
00000594  183C 0004                173      MOVE.B  #4,D4    
00000598                           174  Loop
00000598  B803                     175      CMP.B   D3,D4
0000059A  6700 0018                176      BEQ     STORE_ONE_CHAR
0000059E  E38A                     177      LSL.L   #1,D2
000005A0  6400 0008                178      BCC     ADDZERO
000005A4                           179  
000005A4  5201                     180      ADDI.B  #1,D1
000005A6  6000 0006                181      BRA     INCREMENT_BIT_LOOP
000005AA                           182      
000005AA                           183  ADDZERO
000005AA  0601 0000                184      ADDI.B  #0,D1
000005AE                           185  
000005AE                           186  INCREMENT_BIT_LOOP
000005AE  5203                     187      ADDI.B  #1,D3
000005B0  E389                     188      LSL.L   #1,D1
000005B2  60E4                     189      BRA     Loop
000005B4                           190      
000005B4                           191  STORE_ONE_CHAR
000005B4  E289                     192      LSR.L   #1,D1
000005B6  B23C 0009                193      CMP.B   #$9,D1
000005BA  6D00 000A                194      BLT     HEX_TO_ASCII_NUMBER
000005BE                           195      
000005BE  0601 0037                196      ADDI.B  #$37,D1     ;HEX_TO_ASCII_LETTER
000005C2  6000 0006                197      BRA     INCREMENT_NEXT_HEX_LOOP
000005C6                           198      
000005C6                           199  HEX_TO_ASCII_NUMBER
000005C6  0601 0030                200      ADDI.B  #$30,D1
000005CA                           201  
000005CA                           202      ;MOVE.B  D7,(A7)+
000005CA                           203  INCREMENT_NEXT_HEX_LOOP
000005CA  5205                     204      ADDI.B  #1,D5
000005CC  103C 0006                205      MOVE.B  #6,D0
000005D0  4E4F                     206      TRAP    #15
000005D2  4281                     207      CLR.L   D1
000005D4  60B2                     208      BRA     CONVERT_HEX_ASCII
000005D6                           209  
000005D6                           210  CLEAR_REGISTERS
000005D6  4280                     211      CLR.L   D0
000005D8  4285                     212      CLR.L   D5
000005DA  4282                     213      CLR.L   D2
000005DC  4281                     214      CLR.L   D1
000005DE  4283                     215      CLR.L   D3
000005E0  4284                     216      CLR.L   D4
000005E2  4286                     217      CLR.L   D6
000005E4  227C 00000000            218      MOVE.L  #$00000000,A1
000005EA  247C 00000000            219      MOVE.L  #$00000000,A2
000005F0  267C 00000000            220      MOVE.L  #$00000000,A3
000005F6  287C 00000000            221      MOVE.L  #$00000000,A4
000005FC  2A7C 00000000            222      MOVE.L  #$00000000,A5
00000602  4E75                     223      RTS
00000604                           224  
00000604                           225  ***********************END OF PRINTING HEX ADDRESS TO ASCII *******************
00000604                           226  
00000604                           227  
00000604                           228  *-------------------------------------------------------------------------------------------
00000604                           229  * PRINT NOP OR RTS -------------------------------------------------------------------------
00000604                           230  
00000604                           231  UNCHANGED_CONSTANT
00000604  18FC 0020                232      MOVE.B  #' ',(A4)+
00000608  18FC 0020                233      MOVE.B  #' ',(A4)+
0000060C  18FC 0020                234      MOVE.B  #' ',(A4)+
00000610  18FC 0020                235      MOVE.B  #' ',(A4)+
00000614                           236      
00000614  0C56 4E71                237      CMP.W   #$4E71,(A6)
00000618  6700 0014                238      BEQ     PRINT_NOP
0000061C  0C56 4E75                239      CMP.W   #$4E75,(A6)
00000620  6700 002E                240      BEQ     PRINT_RTS
00000624  0C56 FFFF                241      CMP.W   #$FFFF,(A6)
00000628  6700 0048                242      BEQ     PRINT_NO_CODE    
0000062C  4E75                     243      RTS  
0000062E                           244      
0000062E                           245  PRINT_NOP
0000062E  18FC 004E                246      MOVE.B  #'N',(A4)+
00000632  18FC 004F                247      MOVE.B  #'O',(A4)+
00000636  18FC 0050                248      MOVE.B  #'P',(A4)+
0000063A  18FC 0000                249      MOVE.B  #$00,(A4)+
0000063E                           250      *MOVEA.L  #$00000000,A1
0000063E  43F9 000009F4            251      LEA     OPCODE,A1
00000644  103C 000D                252      MOVE.B  #13,D0
00000648  4E4F                     253      TRAP    #15
0000064A  548E                     254      ADD.L   #$2,A6          ;increase by 2 bytes if it prints NOP
0000064C  6000 FF06                255      BRA     ADDR_LOOP
00000650                           256  PRINT_RTS
00000650  18FC 0052                257      MOVE.B  #'R',(A4)+
00000654  18FC 0054                258      MOVE.B  #'T',(A4)+
00000658  18FC 0053                259      MOVE.B  #'S',(A4)+
0000065C  18FC 0000                260      MOVE.B  #$00,(A4)+
00000660  43F9 000009F4            261      LEA     OPCODE,A1
00000666  103C 000D                262      MOVE.B  #13,D0
0000066A  4E4F                     263      TRAP    #15
0000066C  548E                     264      ADD.L   #$2,A6
0000066E  6000 FEE4                265      BRA     ADDR_LOOP
00000672                           266  PRINT_NO_CODE
00000672  18FC 004E                267      MOVE.B  #'N',(A4)+
00000676  18FC 004F                268      MOVE.B  #'O',(A4)+
0000067A  18FC 0020                269      MOVE.B  #' ',(A4)+
0000067E  18FC 0044                270      MOVE.B  #'D',(A4)+
00000682  18FC 0041                271      MOVE.B  #'A',(A4)+
00000686  18FC 0054                272      MOVE.B  #'T',(A4)+
0000068A  18FC 0041                273      MOVE.B  #'A',(A4)+
0000068E  18FC 0020                274      MOVE.B  #' ',(A4)+
00000692  18FC 0024                275      MOVE.B  #'$',(A4)+
00000696  143C 0000                276      MOVE.B  #0,D2                   ;Setting counter for print Must be word size
0000069A  163C 0004                277      MOVE.B  #4,D3
0000069E  4EB9 000006BE            278      JSR     PRINT_IMMIDIATE_DATA
000006A4  18FC 0000                279      MOVE.B  #$00,(A4)+
000006A8  43F9 000009F4            280      LEA     OPCODE,A1
000006AE  103C 000D                281      MOVE.B  #13,D0
000006B2  4E4F                     282      TRAP    #15
000006B4  548E                     283      ADD.L   #$2,A6
000006B6  6000 FE9C                284      BRA     ADDR_LOOP
000006BA                           285     
000006BA                           286  END_PROGRAM
000006BA  FFFF FFFF                287          SIMHALT             ; halt simulator
000006BE                           288  
000006BE                           289  *-------------------------------------------------------------------------------------------
000006BE                           290  * PRINT_IMMIDIATE_DATA---------------------------------------------------------------------
000006BE                           291  
000006BE                           292  PRINT_IMMIDIATE_DATA
000006BE  B63C 0002                293      CMP.B   #2,D3
000006C2  6700 0012                294      BEQ     BYTE_SIZE
000006C6  B63C 0004                295      CMP.B   #4,D3
000006CA  6700 0018                296      BEQ     WORD_SIZE
000006CE  B63C 0008                297      CMP.B   #8,D3
000006D2  6700 001E                298      BEQ     LONG_SIZE
000006D6                           299  
000006D6                           300  BYTE_SIZE
000006D6  1016                     301      MOVE.B  (A6),D0
000006D8  13FC 0001 000009E7       302      MOVE.B  #1,SIZE
000006E0  6000 001E                303      BRA     LOOP_IMMIDIATE_DATA
000006E4                           304  WORD_SIZE
000006E4  3016                     305      MOVE.W  (A6),D0
000006E6  13FC 0003 000009E7       306      MOVE.B  #3,SIZE
000006EE  6000 0010                307      BRA     LOOP_IMMIDIATE_DATA
000006F2                           308  LONG_SIZE
000006F2  2016                     309      MOVE.L  (A6),D0
000006F4  13FC 0003 000009E7       310      MOVE.B  #3,SIZE
000006FC  6000 0002                311      BRA     LOOP_IMMIDIATE_DATA
00000700                           312      
00000700                           313  LOOP_IMMIDIATE_DATA    
00000700  B602                     314      CMP.B   D2,D3               ;D3 WIIL BE 8 FOR BYTE, 16 FOR WORD, 32 FOR LONG
00000702  6600 0008                315      BNE     CONTINUE_SHIFT
00000706  4282                     316      CLR.L   D2
00000708  4283                     317      CLR.L   D3       
0000070A  4E75                     318      RTS
0000070C                           319      
0000070C                           320  CONTINUE_SHIFT
0000070C  4EB9 00000720            321      JSR     SHIFT_4_BIT         ;SHIFT 4 BIT TO SEE WHAT TYPE OF 
00000712                           322  
00000712                           323  ;HEX_D    
00000712                           324      ;CMP.B   #hexD,D1
00000712                           325      ;BEQ     PRINT_F
00000712                           326     
00000712                           327  
00000712                           328  ;HEX_E    
00000712                           329      ;CMP.B   #hexE,D1
00000712                           330      ;BEQ     PRINT_E
00000712                           331  
00000712                           332  HEX_F    
00000712  B23C 000F                333      CMP.B   #hexF,D1
00000716  6700 00D0                334      BEQ     PRINT_F
0000071A                           335      
0000071A                           336  ADD_COUNTER
0000071A  5202                     337      ADDI.B  #1,D2
0000071C  4281                     338      CLR.L   D1
0000071E  60E0                     339      BRA     LOOP_IMMIDIATE_DATA
00000720                           340  
00000720                           341  *-------------------------------------------------------------------------------------------
00000720                           342  * SHIFT_4_BIT--------------------------------------------------------------------
00000720                           343  
00000720                           344  SHIFT_4_BIT
00000720  183C 0000                345      MOVE.B   #0,D4
00000724  1A3C 0004                346      MOVE.B   #4,D5              ;SHIFTS FROM 
00000728                           347      
00000728                           348  START_SHIFT_4_BIT   
00000728  BA04                     349      CMP.B    D4,D5
0000072A  6600 0006                350      BNE      SHIFT_SIZE 
0000072E  E289                     351      LSR.L    #1,D1
00000730  4E75                     352      RTS
00000732                           353  
00000732                           354  SHIFT_SIZE 
00000732  B63C 0002                355      CMP.B   #2,D3
00000736  6700 0012                356      BEQ     SHIFT_SIZE_BYTE
0000073A  B63C 0004                357      CMP.B   #4,D3
0000073E  6700 0014                358      BEQ     SHIFT_SIZE_WORD
00000742  B63C 0008                359      CMP.B   #8,D3
00000746  6700 0016                360      BEQ     SHIFT_SIZE_LONG
0000074A                           361  
0000074A                           362  SHIFT_SIZE_BYTE
0000074A  E308                     363      LSL.B   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
0000074C  6500 0020                364      BCS     ADDONE
00000750  6000 0012                365      BRA     ADD_ZERO
00000754                           366  SHIFT_SIZE_WORD
00000754  E348                     367      LSL.W   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
00000756  6500 0016                368      BCS     ADDONE
0000075A  6000 0008                369      BRA     ADD_ZERO
0000075E                           370  SHIFT_SIZE_LONG
0000075E  E388                     371      LSL.L   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
00000760  6500 000C                372      BCS     ADDONE
00000764                           373  
00000764                           374  ADD_ZERO        
00000764  0601 0000                375      ADDI.B  #%0, D1                    * add 0 bit to d2
00000768  E381                     376      ASL.L   #1, D1     
0000076A  6000 000A                377      BRA     COUNTER_SHIFT_4_BIT
0000076E                           378           
0000076E                           379  ADDONE        
0000076E  5201                     380      ADDI.B  #%1, D1                    * add 1 bit to d2
00000770  E381                     381      ASL.L   #1, D1
00000772  6000 0002                382      BRA     COUNTER_SHIFT_4_BIT 
00000776                           383  
00000776                           384  COUNTER_SHIFT_4_BIT
00000776  5284                     385      ADDI.L  #1,D4
00000778  60AE                     386      BRA     START_SHIFT_4_BIT
0000077A                           387  
0000077A                           388      
0000077A                           389  
0000077A                           390  
0000077A                           391  *-------------------------------------------------------------------------------------------
0000077A                           392  * SHIFT_4_BIT--------------------------------------------------------------------
0000077A                           393  
0000077A                           394  
0000077A                           395  *-------------------------------------------------------------------------------------------
0000077A                           396  * PRINT_ASCCI_HEX---------------------------------------------------------------------
0000077A                           397  PRINT_0
0000077A  18FC 0030                398      MOVE.B  #'0',(A4)+
0000077E  609A                     399      BRA     ADD_COUNTER
00000780                           400  
00000780                           401  PRINT_1
00000780  18FC 0031                402      MOVE.B  #'1',(A4)+
00000784  6094                     403      BRA     ADD_COUNTER
00000786                           404  
00000786                           405  PRINT_2
00000786  18FC 0032                406      MOVE.B  #'2',(A4)+
0000078A  608E                     407      BRA     ADD_COUNTER
0000078C                           408  
0000078C                           409  PRINT_3
0000078C  18FC 0033                410      MOVE.B  #'3',(A4)+
00000790  6088                     411      BRA     ADD_COUNTER
00000792                           412  
00000792                           413  PRINT_4
00000792  18FC 0034                414      MOVE.B  #'4',(A4)+
00000796  6082                     415      BRA     ADD_COUNTER
00000798                           416  
00000798                           417  PRINT_5
00000798  18FC 0035                418      MOVE.B  #'5',(A4)+
0000079C  6000 FF7C                419      BRA     ADD_COUNTER
000007A0                           420  
000007A0                           421  PRINT_6
000007A0  18FC 0036                422      MOVE.B  #'6',(A4)+
000007A4  6000 FF74                423      BRA     ADD_COUNTER
000007A8                           424  
000007A8                           425  PRINT_7
000007A8  18FC 0037                426      MOVE.B  #'7',(A4)+
000007AC  6000 FF6C                427      BRA     ADD_COUNTER
000007B0                           428  
000007B0                           429  PRINT_8
000007B0  18FC 0038                430      MOVE.B  #'8',(A4)+
000007B4  6000 FF64                431      BRA     ADD_COUNTER
000007B8                           432  
000007B8                           433  PRINT_9
000007B8  18FC 0039                434      MOVE.B  #'9',(A4)+
000007BC  6000 FF5C                435      BRA     ADD_COUNTER
000007C0                           436  
000007C0                           437  PRINT_A
000007C0  18FC 0041                438      MOVE.B  #'A',(A4)+
000007C4  6000 FF54                439      BRA     ADD_COUNTER
000007C8                           440  
000007C8                           441  PRINT_B
000007C8  18FC 0042                442      MOVE.B  #'B',(A4)+
000007CC  6000 FF4C                443      BRA     ADD_COUNTER
000007D0                           444  
000007D0                           445  PRINT_C
000007D0  18FC 0043                446      MOVE.B  #'C',(A4)+
000007D4  6000 FF44                447      BRA     ADD_COUNTER
000007D8                           448  
000007D8                           449  PRINT_D
000007D8  18FC 0044                450      MOVE.B  #'D',(A4)+
000007DC  6000 FF3C                451      BRA     ADD_COUNTER
000007E0                           452  
000007E0                           453  PRINT_E
000007E0  18FC 0045                454      MOVE.B  #'E',(A4)+
000007E4  6000 FF34                455      BRA     ADD_COUNTER
000007E8                           456  
000007E8                           457  PRINT_F
000007E8  18FC 0046                458      MOVE.B  #'F',(A4)+
000007EC  6000 FF2C                459      BRA     ADD_COUNTER
000007F0                           460  
000007F0                           461  *-------------------------------------------------------------------------------------------
000007F0                           462  * VARIABLES & MESSAGES ---------------------------------------------------------------------
000007F0  =0000000D                463  CR        EQU       $0D
000007F0  =0000000A                464  LF        EQU       $0A
000007F0                           465  
000007F0                           466  *-------------------------------------------------------------------------------------------
000007F0                           467  * Hex values -------------------------------------------------------------------------------  
000007F0  =00000000                468  numzero     EQU     0  
000007F0  =00000001                469  numone      EQU     1
000007F0  =00000002                470  numtwo      EQU     2
000007F0  =00000003                471  numthree    EQU     3
000007F0  =00000004                472  numfour     EQU     4
000007F0  =00000005                473  numfive     EQU     5
000007F0  =00000006                474  numsix      EQU     6
000007F0  =00000007                475  numseven    EQU     7
000007F0  =00000008                476  numeight    EQU     8
000007F0  =00000009                477  numnine     EQU     9
000007F0  =0000000A                478  numA        EQU     10
000007F0  =0000000B                479  numB        EQU     11
000007F0  =0000000C                480  numC        EQU     12
000007F0  =0000000D                481  numD        EQU     13
000007F0  =0000000E                482  numE        EQU     $E
000007F0  =0000000F                483  numF        EQU     15
000007F0                           484  *-------------------------------------------------------------------------------------------
000007F0                           485  * Binary Hex Values ------------------------------------------------------------------------
000007F0  =00000000                486  hex0        EQU     %0000   
000007F0  =00000001                487  hex1        EQU     %0001   
000007F0  =00000002                488  hex2        EQU     %0010   
000007F0  =00000003                489  hex3        EQU     %0011   
000007F0  =00000004                490  hex4        EQU     %0100   
000007F0  =00000005                491  hex5        EQU     %0101   
000007F0  =00000006                492  hex6        EQU     %0110   
000007F0  =00000007                493  hex7        EQU     %0111   
000007F0  =00000008                494  hex8        EQU     %1000   
000007F0  =00000009                495  hex9        EQU     %1001   
000007F0  =0000000A                496  hexA        EQU     %1010   
000007F0  =0000000B                497  hexB        EQU     %1011   
000007F0  =0000000C                498  hexC        EQU     %1100   
000007F0  =0000000D                499  hexD        EQU     %1101   
000007F0  =0000000E                500  hexE        EQU     %1110   
000007F0  =0000000F                501  hexF        EQU     %1111   
000007F0                           502  *-------------------------------------------------------------------------------------------
000007F0                           503  * OP Codes ---------------------------------------------------------------------------------
000007F0  =00000000                504  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
000007F0  =00000001                505  bin0001     EQU     %0001   ;MOVE.B
000007F0  =00000002                506  bin0010     EQU     %0010   ;MOVE.L
000007F0  =00000003                507  bin0011     EQU     %0011   ;MOVE.W
000007F0  =00000004                508  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
000007F0  =00000005                509  bin0101     EQU     %0101   ;SUBQ
000007F0  =00000006                510  bin0110     EQU     %0110   ;Bcc
000007F0  =00000007                511  bin0111     EQU     %0111   ;MOVEQ
000007F0  =00000008                512  bin1000     EQU     %1000   ;DIVU.W
000007F0  =00000009                513  bin1001     EQU     %1001   ;SUB, SUBA
000007F0  =0000000B                514  bin1011     EQU     %1011   ;CMP, CMPA, EOR
000007F0  =0000000C                515  bin1100     EQU     %1100   ;AND, MULS.W
000007F0  =0000000D                516  bin1101     EQU     %1101   ;ADD, ADDA
000007F0  =0000000E                517  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
000007F0                           518  
000007F0= 20 20 20 20 20 20 ...    519  GREETING        DC.B    '       HELLO THERE, WELCOME TO AWESOME DISASSEMBLER'
00000823= 0D 0A 4E 6F 74 65 ...    520                  DC.B    CR,LF,'Note: Addressess must be in HEX'
00000844= 0D 0A 4E 6F 74 65 ...    521                  DC.B    CR,LF,'Note: Addressess must be in caps'
00000866= 0D 0A 20 20 20 20 ...    522                  DC.B    CR,LF,'    : Starting Address must be greater than 70000',CR,LF,CR,LF,CR,LF,0 
000008A0= 454E 5445 5220 4...      523  PROMPTSADDR     DC.W    'ENTER A STARTING ADDRESS (ON CAPS): ',0
000008C6= 454E 5445 5220 4...      524  PROMPTEADDR     DC.W    'ENTER A ENDING ADDRESS   (ON CAPS): ',0
000008EC                           525  
000008EC                           526  *ERROR MSG-------------------------------------------------------------------------------------------
000008EC= 45 52 52 4F 52 3A ...    527  INVALIDSADDR        DC.B    'ERROR: INVALID STARTING ADDRESS VERSUS ENDING.',CR,LF,CR,LF,0
0000091F= 45 52 52 4F 52 3A ...    528  ERRORINPUTSIZE      DC.B    'ERROR: INVALID ADDRESS SIZE',CR,LF,CR,LF,0
0000093F= 45 52 52 4F 52 3A ...    529  INVALIDCHAR         DC.B    'ERROR: INVALID ADDRESS CHARACTER',CR,LF,CR,LF,0
00000964= 45 52 52 4F 52 3A ...    530  SGTEM               DC.B    'ERROR: STARTING ADDRESS > ENDING ADDRESS',CR,LF,CR,LF,0
00000991= 45 52 52 4F 52 3A ...    531  ODD_ADD_MSG         DC.B    'ERROR: ODD ADDRESS',CR,LF,CR,LF,0
000009A8= 45 52 52 4F 52 3A ...    532  STARTING_ADDR_7     DC.B    'ERROR: Invalid starting adress - must be greater than 7000',CR,LF,CR,LF,0
000009E7                           533  
000009E7                           534  *-------------------------------------------------------------------------------------------
000009E7                           535  * VARIABLES --------------------------------------------------------------------------------
000009E7                           536  SIZE            DS.B    1
000009E8                           537  INPUT_HEX       DS.L    1   * Use to temp hold starting and ending address
000009EC                           538  STARTING_ADD    DS.L    1   ;1 is the size, if I change to 4 then array size changes
000009F0                           539  ENDING_ADD      DS.L    1
000009F4= 00000001                 540  OPCODE          DC.L    1
000009F8                           541  
000009F8                           542   END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDONE              76E
ADDR_LOOP           554
ADDZERO             5AA
ADD_COUNTER         71A
ADD_ZERO            764
BADSIZES            45A
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
BYTE_SIZE           6D6
CLEAR_REGISTERS     5D6
CONTINUE_SHIFT      70C
CONTINUE_STORE      518
CONVERT_HEX_ASCII   588
COUNTER_SHIFT_4_BIT  776
CR                  D
DECODE_CONSTANT     56C
ENDING_ADD          9F0
END_PROGRAM         6BA
ERRORINPUTSIZE      91F
GREETING            7F0
HEX0                0
HEX1                1
HEX2                2
HEX3                3
HEX4                4
HEX5                5
HEX6                6
HEX7                7
HEX8                8
HEX9                9
HEXA                A
HEXB                B
HEXC                C
HEXD                D
HEXE                E
HEXF                F
HEX_F               712
HEX_TO_ASCII_NUMBER  5C6
INCREMENT_BIT_LOOP  5AE
INCREMENT_NEXT_HEX_LOOP  5CA
INPUT_HEX           9E8
INVALIDCHAR         93F
INVALIDSADDR        8EC
INVALID_CHARACTER   46E
LETTERS             4A2
LF                  A
LONG_SIZE           6F2
LOOP                598
LOOP_IMMIDIATE_DATA  700
NUMA                A
NUMB                B
NUMBER              49A
NUMC                C
NUMD                D
NUME                E
NUMEIGHT            8
NUMF                F
NUMFIVE             5
NUMFOUR             4
NUMNINE             9
NUMONE              1
NUMSEVEN            7
NUMSIX              6
NUMTHREE            3
NUMTWO              2
NUMZERO             0
ODD_ADD_MSG         991
ODD_TEST            4B8
ODD_TEST_FAIL       4D0
OPCODE              9F4
PRINT_0             77A
PRINT_1             780
PRINT_2             786
PRINT_3             78C
PRINT_4             792
PRINT_5             798
PRINT_6             7A0
PRINT_7             7A8
PRINT_8             7B0
PRINT_9             7B8
PRINT_A             7C0
PRINT_B             7C8
PRINT_C             7D0
PRINT_CURRENT_ADD   57E
PRINT_D             7D8
PRINT_E             7E0
PRINT_F             7E8
PRINT_IMMIDIATE_DATA  6BE
PRINT_NOP           62E
PRINT_NO_CODE       672
PRINT_RTS           650
PROMPTEADDR         8C6
PROMPTSADDR         8A0
READHEX             482
READ_EADDR          42A
READ_SADDR          40C
SET_COUNTER_4       590
SGTE                540
SGTEM               964
SHIFT_4_BIT         720
SHIFT_SIZE          732
SHIFT_SIZE_BYTE     74A
SHIFT_SIZE_LONG     75E
SHIFT_SIZE_WORD     754
SIZE                9E7
START               400
STARTING_ADD        9EC
STARTING_ADDR_7     9A8
START_SHIFT_4_BIT   728
STORE               4AA
STORE_ADDRESS       4EC
STORE_E             534
STORE_ENDING        52A
STORE_ONE_CHAR      5B4
UNCHANGED_CONSTANT  604
VALIDATE_STORE      446
WORD_SIZE           6E4
