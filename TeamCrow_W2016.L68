00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/6/2016 7:02:44 PM

00000000                             1  *------------------------------------------------------------------------------------------
00000000                             2  * Title:  68K Disassembler
00000000                             3  * Written by :  Hoa, Tenzin Khando, Marco F.
00000000                             4  * Date       :
00000000                             5  * Description:  Awesome 68k disassembler 
00000000                             6  *------------------------------------------------------------------------------------------
00000400                             7      ORG    $400
00000400                             8  START:  
00000400  43F9 00001274              9          LEA         GREETING, A1            * Load the greeting message
00000406  103C 000E                 10          MOVE.B      #14,D0
0000040A  4E4F                      11          TRAP        #15 
0000040C  13FC 0000 000014B0        12          MOVE.B      #0, LINE_COUNT          * Initilize the LINE_COUNTER variable 
00000414                            13      
00000414                            14  ********************************************************************************************
00000414                            15  * DESCRIPTION: Reading Addresses
00000414                            16  *------------------ STARTING ADDRESS -------------------------------------------------------
00000414                            17  READ_SADDR
00000414  4287                      18          CLR.L       D7
00000416  43F9 00001324             19          LEA         PROMPTSADDR, A1
0000041C  103C 000E                 20          MOVE.B      #14, D0
00000420  4E4F                      21          TRAP        #15
00000422  43F9 000014B6             22          LEA         INPUT_HEX,A1            * Temp hold starting address
00000428  103C 0002                 23          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
0000042C  4E4F                      24          TRAP        #15
0000042E  6000 001E                 25          BRA         VALIDATE_STORE 
00000432                            26  *------------------ ENDING ADDRESS -------------------------------------------------------
00000432                            27  READ_EADDR
00000432  43F9 0000134A             28          LEA         PROMPTEADDR, A1
00000438  103C 000E                 29          MOVE.B      #14, D0
0000043C  4E4F                      30          TRAP        #15
0000043E  43F9 000014B6             31          LEA         INPUT_HEX,A1            * Temp hold ending address
00000444  103C 0002                 32          MOVE.B      #2,D0                   * Read string from keyboard and store at A1
00000448  4E4F                      33          TRAP        #15  
0000044A  6000 0002                 34          BRA         VALIDATE_STORE 
0000044E                            35  
0000044E                            36  ********************************************************************************************
0000044E                            37  * Validating and storing addresses
0000044E                            38  *------------------ VALIDATE & STORE  ADDRESS ----------------------------------------------
0000044E                            39  VALIDATE_STORE 
0000044E                            40  
0000044E                            41          * Check address size
0000044E  0C01 0004                 42          CMPI.B      #4, D1                  
00000452  6D00 000E                 43          BLT         BADSIZES 
00000456  0C01 0008                 44          CMPI.B      #8, D1 
0000045A  6E00 0006                 45          BGT         BADSIZES
0000045E  6000 002A                 46          BRA         READHEX
00000462                            47  BADSIZES
00000462  43F9 000013E7             48          LEA         ERRORINPUTSIZE, A1      * Print Bad Size Error
00000468  103C 000E                 49          MOVE.B      #14,D0
0000046C  4E4F                      50          TRAP        #15
0000046E  B63C 0000                 51          CMP.B       #0,D3                   * D3 - HOLDS 0 if starting address has not being stored yet
00000472  67A0                      52          BEQ         READ_SADDR
00000474  60BC                      53          BRA         READ_EADDR 
00000476                            54  INVALID_CHARACTER                           * Print Invalid Character for Address
00000476  43F9 00001407             55          LEA         INVALIDCHAR, A1
0000047C  103C 000E                 56          MOVE.B      #14,D0 
00000480  4E4F                      57          TRAP        #15 
00000482  B63C 0000                 58          CMP.B       #0,D3
00000486  678C                      59          BEQ         READ_SADDR 
00000488  60A8                      60          BRA         READ_EADDR
0000048A                            61  *------------------ Read ASCII & Convert + Store as Hex ----------------------------------
0000048A                            62  READHEX       
0000048A  0C11 0030                 63          CMPI.B      #$30,(A1)
0000048E  6DE6                      64          BLT         INVALID_CHARACTER       * Wrong data
00000490  0C11 0040                 65          CMPI.B      #$40,(A1)
00000494  6D00 000C                 66          BLT         NUMBER                  * Is number
00000498  0C11 0047                 67          CMPI.B      #$47,(A1)
0000049C  6D00 000C                 68          BLT         LETTERS                 * Is Letter
000004A0  60D4                      69          BRA         INVALID_CHARACTER
000004A2                            70  NUMBER      
000004A2  0411 0030                 71          SUBI.B      #$30,(A1)               * Convert Numbers to Hex
000004A6  6000 000A                 72          BRA         STORE   
000004AA                            73  LETTERS     
000004AA  0411 0037                 74          SUBI.B      #$37,(A1)               * Convert Numbers to Hex
000004AE  6000 0002                 75          BRA         STORE
000004B2                            76  STORE       
000004B2  DE19                      77          ADD.B       (A1)+,D7                * Save data from A1 to D7
000004B4  0C11 0000                 78          CMPI.B      #0,(A1)                 * NO MORE TO READ SO CHECK IF ADDRESS IS ODD
000004B8  6700 0006                 79          BEQ         ODD_TEST     
000004BC  E98F                      80          LSL.L       #4,D7                   * Keep reading next character
000004BE  60CA                      81          BRA         READHEX
000004C0                            82  
000004C0                            83  * Before storing address - check if odd --------------------------------------------------------
000004C0                            84  ODD_TEST                                    * Check if address is odd
000004C0  7202                      85          MOVE.L      #$00000002,D1           * Put 2 in D1 so we can use it to divide input by 2
000004C2  2C07                      86          MOVE.L      D7,D6
000004C4  8CC1                      87          DIVU        D1,D6                   * Divide the input address by 2
000004C6  4846                      88          SWAP        D6                      * Store the remainder in D2
000004C8  BC3C 0001                 89          CMP.B       #1,D6                   * Is the remainder ==1
000004CC  6700 000A                 90          BEQ         ODD_TEST_FAIL           * Remainder is 1 so input fails odd test 
000004D0  B63C 0000                 91          CMP.B       #0,D3
000004D4                            92              
000004D4  6000 001E                 93          BRA         STORE_ADDRESS                           
000004D8                            94  ODD_TEST_FAIL   
000004D8  43F9 00001459             95          LEA         ODD_ADD_MSG,A1          * Load ODD_ADD_MSG to A1
000004DE  103C 000E                 96          MOVE.B      #14,D0                  * Print odd address error message
000004E2  4E4F                      97          TRAP        #15                     
000004E4  4286                      98          CLR.L       D6
000004E6  4287                      99          CLR.L       D7      
000004E8  B63C 0000                100          CMP.B       #0,D3
000004EC  6700 FF26                101          BEQ         READ_SADDR
000004F0  6000 FF40                102          BRA         READ_EADDR 
000004F4                           103  
000004F4                           104  * STORE ADDRESSESSS INTO MEMORY ----------------------------------------------------------------              
000004F4                           105  STORE_ADDRESS
000004F4  4286                     106          CLR.L       D6
000004F6  B63C 0000                107          CMP.B       #0,D3
000004FA  6600 0036                108          BNE         STORE_ENDING
000004FE                           109          
000004FE  BEBC 00007000            110          CMP.L       #$00007000, D7
00000504  6E00 001A                111          BGT         CONTINUE_STORE
00000508  6700 0016                112          BEQ         CONTINUE_STORE
0000050C                           113      
0000050C  4286                     114          CLR.L       D6
0000050E  4287                     115          CLR.L       D7
00000510  43F9 00001470            116          LEA         STARTING_ADDR_7, A1         * Load ODD_ADD_MSG to A1
00000516  103C 000E                117          MOVE.B      #14,D0                  * Print odd address error message
0000051A  4E4F                     118          TRAP        #15  
0000051C  6000 FEF6                119          BRA         READ_SADDR
00000520                           120          
00000520                           121  CONTINUE_STORE        
00000520  23C7 000014BA            122          MOVE.L      D7, STARTING_ADD        * Save in the memory address 
00000526  2C47                     123          MOVEA.L     D7, A6                  * Save starting at A6
00000528  163C 0001                124          MOVE.B      #1, D3                  * Counter - for VALID_STORE
0000052C  4287                     125          CLR.L       D7
0000052E  6000 FF02                126          BRA         READ_EADDR    
00000532                           127  STORE_ENDING 
00000532  BEB9 000014BA            128          CMP.L       (STARTING_ADD), D7
00000538  6D00 0014                129          BLT         SGTE
0000053C                           130  
0000053C                           131  STORE_E             
0000053C  23C7 000014BE            132          MOVE.L      D7, ENDING_ADD  
00000542  4287                     133          CLR.L       D7
00000544  4EB9 00001218            134          JSR         OPCODESETUP
0000054A  6000 0016                135          BRA         ADDR_LOOP
0000054E                           136  SGTE                                        * Starting greater then ending
0000054E  43F9 000013B4            137          LEA         INVALIDSADDR, A1
00000554  103C 000E                138          MOVE.B      #14, D0
00000558  4E4F                     139          TRAP        #15
0000055A  4287                     140          CLR.L       D7
0000055C  4283                     141          CLR.L       D3
0000055E  6000 FEB4                142          BRA         READ_SADDR
00000562                           143    
00000562                           144          
00000562                           145  ********************************************************************************************
00000562                           146  *------------------ OPCODE READ ------------------------------------------------------------
00000562                           147  * Description:
00000562                           148  *
00000562                           149  *------------------ Compare Current Address to Ending Adddres ------------------------------ 
00000562                           150  ADDR_LOOP
00000562  4EB9 00001242            151          JSR         CLEAR_REGISTERS             * Clear registers
00000568  2A79 000014BE            152          MOVE.L      ENDING_ADD,A5               * Check current address against ending adress           
0000056E  BDCD                     153          CMP.L       A5,A6
00000570  6E00 0CFE                154          BGT         END_PROGRAM    
00000574  0C39 0019 000014B0       155          CMP.B       #25, LINE_COUNT             * Check line counter
0000057C  6600 0008                156          BNE         CONTINUE_ADDR_LOOP
00000580  4EB9 000011D0            157          JSR         GETKEY        
00000586                           158  CONTINUE_ADDR_LOOP        
00000586  5239 000014B0            159          ADD.B       #1, LINE_COUNT              * Update Line counter
0000058C  4EB9 00001242            160          JSR         CLEAR_REGISTERS             * Clear registers
00000592  4EB9 00000F90            161          JSR         PRINT_CURRENT_ADD           * PRINT CURRENT ADDRESS
00000598  47F9 000014C6            162          LEA         OPCODE, A3                  * initialize good buffer
0000059E  49F9 000014C2            163          LEA         BADCODE, A4                 * initialize bad buffer
000005A4                           164          
000005A4  3C1E                     165          MOVE.W      (A6)+, D6
000005A6  4EB9 000005FC            166          JSR         SETUPBADDATA                * Setup the bad data printing
000005AC  4EB9 000005E6            167          JSR         SETUPOPCODE
000005B2  4EB9 0000066A            168          JSR         GET_INSTRUCTION
000005B8                           169  
000005B8  BE38 00FF                170          CMP.B       $FF,D7                      * Is the instruction bad data?
000005BC  6700 0014                171          BEQ         PRINTBADDATA                    It is! Print it out
000005C0                           172          
000005C0  16FC 0000                173          MOVE.B      #$00,(A3)+                  * Add 00 to opcode printer
000005C4  43F9 000014C6            174          LEA         OPCODE, A1                  * Print good data
000005CA  700D                     175          MOVEQ       #13,D0              
000005CC  4E4F                     176          TRAP        #15                 
000005CE  4286                     177          CLR.L       D6
000005D0  6090                     178          BRA         ADDR_LOOP
000005D2                           179  PRINTBADDATA
000005D2  18FC 0000                180          MOVE.B  #$00,(A4)+          Add 00 BAD_BUFFER so we can end the line.
000005D6  43F9 000014C2            181          LEA     BADCODE,A1      Load the bad data into A1
000005DC  700D                     182          MOVEQ   #13,D0              set print trap
000005DE  4E4F                     183          TRAP    #15                 Call trap
000005E0  4287                     184          CLR.L   D7                  Clear the bad data flag
000005E2  6000 FF7E                185          BRA     ADDR_LOOP       Go back to main loop
000005E6                           186          
000005E6                           187          
000005E6                           188  SETUPOPCODE
000005E6  16FC 0020                189          MOVE.B  #' ',(A3)+
000005EA  16FC 0020                190          MOVE.B  #' ',(A3)+
000005EE  16FC 0020                191          MOVE.B  #' ',(A3)+
000005F2  16FC 0020                192          MOVE.B  #' ',(A3)+
000005F6  16FC 0020                193          MOVE.B  #' ',(A3)+
000005FA  4E75                     194          RTS
000005FC                           195          
000005FC                           196  *---------------------------------------------------------------------------------------
000005FC                           197  SETUPBADDATA
000005FC                           198          *MOVE.L  #$00000000, A4
000005FC  18FC 0020                199          MOVE.B  #' ',(A4)+
00000600  18FC 0020                200          MOVE.B  #' ',(A4)+
00000604  18FC 0020                201          MOVE.B  #' ',(A4)+
00000608  18FC 0020                202          MOVE.B  #' ',(A4)+
0000060C  18FC 0020                203          MOVE.B  #' ',(A4)+
00000610  18FC 0042                204          MOVE.B  #'B',(A4)+          Insert B into the output
00000614  18FC 0041                205          MOVE.B  #'A',(A4)+          Insert A into the output
00000618  18FC 0044                206          MOVE.B  #'D',(A4)+          Insert D into the output
0000061C  18FC 0020                207          MOVE.B  #' ',(A4)+          Insert a space into the output
00000620  18FC 0044                208          MOVE.B  #'D',(A4)+          Insert D into output
00000624  18FC 0041                209          MOVE.B  #'A',(A4)+          Insert A into output
00000628  18FC 0054                210          MOVE.B  #'T',(A4)+          Insert T into output
0000062C  18FC 0041                211          MOVE.B  #'A',(A4)+          Insert A into output
00000630  18FC 0020                212          MOVE.B  #' ',(A4)+          Insert a space into output
00000634  18FC 0024                213          MOVE.B  #'$',(A4)+          Insert a $ into output
00000638                           214  GETBADDATA            
00000638  7004                     215          MOVEQ   #4,D0               Move counter to D0
0000063A  3806                     216          MOVE.W  D6,D4               Move longword address into D4
0000063C                           217  DATA_PREP9                          
0000063C  E95C                     218          ROL.W  #4,D4                Move the MSB to LSB
0000063E  2A04                     219          MOVE.L D4,D5                Move longword address to D5
00000640  0285 0000000F            220          ANDI.L #$0000000F,D5        Clear everything except for MSB
00000646                           221  DATA_ASC9
00000646  0C05 0009                222          CMPI.B #$09,D5              Is the character a number?
0000064A  6F00 000A                223          BLE    DATA_NUM9            Branch if yes.
0000064E                           224  DATA_LET9
0000064E  0605 0037                225          ADDI.B #$37,D5              Convert into a prinatble ascii letter
00000652  6000 000A                226          BRA    DATA_CHAR9
00000656                           227  DATA_NUM9 
00000656  0605 0030                228          ADDI.B #$30,D5              Convert into a prinatble ascii number
0000065A  6000 0002                229          BRA    DATA_CHAR9
0000065E                           230  DATA_CHAR9
0000065E  5300                     231          SUBI.B #1,D0                Decrement counter
00000660  18C5                     232          MOVE.B D5,(A4)+             Move ascii into bad buffer also
00000662  0C00 0000                233          CMPI.B #0,D0                Have we moved all characters?
00000666  6ED4                     234          BGT    DATA_PREP9           if not, repeat loop
00000668  4E75                     235          RTS
0000066A                           236  *---------------------------------------------------------------------------------
0000066A                           237  
0000066A                           238  GET_INSTRUCTION
0000066A  4201                     239          CLR.B   D1                              * Clear D1 so other tests don't get bugged
0000066C  3A06                     240          MOVE.W  D6, D5                          * Move the instruction so we can shift it
0000066E  E04D                     241          LSR.W   #8, D5                          * Shift 8 bits to the right
00000670  E84D                     242          LSR.W   #4, D5                          * Shift 4 biths to the right
00000672  CAFC 0008                243          MULU    #8, D5                          * Offset D5 to show the word binary for the instruction
00000676  41F9 00000682            244          LEA     OPCODE_JMP_TABLE, A0            * Set the table to A0 so we know where to jump to
0000067C  4EB0 5000                245          JSR     0(A0,D5)                        
00000680  4E75                     246          RTS        
00000682                           247  
00000682                           248  ********************************************************************************************
00000682                           249  * OP CODE                                              
00000682                           250  OPCODE_JMP_TABLE
00000682  4EB9 00000714            251      JSR     INSTR0000                           * - ADDI
00000688  4E75                     252      RTS
0000068A  4EB9 00000716            253      JSR     INSTR0001                           * - MOVE.B
00000690  4E75                     254      RTS
00000692  4EB9 00000718            255      JSR     INSTR0010                           * - MOVE.L
00000698  4E75                     256      RTS
0000069A  4EB9 0000071A            257      JSR     INSTR0011                           * - MOVE.W
000006A0  4E75                     258      RTS
000006A2  4EB9 0000071C            259      JSR     INSTR0100                           * - MOVEM, LEA, JSR, CLR, RTS, NOP
000006A8  4E75                     260      RTS
000006AA  4EB9 00000734            261      JSR     INSTR0110                           * - BCC, BLE, BGT
000006B0  4E75                     262      RTS
000006B2  4EB9 00000736            263      JSR     INSTR0111                           * - MOVEQ
000006B8  4E75                     264      RTS
000006BA  4EB9 00000738            265      JSR     INSTR1001                           * - SUB
000006C0  4E75                     266      RTS
000006C2  4EB9 0000073A            267      JSR     INSTR1011                           * - CMP
000006C8  4E75                     268      RTS
000006CA  4EB9 0000073C            269      JSR     INSTR1100                           * - ADD, MULS
000006D0  4E75                     270      RTS
000006D2  4EB9 0000073E            271      JSR     INSTR1101                           * - ADDA, AND, 
000006D8  4E75                     272      RTS
000006DA  4EB9 00000740            273      JSR     INSTR1110                           * - ASR, LSL, ROL
000006E0  4E75                     274      RTS
000006E2  4EB9 00000742            275      JSR     INSTR1000                           * - DIVU
000006E8  4E75                     276      RTS   
000006EA                           277      
000006EA  4EB9 00000702            278      JSR     INSTR0101                           * - BAD DATA
000006F0  4E75                     279      RTS   
000006F2  4EB9 00000708            280      JSR     INSTR1010                           * - BAD DATA
000006F8  4E75                     281      RTS   
000006FA  4EB9 0000070E            282      JSR     INSTR1111                           * - BAD DATA
00000700  4E75                     283      RTS   
00000702                           284  
00000702                           285  
00000702                           286      
00000702                           287  ********************************************************
00000702                           288  
00000702                           289  
00000702                           290  INSTR0101                           
00000702  1E38 0011                291      MOVE.B  $11, D7   
00000706  4E75                     292      RTS
00000708                           293  INSTR1010  
00000708  1E38 0011                294      MOVE.B  $11, D7   
0000070C  4E75                     295      RTS                         
0000070E                           296  INSTR1111 
0000070E  1E38 0011                297      MOVE.B  $11, D7   
00000712  4E75                     298      RTS                          
00000714                           299  
00000714                           300  
00000714                           301  INSTR0000
00000714  4E75                     302      RTS
00000716                           303  INSTR0001
00000716  4E75                     304      RTS
00000718                           305  INSTR0010
00000718  4E75                     306      RTS
0000071A                           307  INSTR0011
0000071A  4E75                     308      RTS
0000071C                           309  INSTR0100
0000071C  3A06                     310      MOVE.W  D6, D5                      Move instruction for shifting
0000071E  E04D                     311      LSR.W   #$8, D5
00000720  0245 000F                312      ANDI.W  #$000F, D5
00000724  CAFC 0008                313      MULU    #8, D5
00000728  41F9 00000744            314      LEA     FOURTABLE, A0
0000072E  4EB0 5000                315      JSR     00(A0,D5)   
00000732  4E75                     316      RTS
00000734                           317  INSTR0110
00000734  4E75                     318      RTS
00000736                           319  INSTR0111
00000736  4E75                     320      RTS
00000738                           321  INSTR1001
00000738  4E75                     322      RTS
0000073A                           323  INSTR1011
0000073A  4E75                     324      RTS  
0000073C                           325  INSTR1100
0000073C  4E75                     326      RTS
0000073E                           327  INSTR1101
0000073E  4E75                     328      RTS  
00000740                           329  INSTR1110
00000740  4E75                     330      RTS
00000742                           331  INSTR1000
00000742  4E75                     332      RTS
00000744                           333      
00000744                           334  
00000744                           335  
00000744                           336  
00000744                           337  
00000744                           338  
00000744                           339  
00000744                           340  
00000744                           341  
00000744                           342  * 1011 - CMP INSTRUCTION TABLES             *                   
00000744                           343  *BINSTTABLE
00000744                           344  *    JSR     BTABLE000                       CMP.B Instruction
00000744                           345  *    RTS
00000744                           346  *    JSR     BTABLE001                       CMP.W Instruction
00000744                           347  *    RTS
00000744                           348  *    JSR     BTABLE010                       CMP.L Instruction
00000744                           349  *    RTS
00000744                           350  
00000744                           351  *********************************************************
00000744                           352  * 0100 Jump Table CLR, JSR, LEA, MOVEM, RTS INSTRUCTIONS
00000744                           353  FOURTABLE     
00000744  4EB9 00000842            354      JSR     FOUR0000                    Illegal Instruction
0000074A  4E75                     355      RTS                                 Return Bad Instruction
0000074C  4EB9 00000848            356      JSR     FOUR0001                    LEA instruction with An = 0
00000752  4E75                     357      RTS                                 Return full instruction
00000754  4EB9 0000085C            358      JSR     FOUR0010                    CLR instruction
0000075A  4E75                     359      RTS                                 Return full instruction
0000075C  4EB9 000008B4            360      JSR     FOUR0011                    LEA instruction with An = 1
00000762  4E75                     361      RTS                                 Return full instruction
00000764  4EB9 000008C8            362      JSR     FOUR0100                    Illegal Instruction
0000076A  4E75                     363      RTS                                 Return Bad Instruction
0000076C  4EB9 000008CE            364      JSR     FOUR0101                    LEA instruction with An = 2
00000772  4E75                     365      RTS                                 Return full instruction
00000774  4EB9 000008E2            366      JSR     FOUR0110                    Illegal Instruction
0000077A  4E75                     367      RTS                                 Return Bad Instruction
0000077C  4EB9 000008E8            368      JSR     FOUR0111                    LEA instruction with An = 3
00000782  4E75                     369      RTS                                 Return full instruction
00000784  4EB9 000008FC            370      JSR     FOUR1000                    MOVEM instruction for Register to Memory
0000078A  4E75                     371      RTS                                 Return full instruction
0000078C  4EB9 00000B0E            372      JSR     FOUR1001                    LEA instruction with An = 3
00000792  4E75                     373      RTS                                 Return full instruction
00000794  4EB9 00000B22            374      JSR     FOUR1010                    Illegal Instruction
0000079A  4E75                     375      RTS                                 Return Bad Instruction
0000079C  4EB9 00000B28            376      JSR     FOUR1011                    LEA instruction with An = 4
000007A2  4E75                     377      RTS                                 Return full instruction
000007A4  4EB9 00000B3C            378      JSR     FOUR1100                    MOVEM instruction for Memory to Register
000007AA  4E75                     379      RTS                                 Return full instruction
000007AC  4EB9 00000C88            380      JSR     FOUR1101                    LEA instruction with An = 5
000007B2  4E75                     381      RTS                                 Return full instruction
000007B4  4EB9 00000C9C            382      JSR     FOUR1110                    JSR and RTS instructions
000007BA  4E75                     383      RTS                                 Return full instruction
000007BC  4EB9 00000CE0            384      JSR     FOUR1111                    LEA instruction with An = 6
000007C2  4E75                     385      RTS
000007C4                           386  *********************************************************
000007C4                           387  FORMAT
000007C4  4EF9 00000D2C            388      JMP    FORMAT000            Call function with EA mode of 000
000007CA  4EF9 00000D3E            389      JMP    FORMAT001            Call function with EA mode of 001
000007D0  4EF9 00000D50            390      JMP    FORMAT010            Call function with EA mode of 010
000007D6  4EF9 00000D6A            391      JMP    FORMAT011            Call function with EA mode of 011
000007DC  4EF9 00000D88            392      JMP    FORMAT100            Call function with EA mode of 100
000007E2  4EF9 00000DA6            393      JMP    FORMAT101            Call function with EA mode of 101
000007E8  4EF9 00000DAE            394      JMP    FORMAT110            Call function with EA mode of 110
000007EE  4EF9 00000DB4            395      JMP    FORMAT111            Call function with EA mode of 111
000007F4                           396  *********************************************************   
000007F4                           397  REGISTER
000007F4  4EF9 00000DC2            398      JMP    REGISTER000          Call function with EA register of 000
000007FA  4EF9 00000DC8            399      JMP    REGISTER001          Call function with EA register of 001
00000800  4EF9 00000DCE            400      JMP    REGISTER010          Call function with EA register of 010
00000806  4EF9 00000DD4            401      JMP    REGISTER011          Call function with EA register of 011
0000080C  4EF9 00000DDA            402      JMP    REGISTER100          Call function with EA register of 100
00000812  4EF9 00000DE0            403      JMP    REGISTER101          Call function with EA register of 101
00000818  4EF9 00000DE6            404      JMP    REGISTER110          Call function with EA register of 110
0000081E  4EF9 00000DEC            405      JMP    REGISTER111          Call function with EA register of 111
00000824                           406  *********************************************************   
00000824                           407  ABSOLUTE
00000824  4EF9 00000DF2            408      JMP    ABSOLUTE000          Call function with absolute register of 000
0000082A  4EF9 00000E48            409      JMP    ABSOLUTE001          Call function with absolute register of 001
00000830  4EF9 00000EA0            410      JMP    ABSOLUTE010          Call function with absolute register of 100
00000836  4EF9 00000EA8            411      JMP    ABSOLUTE011          Call function with absolute register of 100
0000083C  4EF9 00000EB0            412      JMP    ABSOLUTE100          Call function with absolute register of 100
00000842                           413  
00000842                           414  ********************************************************
00000842                           415  * Illegal Instruction                                  *     
00000842                           416  ********************************************************
00000842                           417  FOUR0000
00000842  1E38 0011                418      MOVE.B  $11, D7                         Create bad data flag
00000846  4E75                     419      RTS                                     Return the instruction
00000848                           420  ********************************************************
00000848                           421  * 0100 0001 - LEA instruction with An = 0              *     
00000848                           422  ********************************************************
00000848                           423  FOUR0001
00000848  4EB9 00000CF4            424      JSR     LEAMAIN
0000084E  16FC 002C                425      MOVE.B  #',',(A3)+                      Move a comma into the output
00000852  16FC 0041                426      MOVE.B  #'A',(A3)+                      Move A into the output
00000856  16FC 0030                427      MOVE.B  #'0',(A3)+                      Move 0 into the output
0000085A  4E75                     428      RTS                                     Return the instruction
0000085C                           429  ********************************************************
0000085C                           430  * 0100 0010 - CLR                                      *     
0000085C                           431  ********************************************************
0000085C                           432  FOUR0010
0000085C  16FC 0043                433      MOVE.B  #'C',(A3)+                      Move C into output
00000860  16FC 004C                434      MOVE.B  #'L',(A3)+                      Move L into output
00000864  16FC 0052                435      MOVE.B  #'R',(A3)+                      MOVE R into output
00000868  16FC 002E                436      MOVE.B  #'.',(A3)+                      MOVE . into output
0000086C  4EB9 00000F34            437      JSR     GETSIZE                         Get the size of CLR
00000872  B63C 0000                438      CMP.B   #%00, D3                        Is it Byte data?
00000876  6700 0018                439      BEQ     BYTEDATA                        If so go to BYTEDATA
0000087A  B63C 0001                440      CMP.B   #$01, D3                        Is it Word data?
0000087E  6700 0018                441      BEQ     WORDDATA                        If so go to WORDDATA
00000882  B63C 0002                442      CMP.B   #$02, D3                        Is it Long data?
00000886  6700 0018                443      BEQ     LONGDATA                        If so go to LONGDATA
0000088A  1E38 0011                444      MOVE.B  $11, D7                         It's not a byte, word or long, so it's bad data
0000088E  4E75                     445      RTS                                     Return bad data
00000890                           446  BYTEDATA
00000890  16FC 0042                447      MOVE.B  #'B',(A3)+                      Move B into output
00000894  6000 0012                448      BRA     FINISHCLR                       Finish the CLR instruction
00000898                           449  WORDDATA
00000898  16FC 0057                450      MOVE.B  #'W',(A3)+                      Move W into output
0000089C  6000 000A                451      BRA     FINISHCLR                       Finish the CLR instruction
000008A0                           452  LONGDATA
000008A0  16FC 004C                453      MOVE.B  #'L',(A3)+                      Move L into output
000008A4  6000 0002                454      BRA     FINISHCLR                       Finish the CLR instruction
000008A8                           455  FINISHCLR    
000008A8  16FC 0020                456      MOVE.B  #' ',(A3)+                      Move a space into the output
000008AC  4EB9 00000D0C            457      JSR     EACODE                          Call EA code
000008B2  4E75                     458      RTS                                     Return the instruction
000008B4                           459  
000008B4                           460  ********************************************************
000008B4                           461  * 0100 0011 - LEA instruction with An = 1              *     
000008B4                           462  ********************************************************
000008B4                           463  FOUR0011
000008B4  4EB9 00000CF4            464      JSR     LEAMAIN                         Jump to main output printing routine
000008BA  16FC 002C                465      MOVE.B  #',',(A3)+                      Move a comma into the output
000008BE  16FC 0041                466      MOVE.B  #'A',(A3)+                      Move A into the output
000008C2  16FC 0031                467      MOVE.B  #'1',(A3)+                      Move 1 into the output
000008C6  4E75                     468      RTS                                     Return the instruction
000008C8                           469  ********************************************************
000008C8                           470  * Illegal Instruction                                  *     
000008C8                           471  ********************************************************
000008C8                           472  FOUR0100
000008C8  1E38 0011                473      MOVE.B  $11, D7                         Set bad data flag
000008CC  4E75                     474      RTS                                     Return the instruction
000008CE                           475  ********************************************************
000008CE                           476  * 0100 0101 - LEA instruction with An = 2              *     
000008CE                           477  ********************************************************
000008CE                           478  FOUR0101
000008CE  4EB9 00000CF4            479      JSR     LEAMAIN
000008D4  16FC 002C                480      MOVE.B  #',',(A3)+                      Move a comma into the output
000008D8  16FC 0041                481      MOVE.B  #'A',(A3)+                      Move A into the output
000008DC  16FC 0032                482      MOVE.B  #'2',(A3)+                      Move 2 into the output
000008E0  4E75                     483      RTS                                     Return the instruction
000008E2                           484  ********************************************************
000008E2                           485  * Illegal Instruction                                  *     
000008E2                           486  ********************************************************
000008E2                           487  FOUR0110
000008E2  1E38 0011                488      MOVE.B  $11, D7
000008E6  4E75                     489      RTS                                     Return the instruction
000008E8                           490  ********************************************************
000008E8                           491  * 0100 1001 - LEA instruction with An = 3              *     
000008E8                           492  ********************************************************
000008E8                           493  FOUR0111
000008E8  4EB9 00000CF4            494      JSR     LEAMAIN                         Jump to main output printing routine
000008EE  16FC 002C                495      MOVE.B  #',',(A3)+                      Move a comma into the output
000008F2  16FC 0041                496      MOVE.B  #'A',(A3)+                      Move A into the output
000008F6  16FC 0033                497      MOVE.B  #'3',(A3)+                      Move 3 into the output
000008FA  4E75                     498      RTS                                     Return the instruction
000008FC                           499  ********************************************************
000008FC                           500  * 0100 1000 - MOVEM: Register to Memory                *     
000008FC                           501  ********************************************************
000008FC                           502  FOUR1000
000008FC  16FC 004D                503      MOVE.B  #'M',(A3)+                      Move M to the output
00000900  16FC 004F                504      MOVE.B  #'O',(A3)+                      Move O to the output
00000904  16FC 0056                505      MOVE.B  #'V',(A3)+                      Move V to the output
00000908  16FC 0045                506      MOVE.B  #'E',(A3)+                      Move E to the output
0000090C  16FC 004D                507      MOVE.B  #'M',(A3)+                      Move M to the output
00000910  16FC 002E                508      MOVE.B  #'.',(A3)+                      Move . to the output
00000914  4EB9 00000F3A            509      JSR     GETSIZEONEBIT                   Check size of the instruction
0000091A  B63C 0000                510      CMP.B   #%0, D3                         Is it Word data?
0000091E  6700 01DE                511      BEQ     WORDDATAR2M                     If so go to MWORDDATA
00000922  B63C 0001                512      CMP.B   #$1, D3                         Is it Long data?
00000926  6700 01DE                513      BEQ     LONGDATAR2M                     If so go to LONGDATA
0000092A  1E3C 0011                514      MOVE.B  #$11, D7                        It's not a byte, word or long, so it's bad data
0000092E  4E75                     515      RTS                                     Return bad data
00000930                           516  FINDLIST2M
00000930  16FC 0020                517      MOVE.B  #' ',(A3)+                      Move a space into the output
00000934  3A1D                     518      MOVE.W  (A5)+,D5                        Load next word in memory
00000936  3805                     519      MOVE.W  D5,D4 
00000938  4201                     520      CLR.B   D1                              Clear D1 register (reset counter)
0000093A  4283                     521      CLR.L   D3                              Clear D3 register
0000093C  1606                     522      MOVE.B  D6,D3                           Used to find EA
0000093E  0203 0038                523      ANDI.B  #$38,D3                         Isolate EA mode
00000942  0C03 0020                524      CMPI.B  #$20,D3
00000946  6700 00D4                525      BEQ     FINDDATAREG_PREDEC              It is a predecremnt do the algorithm with differently
0000094A                           526  FINDDATAREG
0000094A  E20D                     527      LSR.B   #1,D5                           Shift to the right
0000094C  6500 000E                528      BCS     FOUNDFIRSTDATA                  Is there at least 1 data register?
00000950  5201                     529      ADDI.B  #1,D1                           Increment counter
00000952  0C01 0008                530      CMPI.B  #8,D1                           Have we compared all the data register list?
00000956  6700 0060                531      BEQ     FINDADDRESSREG                  If so, time to compare address register
0000095A  60EE                     532      BRA     FINDDATAREG  
0000095C                           533  FOUNDFIRSTDATA
0000095C  16FC 0044                534      MOVE.B  #'D',(A3)+                      Add D to goodbuffer
00000960  1001                     535      MOVE.B  D1,D0                           Move register number to D0.
00000962  0600 0030                536      ADDI.B  #$30,D0                          Convert hex to ascii
00000966  16C0                     537      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000968                           538  LISTDATALOOP1
00000968  5201                     539      ADDI.B  #1,D1                           Increment counter
0000096A  0C01 0008                540      CMPI.B  #8,D1                           Have we compared all the data register list?
0000096E  6700 0014                541      BEQ     PRINTLISTDATA1                  If so, print  
00000972  E20D                     542      LSR.B   #1,D5                           Shift to the right
00000974  6500 0016                543      BCS     FOUNDSECONDDATA                 Are there more data registers?
00000978  5201                     544      ADDI.B  #1,D1                           Increment counter
0000097A  0C01 0008                545      CMPI.B  #8,D1                           Have we compared all in the data register list?
0000097E  6700 0004                546      BEQ     PRINTLISTDATA1                  If so, print
00000982  60E4                     547      BRA     LISTDATALOOP1                   If not, repeat loop
00000984                           548  PRINTLISTDATA1
00000984  16FC 002F                549      MOVE.B  #'/',(A3)+                      Add / to goodbuffer
00000988  6000 002E                550      BRA     FINDADDRESSREG                  Time to compare address register
0000098C                           551  FOUNDSECONDDATA  
0000098C  16FC 002D                552      MOVE.B  #'-',(A3)+
00000990                           553  LISTDATALOOP2
00000990  E20D                     554      LSR.B   #1,D5                           Shift to the right
00000992  6400 000E                555      BCC     PRINTLISTDATA2
00000996  0C01 0007                556      CMPI.B  #7,D1                           Have we compared all in the data register list?
0000099A  6700 0006                557      BEQ     PRINTLISTDATA2                  If so, time to compare address register
0000099E  5201                     558      ADDI.B  #1,D1                           Increment counter
000009A0  60EE                     559      BRA     LISTDATALOOP2    
000009A2                           560  PRINTLISTDATA2
000009A2  16FC 0044                561      MOVE.B  #'D',(A3)+                      Add D to goodbuffer
000009A6  1001                     562      MOVE.B  D1,D0                           Move register number to D0.
000009A8  0600 0030                563      ADDI.B  #$30,D0                         Convert hex to ascii
000009AC  16C0                     564      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
000009AE  16FC 002F                565      MOVE.B  #'/',(A3)+                      Add D to goodbuffer
000009B2  7208                     566      MOVEQ   #8,D1
000009B4  6000 0002                567      BRA     FINDADDRESSREG        
000009B8                           568  FINDADDRESSREG
000009B8  E34D                     569      LSL.W   #1,D5                           Shift to the left
000009BA  6500 000E                570      BCS     FOUNDFIRSTADDRESS               Is there at least 1 address register?
000009BE  5301                     571      SUBI.B  #1,D1                           Decrement counter
000009C0  0C01 0000                572      CMPI.B  #0,D1                           Have we compared all in the address register list?
000009C4  6700 012A                573      BEQ     FINISHMOVEMR2M                  If so, branch to finish
000009C8  60EE                     574      BRA     FINDADDRESSREG  
000009CA                           575  FOUNDFIRSTADDRESS
000009CA  16FC 0041                576      MOVE.B  #'A',(A3)+                      Add D to goodbuffer
000009CE  1001                     577      MOVE.B  D1,D0                           Move register number to D0.
000009D0  5300                     578      SUBI.B  #1,D0
000009D2  0600 0030                579      ADDI.B  #$30,D0                         Convert hex to ascii
000009D6  16C0                     580      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
000009D8                           581  ADDRESSLOOP1
000009D8  5301                     582      SUBI.B  #1,D1                           Decrement counter
000009DA  0C01 0000                583      CMPI.B  #0,D1                           Have we compared all in the address register list?
000009DE  6700 0110                584      BEQ     FINISHMOVEMR2M                  If so, branch to finish 
000009E2  E34D                     585      LSL.W   #1,D5                           Shift to the right
000009E4  6500 000E                586      BCS     FOUNDSECONDADDRESS              Are there more address registers?
000009E8  5301                     587      SUBI.B  #1,D1                           Increment counter
000009EA  0C01 0000                588      CMPI.B  #0,D1                           Have we compared all in the address register list?
000009EE  6700 0100                589      BEQ     FINISHMOVEMR2M                  If so, branch to finish 
000009F2  60E4                     590      BRA     ADDRESSLOOP1                    If not, repeat loop   
000009F4                           591  FOUNDSECONDADDRESS 
000009F4  16FC 002D                592      MOVE.B  #'-',(A3)+
000009F8                           593  LISTADDRESSLOOP2
000009F8  E34D                     594      LSL.W   #1,D5                           Shift to the left
000009FA  6400 000E                595      BCC     PRINTLISTADDRESS2
000009FE  5301                     596      SUBI.B  #1,D1                           Increment counter
00000A00  0C01 0000                597      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000A04  6700 0004                598      BEQ     PRINTLISTADDRESS2
00000A08  60EE                     599      BRA     LISTADDRESSLOOP2    
00000A0A                           600  PRINTLISTADDRESS2
00000A0A  16FC 0041                601      MOVE.B  #'A',(A3)+                      Add D to goodbuffer
00000A0E  1001                     602      MOVE.B  D1,D0                           Move register number to D0.
00000A10  5300                     603      SUBI.B  #1,D0
00000A12  0600 0030                604      ADDI.B  #$30,D0                          Convert hex to ascii
00000A16  16C0                     605      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000A18  6000 00D6                606      BRA     FINISHMOVEMR2M  
00000A1C                           607      ************************
00000A1C                           608  FINDDATAREG_PREDEC 
00000A1C  E34D                     609      LSL.W   #1,D5                           Shift to the right
00000A1E  6500 000E                610      BCS     FOUNDFIRSTDATA_PREDEC           Is there at least 1 data register?
00000A22  5201                     611      ADDI.B  #1,D1                           Increment counter
00000A24  0C01 0008                612      CMPI.B  #8,D1                           Have we compared all the data register list?
00000A28  6700 0060                613      BEQ     FINDADDRESSREG_PREDEC           If so, time to compare address register
00000A2C  60EE                     614      BRA     FINDDATAREG_PREDEC   
00000A2E                           615  FOUNDFIRSTDATA_PREDEC
00000A2E  16FC 0044                616      MOVE.B  #'D',(A3)+                      Add D to goodbuffer
00000A32  1001                     617      MOVE.B  D1,D0                           Move register number to D0.
00000A34  0600 0030                618      ADDI.B  #$30,D0                         Convert hex to ascii
00000A38  16C0                     619      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000A3A                           620  LISTDATALOOP1_PREDEC
00000A3A  5201                     621      ADDI.B  #1,D1                           Increment counter
00000A3C  0C01 0008                622      CMPI.B  #8,D1                           Have we compared all the data register list?
00000A40  6700 0014                623      BEQ     PRINTLISTDATA1_PREDEC           If so, print  
00000A44  E34D                     624      LSL.W   #1,D5                           Shift to the right
00000A46  6500 0016                625      BCS     FOUNDSECONDDATA_PREDEC          Are there more data registers?
00000A4A  5201                     626      ADDI.B  #1,D1                           Increment counter
00000A4C  0C01 0008                627      CMPI.B  #8,D1                           Have we compared all in the data register list?
00000A50  6700 0004                628      BEQ     PRINTLISTDATA1_PREDEC           If so, print
00000A54  60E4                     629      BRA     LISTDATALOOP1_PREDEC            If not, repeat loop
00000A56                           630  PRINTLISTDATA1_PREDEC
00000A56  16FC 002F                631      MOVE.B  #'/',(A3)+                      Add / to goodbuffer
00000A5A  6000 002E                632      BRA     FINDADDRESSREG_PREDEC           Time to compare address register
00000A5E                           633  FOUNDSECONDDATA_PREDEC  
00000A5E  16FC 002D                634      MOVE.B  #'-',(A3)+
00000A62                           635  LISTDATALOOP2_PREDEC
00000A62  E34D                     636      LSL.W   #1,D5                           Shift to the right
00000A64  6400 000E                637      BCC     PRINTLISTDATA2_PREDEC
00000A68  0C01 0007                638      CMPI.B  #7,D1                           Have we compared all in the data register list?
00000A6C  6700 0006                639      BEQ     PRINTLISTDATA2_PREDEC           If so, time to compare address register
00000A70  5201                     640      ADDI.B  #1,D1                           Increment counter
00000A72  60EE                     641      BRA     LISTDATALOOP2_PREDEC    
00000A74                           642  PRINTLISTDATA2_PREDEC
00000A74  16FC 0044                643      MOVE.B  #'D',(A3)+                      Add D to goodbuffer
00000A78  1001                     644      MOVE.B  D1,D0                           Move register number to D0.
00000A7A  0600 0030                645      ADDI.B  #$30,D0                         Convert hex to ascii
00000A7E  16C0                     646      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000A80  16FC 002F                647      MOVE.B  #'/',(A3)+                      Add D to goodbuffer
00000A84  7208                     648      MOVEQ   #8,D1
00000A86  6000 0002                649      BRA     FINDADDRESSREG_PREDEC        
00000A8A                           650  FINDADDRESSREG_PREDEC
00000A8A  1A04                     651      MOVE.B  D4,D5
00000A8C                           652  FINDADDRESSREG_LOOP
00000A8C  E20D                     653      LSR.B   #1,D5                           Shift to the left
00000A8E  6500 000E                654      BCS     FOUNDFIRSTADDRESS_PREDEC        Is there at least 1 address register?
00000A92  5301                     655      SUBI.B  #1,D1                           Decrement counter
00000A94  0C01 0000                656      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000A98  6700 0056                657      BEQ     FINISHMOVEMR2M                  If so, branch to finish
00000A9C  60EE                     658      BRA     FINDADDRESSREG_LOOP  
00000A9E                           659  FOUNDFIRSTADDRESS_PREDEC
00000A9E  16FC 0041                660      MOVE.B  #'A',(A3)+                      Add D to goodbuffer
00000AA2  1001                     661      MOVE.B  D1,D0                           Move register number to D0.
00000AA4  5300                     662      SUBI.B  #1,D0
00000AA6  0600 0030                663      ADDI.B  #$30,D0                         Convert hex to ascii
00000AAA  16C0                     664      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000AAC                           665  ADDRESSLOOP1_PREDEC
00000AAC  5301                     666      SUBI.B  #1,D1                           Decrement counter
00000AAE  0C01 0000                667      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000AB2  6700 003C                668      BEQ     FINISHMOVEMR2M                  If so, branch to finish 
00000AB6  E20D                     669      LSR.B   #1,D5                           Shift to the right
00000AB8  6500 000E                670      BCS     FOUNDSECONDADDRESS_PREDEC       Are there more address registers?
00000ABC  5301                     671      SUBI.B  #1,D1                           Increment counter
00000ABE  0C01 0000                672      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000AC2  6700 002C                673      BEQ     FINISHMOVEMR2M                  If so, branch to finish 
00000AC6  60E4                     674      BRA     ADDRESSLOOP1_PREDEC             If not, repeat loop   
00000AC8                           675  FOUNDSECONDADDRESS_PREDEC 
00000AC8  16FC 002D                676      MOVE.B  #'-',(A3)+
00000ACC                           677  LISTADDRESSLOOP2_PREDEC 
00000ACC  E20D                     678      LSR.B   #1,D5                           Shift to the left
00000ACE  6400 000E                679      BCC     PRINTLISTADDRESS2_PREDEC 
00000AD2  5301                     680      SUBI.B  #1,D1                           Increment counter
00000AD4  0C01 0000                681      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000AD8  6700 0004                682      BEQ     PRINTLISTADDRESS2_PREDEC
00000ADC  60EE                     683      BRA     LISTADDRESSLOOP2_PREDEC     
00000ADE                           684  PRINTLISTADDRESS2_PREDEC 
00000ADE  16FC 0041                685      MOVE.B  #'A',(A3)+                      Add D to goodbuffer
00000AE2  1001                     686      MOVE.B  D1,D0                           Move register number to D0.
00000AE4  5300                     687      SUBI.B  #1,D0
00000AE6  0600 0030                688      ADDI.B  #$30,D0                          Convert hex to ascii
00000AEA  16C0                     689      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000AEC  6000 0002                690      BRA     FINISHMOVEMR2M  
00000AF0                           691  FINISHMOVEMR2M
00000AF0  4201                     692      CLR.B   D1
00000AF2  16FC 002C                693      MOVE.B  #',',(A3)+                      Move a comma into the output
00000AF6  4EB9 00000D0C            694      JSR     EACODE                          Go to EA Code to finish instruction
00000AFC  4E75                     695      RTS                                     Return the instruction
00000AFE                           696  WORDDATAR2M
00000AFE  16FC 0057                697      MOVE.B  #'W',(A3)+                      Move W to the output
00000B02  6000 FE2C                698      BRA     FINDLIST2M                      Finish the instruction
00000B06                           699  LONGDATAR2M
00000B06  16FC 004C                700      MOVE.B  #'L',(A3)+                      Move L to the output
00000B0A  6000 FE24                701      BRA     FINDLIST2M                      Finish the instruction
00000B0E                           702  
00000B0E                           703  ********************************************************
00000B0E                           704  * 0100 1001 - LEA instruction with An = 4              *     
00000B0E                           705  ********************************************************
00000B0E                           706  FOUR1001
00000B0E  4EB9 00000CF4            707      JSR     LEAMAIN
00000B14  16FC 002C                708      MOVE.B  #',',(A3)+                      Move a comma into the output
00000B18  16FC 0041                709      MOVE.B  #'A',(A3)+                      Move A into the output
00000B1C  16FC 0034                710      MOVE.B  #'4',(A3)+                      Move 4 into the output
00000B20  4E75                     711      RTS                                     Return the instruction
00000B22                           712  ********************************************************
00000B22                           713  * Illegal Instruction                                  *     
00000B22                           714  ********************************************************
00000B22                           715  FOUR1010
00000B22  1E38 0011                716      MOVE.B  $11, D7                         Flag bad data
00000B26  4E75                     717      RTS                                     Return the instruction
00000B28                           718  ********************************************************
00000B28                           719  * 0100 1011 - LEA instruction with An = 5              *     
00000B28                           720  ********************************************************
00000B28                           721  FOUR1011
00000B28  4EB9 00000CF4            722      JSR     LEAMAIN                         Jump to main output printing routine
00000B2E  16FC 002C                723      MOVE.B  #',',(A3)+                      Move a comma into the output
00000B32  16FC 0041                724      MOVE.B  #'A',(A3)+                      Move A into the output
00000B36  16FC 0035                725      MOVE.B  #'5',(A3)+                      Move 5 into the output
00000B3A  4E75                     726      RTS                                     Return the instruction
00000B3C                           727  ********************************************************
00000B3C                           728  * 0100 1100 - MOVEM: Memory to Register                *     
00000B3C                           729  ********************************************************
00000B3C                           730  FOUR1100
00000B3C  16FC 004D                731      MOVE.B  #'M',(A3)+                      Move M to the output
00000B40  16FC 004F                732      MOVE.B  #'O',(A3)+                      Move O to the output
00000B44  16FC 0056                733      MOVE.B  #'V',(A3)+                      Move V to the output
00000B48  16FC 0045                734      MOVE.B  #'E',(A3)+                      Move E to the output
00000B4C  16FC 004D                735      MOVE.B  #'M',(A3)+                      Move M to the output
00000B50  16FC 002E                736      MOVE.B  #'.',(A3)+                      Move . to the output
00000B54  4EB9 00000F3A            737      JSR     GETSIZEONEBIT                   Check size of the instruction
00000B5A  B63C 0000                738      CMP.B   #%0, D3                         Is it Word data?
00000B5E  6700 00F6                739      BEQ     MWORDDATAM2R                    If so go to MWORDDATA
00000B62  B63C 0001                740      CMP.B   #$1, D3                         Is it Long data?
00000B66  6700 00F6                741      BEQ     MLONGDATAM2R                    If so go to LONGDATA
00000B6A  1E3C 0011                742      MOVE.B  #$11, D7                        It's not a byte, word or long, so it's bad data
00000B6E  4E75                     743      RTS                                     Return bad data
00000B70                           744  FINDLIST2R
00000B70  16FC 0020                745      MOVE.B  #' ',(A3)+                      Move a space into the output
00000B74  7E01                     746      MOVEQ   #1,D7
00000B76  4203                     747      CLR.B   D3
00000B78  4EB9 00000D0C            748      JSR     EACODE                          Go to EA Code to finish instruction
00000B7E  16FC 002C                749      MOVE.B  #',',(A3)+                      Move a space into the output
00000B82  3A1D                     750      MOVE.W  (A5)+,D5                        Load next word in memory 
00000B84  4201                     751      CLR.B   D1                              Clear D1 register (reset counter)
00000B86                           752  FINDDATAREG_
00000B86  E20D                     753      LSR.B   #1,D5                           Shift to the right
00000B88  6500 000E                754      BCS     FOUNDFIRSTDATA_                  Is there at least 1 data register?
00000B8C  5201                     755      ADDI.B  #1,D1                           Increment counter
00000B8E  0C01 0008                756      CMPI.B  #8,D1                           Have we compared all the data register list?
00000B92  6700 0060                757      BEQ     FINDADDRESSREG_                  If so, time to compare address register
00000B96  60EE                     758      BRA     FINDDATAREG_  
00000B98                           759  FOUNDFIRSTDATA_
00000B98  16FC 0044                760      MOVE.B  #'D',(A3)+                      Add D to goodbuffer
00000B9C  1001                     761      MOVE.B  D1,D0                           Move register number to D0.
00000B9E  0600 0030                762      ADDI.B  #$30,D0                          Convert hex to ascii
00000BA2  16C0                     763      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000BA4                           764  LISTDATALOOP1_
00000BA4  5201                     765      ADDI.B  #1,D1                           Increment counter
00000BA6  0C01 0008                766      CMPI.B  #8,D1                           Have we compared all the data register list?
00000BAA  6700 0014                767      BEQ     PRINTLISTDATA1_                  If so, print  
00000BAE  E20D                     768      LSR.B   #1,D5                           Shift to the right
00000BB0  6500 0016                769      BCS     FOUNDSECONDDATA_                 Are there more data registers?
00000BB4  5201                     770      ADDI.B  #1,D1                           Increment counter
00000BB6  0C01 0008                771      CMPI.B  #8,D1                           Have we compared all in the data register list?
00000BBA  6700 0004                772      BEQ     PRINTLISTDATA1_                  If so, print
00000BBE  60E4                     773      BRA     LISTDATALOOP1_                   If not, repeat loop
00000BC0                           774  PRINTLISTDATA1_
00000BC0  16FC 002F                775      MOVE.B  #'/',(A3)+                      Add / to goodbuffer
00000BC4  6000 002E                776      BRA     FINDADDRESSREG_                  Time to compare address register
00000BC8                           777  FOUNDSECONDDATA_  
00000BC8  16FC 002D                778      MOVE.B  #'-',(A3)+
00000BCC                           779  LISTDATALOOP2_
00000BCC  E20D                     780      LSR.B   #1,D5                           Shift to the right
00000BCE  6400 000E                781      BCC     PRINTLISTDATA2_
00000BD2  0C01 0007                782      CMPI.B  #7,D1                           Have we compared all in the data register list?
00000BD6  6700 001C                783      BEQ     FINDADDRESSREG_                  If so, time to compare address register
00000BDA  5201                     784      ADDI.B  #1,D1                           Increment counter
00000BDC  60EE                     785      BRA     LISTDATALOOP2_    
00000BDE                           786  PRINTLISTDATA2_
00000BDE  16FC 0044                787      MOVE.B  #'D',(A3)+                      Add D to goodbuffer
00000BE2  1001                     788      MOVE.B  D1,D0                           Move register number to D0.
00000BE4  0600 0030                789      ADDI.B  #$30,D0                         Convert hex to ascii
00000BE8  16C0                     790      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000BEA  16FC 002F                791      MOVE.B  #'/',(A3)+                      Add D to goodbuffer
00000BEE  7208                     792      MOVEQ   #8,D1
00000BF0  6000 0002                793      BRA     FINDADDRESSREG_        
00000BF4                           794  FINDADDRESSREG_
00000BF4  E34D                     795      LSL.W   #1,D5                           Shift to the left
00000BF6  6500 000E                796      BCS     FOUNDFIRSTADDRESS_               Is there at least 1 address register?
00000BFA  5301                     797      SUBI.B  #1,D1                           Decrement counter
00000BFC  0C01 0000                798      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000C00  6700 0064                799      BEQ     FINISHMOVEM2R                  If so, branch to finish
00000C04  60EE                     800      BRA     FINDADDRESSREG_  
00000C06                           801  FOUNDFIRSTADDRESS_
00000C06  16FC 0041                802      MOVE.B  #'A',(A3)+                      Add D to goodbuffer
00000C0A  1001                     803      MOVE.B  D1,D0                           Move register number to D0.
00000C0C  5300                     804      SUBI.B  #1,D0
00000C0E  0600 0030                805      ADDI.B  #$30,D0                         Convert hex to ascii
00000C12  16C0                     806      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000C14                           807  ADDRESSLOOP1_
00000C14  5301                     808      SUBI.B  #1,D1                           Decrement counter
00000C16  0C01 0000                809      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000C1A  6700 004A                810      BEQ     FINISHMOVEM2R                  If so, branch to finish 
00000C1E  E34D                     811      LSL.W   #1,D5                           Shift to the right
00000C20  6500 000E                812      BCS     FOUNDSECONDADDRESS_              Are there more address registers?
00000C24  5301                     813      SUBI.B  #1,D1                           Increment counter
00000C26  0C01 0000                814      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000C2A  6700 003A                815      BEQ     FINISHMOVEM2R                  If so, branch to finish 
00000C2E  60E4                     816      BRA     ADDRESSLOOP1_                    If not, repeat loop   
00000C30                           817  FOUNDSECONDADDRESS_ 
00000C30  16FC 002D                818      MOVE.B  #'-',(A3)+    
00000C34                           819  LISTADDRESSLOOP2_
00000C34  E34D                     820      LSL.W   #1,D5                           Shift to the left
00000C36  6400 000C                821      BCC     PRINTLISTADDRESS2_
00000C3A  5301                     822      SUBI.B  #1,D1                           Increment counter
00000C3C  0C01 0000                823      CMPI.B  #0,D1                           Have we compared all in the address register list?
00000C40  67B2                     824      BEQ     FINDADDRESSREG_                  If so, time to compare address register
00000C42  60F0                     825      BRA     LISTADDRESSLOOP2_    
00000C44                           826  PRINTLISTADDRESS2_
00000C44  16FC 0041                827      MOVE.B  #'A',(A3)+                      Add D to goodbuffer
00000C48  1001                     828      MOVE.B  D1,D0                           Move register number to D0.
00000C4A  5300                     829      SUBI.B  #1,D0
00000C4C  0600 0030                830      ADDI.B  #$30,D0                         Convert hex to ascii
00000C50  16C0                     831      MOVE.B  D0,(A3)+                        Move ascii number to good buffer
00000C52  6000 0012                832      BRA     FINISHMOVEM2R   
00000C56                           833      
00000C56                           834  MWORDDATAM2R
00000C56  16FC 0057                835      MOVE.B  #'W',(A3)+                      Move W to the output
00000C5A  6000 FF14                836      BRA     FINDLIST2R                  Finish the instruction
00000C5E                           837  MLONGDATAM2R
00000C5E  16FC 004C                838      MOVE.B  #'L',(A3)+                      Move L to the output
00000C62  6000 FF0C                839      BRA     FINDLIST2R                  Finish the instruction
00000C66                           840  FINISHMOVEM2R
00000C66  0C03 0001                841      CMPI.B  #1,D3
00000C6A  6700 000E                842      BEQ     ADDADDRESSWORD
00000C6E  0C03 0002                843      CMPI.B  #2,D3
00000C72  6700 000C                844      BEQ     ADDADDRESSLONGWORD
00000C76  6000 000E                845      BRA     RTN
00000C7A                           846  ADDADDRESSWORD
00000C7A  548D                     847      ADDA.L  #2,A5
00000C7C  6000 0008                848      BRA     RTN
00000C80                           849  ADDADDRESSLONGWORD
00000C80  588D                     850      ADDA.L  #4,A5
00000C82  6000 0002                851      BRA     RTN
00000C86                           852  RTN
00000C86  4E75                     853      RTS                                     Return the instruction
00000C88                           854  ********************************************************
00000C88                           855  * 0100 1101 - LEA instruction with An = 6              *     
00000C88                           856  ********************************************************
00000C88                           857  FOUR1101
00000C88  4EB9 00000CF4            858      JSR     LEAMAIN                         Jump to main output printing routine
00000C8E  16FC 002C                859      MOVE.B  #',',(A3)+                      Move a comma into the output
00000C92  16FC 0041                860      MOVE.B  #'A',(A3)+                      Move A into the output
00000C96  16FC 0036                861      MOVE.B  #'6',(A3)+                      Move 6 into the output
00000C9A  4E75                     862      RTS                                     Return the ins
00000C9C                           863  
00000C9C                           864  
00000C9C                           865  ********************************************************
00000C9C                           866  *0100 1110 - JSR & RTS                                 *     
00000C9C                           867  ********************************************************
00000C9C                           868  FOUR1110
00000C9C  BC7C 4E75                869      CMP.W   #$4E75, D6                      Is this an RTS function
00000CA0  6700 0030                870      BEQ     ITSARTS                         If so go to the ITSARTS function
00000CA4  BC7C 4E71                871      CMP.W   #$4E71, D6
00000CA8  6700 001A                872      BEQ     ITSNOP
00000CAC  16FC 004A                873      MOVE.B  #'J',(A3)+                      Move J into the output
00000CB0  16FC 0053                874      MOVE.B  #'S',(A3)+                      Move S into the output
00000CB4  16FC 0052                875      MOVE.B  #'R',(A3)+                      Move R into the output
00000CB8  16FC 0020                876      MOVE.B  #' ',(A3)+                      Move a space into the output
00000CBC  4EB9 00000D0C            877      JSR     EACODE                          call the EA code
00000CC2  4E75                     878      RTS                                     Return instruction
00000CC4                           879  ITSNOP
00000CC4  16FC 004E                880      MOVE.B  #'N',(A3)+                      Insert R into output
00000CC8  16FC 004F                881      MOVE.B  #'O',(A3)+                      Insert T into output
00000CCC  16FC 0050                882      MOVE.B  #'P',(A3)+                      Insert S into output
00000CD0  4E75                     883      RTS  
00000CD2                           884  
00000CD2                           885  ITSARTS
00000CD2  16FC 0052                886      MOVE.B  #'R',(A3)+                      Insert R into output
00000CD6  16FC 0054                887      MOVE.B  #'T',(A3)+                      Insert T into output
00000CDA  16FC 0053                888      MOVE.B  #'S',(A3)+                      Insert S into output
00000CDE  4E75                     889      RTS                                     Return the instruction
00000CE0                           890  ********************************************************
00000CE0                           891  * 0100 1111 - LEA instruction with An = 7              *     
00000CE0                           892  ********************************************************
00000CE0                           893  FOUR1111
00000CE0  4EB9 00000CF4            894      JSR     LEAMAIN                         Jump to main output printing routine
00000CE6  16FC 002C                895      MOVE.B  #',',(A3)+                      Move a comma into the output
00000CEA  16FC 0041                896      MOVE.B  #'A',(A3)+                      Move A into the output
00000CEE  16FC 0037                897      MOVE.B  #'7',(A3)+                      Move 7 into the output
00000CF2  4E75                     898      RTS                                     
00000CF4                           899  
00000CF4                           900  
00000CF4                           901  ********************************************************
00000CF4                           902  * LEA instruction                                      *     
00000CF4                           903  ********************************************************
00000CF4                           904  LEAMAIN
00000CF4  16FC 004C                905      MOVE.B  #'L',(A3)+                      Move L into the ouput
00000CF8  16FC 0045                906      MOVE.B  #'E',(A3)+                      Move E into the ouput
00000CFC  16FC 0041                907      MOVE.B  #'A',(A3)+                      Move A into the ouput
00000D00  16FC 0020                908      MOVE.B  #' ',(A3)+                      Move a space into the ouput
00000D04  4EB9 00000D0C            909      JSR     EACODE                          Call EACODE to grab the only EA
00000D0A  4E75                     910      RTS      
00000D0C                           911  ********************************************************
00000D0C                           912  * EA FOR ALL OPCODE                                    *
00000D0C                           913  ********************************************************
00000D0C                           914  EACODE
00000D0C  4244                     915      CLR.W  D4                   Clear previous data in D4
00000D0E  4245                     916      CLR.W  D5                   Clear the D5 register
00000D10  1A06                     917      MOVE.B D6,D5                Move to isolate register
00000D12  1806                     918      MOVE.B D6,D4                Move to isolate mode
00000D14  0205 0007                919      ANDI.B #$07,D5              Isolate regster
00000D18  E60C                     920      LSR.B  #3,D4                Shift to isolate mode
00000D1A  0204 0007                921      ANDI.B #$07,D4              Isolate mode
00000D1E  C8FC 0006                922      MULU   #$6,D4               Find offset for mode
00000D22  41F8 07C4                923      LEA    FORMAT,A0            Set the table to A0
00000D26  4EB0 4000                924      JSR    00(A0,D4)            Set jumptable
00000D2A  4E75                     925      RTS 
00000D2C                           926  
00000D2C                           927  
00000D2C                           928  
00000D2C                           929  
00000D2C                           930  *******************************FORMAT*************************
00000D2C                           931  * 000 - Dn INSTRUCTION                                 *               
00000D2C                           932  FORMAT000
00000D2C  16FC 0044                933      MOVE.B #'D',(A3)+           Move D into good buffer
00000D30  CAFC 0006                934      MULU   #$6,D5               Find offset for register number
00000D34  43F8 07F4                935      LEA    REGISTER,A1          Set the table to A0
00000D38  4EB1 5000                936      JSR    00(A1,D5)            Set jumptable
00000D3C  4E75                     937      RTS
00000D3E                           938  * 001 - An INSTRUCTION                                 *               
00000D3E                           939  FORMAT001
00000D3E  16FC 0041                940      MOVE.B #'A',(A3)+           Move D into good buffer
00000D42  CAFC 0006                941      MULU   #$6,D5               Find offset for register number
00000D46  43F8 07F4                942      LEA    REGISTER,A1          Set the table to A0
00000D4A  4EB1 5000                943      JSR    00(A1,D5)            Set jumptable  
00000D4E  4E75                     944      RTS
00000D50                           945  * 010 - (An) INSTRUCTION                               *               
00000D50                           946  FORMAT010  
00000D50  16FC 0028                947      MOVE.B #'(',(A3)+           Move (A) into good buffer
00000D54  16FC 0041                948      MOVE.B #'A',(A3)+           Move (A) into good buffer
00000D58  CAFC 0006                949      MULU   #$6,D5               Find offset for register number
00000D5C  43F8 07F4                950      LEA    REGISTER,A1          Set the table to A0
00000D60  4EB1 5000                951      JSR    00(A1,D5)            Set jumptable
00000D64  16FC 0029                952      MOVE.B #')',(A3)+           Move (A) into good buffer
00000D68  4E75                     953      RTS
00000D6A                           954  * 011 - (An)+ INSTRUCTION                              *               
00000D6A                           955  FORMAT011 
00000D6A                           956      *CMP.B  #7, D5              If's a 7 it's the SP which you can't do
00000D6A                           957      *BEQ        BADDATA             Return bad data
00000D6A  16FC 0028                958      MOVE.B #'(',(A3)+           Move (An)+ into good buffer
00000D6E  16FC 0041                959      MOVE.B #'A',(A3)+           Move (An)+ into good buffer
00000D72  CAFC 0006                960      MULU   #$6,D5               Find offset for register number
00000D76  43F8 07F4                961      LEA    REGISTER,A1          Set the table to A0
00000D7A  4EB1 5000                962      JSR    00(A1,D5)            Set jumptable 
00000D7E  16FC 0029                963      MOVE.B #')',(A3)+           Move (An)+ into good buffer 
00000D82  16FC 002B                964      MOVE.B #'+',(A3)+           Move (An)+ into good buffer
00000D86  4E75                     965      RTS
00000D88                           966  * 100 - -(An) INSTRUCTION                              *               
00000D88                           967  FORMAT100  
00000D88                           968      *CMP.B  #7, D5              If's a 7 it's the SP which you can't do
00000D88                           969      *BEQ        BADDATA             Return bad data
00000D88  16FC 002D                970      MOVE.B  #'-',(A3)+          Move -(An) into good buffer
00000D8C  16FC 0028                971      MOVE.B  #'(',(A3)+          Move -(An) into good buffer
00000D90  16FC 0041                972      MOVE.B  #'A',(A3)+          Move -(An) into good buffer
00000D94  CAFC 0006                973      MULU    #$6,D5              Find offset for register number
00000D98  43F8 07F4                974      LEA     REGISTER,A1         Set the table to A0
00000D9C  4EB1 5000                975      JSR     00(A1,D5)           Set jumptable 
00000DA0  16FC 0029                976      MOVE.B  #')',(A3)+          Move -(An) into good buffer
00000DA4  4E75                     977      RTS
00000DA6                           978  * 101 - (d16,An) INSTRUCTION                           *               
00000DA6                           979  FORMAT101  
00000DA6  1E38 0011                980      MOVE.B  $11, D7             This is bad data
00000DAA  6000 0196                981      BRA     GETWORDFORBADDATA   Branch to bad data that has word
00000DAE                           982  * 110 - (d8,An,Xn) INSTRUCTION                         *               
00000DAE                           983  FORMAT110 
00000DAE  1E38 0011                984      MOVE.B  $11, D7             This is bad data 
00000DB2  4E75                     985      RTS                         return bad data
00000DB4                           986  * 111 - XXX.W,XXX.L, #<data> INSTRUCTION               *               
00000DB4                           987  FORMAT111
00000DB4  CAFC 0006                988      MULU   #$6,D5               Find offset for register number
00000DB8  43F8 0824                989      LEA    ABSOLUTE,A1          Set the table to A0 
00000DBC  4EB1 5000                990      JSR    00(A1,D5)            Set jumptable 
00000DC0  4E75                     991      RTS
00000DC2                           992  
00000DC2                           993  ********************************REGISTER************************
00000DC2                           994  * 000- Register number of 0                            *               
00000DC2                           995  REGISTER000
00000DC2  16FC 0030                996      MOVE.B #'0',(A3)+           Move 0 into good buffer
00000DC6  4E75                     997      RTS
00000DC8                           998  * 001- Register number of 1                            *               
00000DC8                           999  REGISTER001
00000DC8  16FC 0031               1000      MOVE.B #'1',(A3)+           Move 1 into good buffer
00000DCC  4E75                    1001      RTS
00000DCE                          1002  * 010- Register number of 2                            *               
00000DCE                          1003  REGISTER010
00000DCE  16FC 0032               1004      MOVE.B #'2',(A3)+           Move 2 into good buffer
00000DD2  4E75                    1005      RTS
00000DD4                          1006  * 011- Register number of 3                            *               
00000DD4                          1007  REGISTER011
00000DD4  16FC 0033               1008      MOVE.B #'3',(A3)+           Move 3 into good buffer
00000DD8  4E75                    1009      RTS
00000DDA                          1010  * 100- Register number of 4                            *               
00000DDA                          1011  REGISTER100
00000DDA  16FC 0034               1012      MOVE.B #'4',(A3)+           Move 4 into good buffer
00000DDE  4E75                    1013      RTS
00000DE0                          1014  * 101- Register number of 5                            *               
00000DE0                          1015  REGISTER101
00000DE0  16FC 0035               1016      MOVE.B #'5',(A3)+           Move 5 into good buffer
00000DE4  4E75                    1017      RTS
00000DE6                          1018  * 110- Register number of 6                            *               
00000DE6                          1019  REGISTER110
00000DE6  16FC 0036               1020      MOVE.B #'6',(A3)+           Move 6 into good buffer
00000DEA  4E75                    1021      RTS
00000DEC                          1022  * 111- Register number of 7                            *               
00000DEC                          1023  REGISTER111
00000DEC  16FC 0037               1024      MOVE.B #'7',(A3)+           Move 7 into good buffer
00000DF0  4E75                    1025      RTS
00000DF2                          1026  ********************************REGISTER************************
00000DF2                          1027  
00000DF2                          1028  ********************************************************
00000DF2                          1029  * 000- (XXX).W                                         *               
00000DF2                          1030  ********************************************************
00000DF2                          1031  ABSOLUTE000
00000DF2  16FC 0024               1032      MOVE.B  #'$',(A3)+          Move $ into good buffer
00000DF6  18FC 0020               1033      MOVE.B  #' ',(A4)+          Move a space into bad buffer
00000DFA  18FC 0024               1034      MOVE.B  #'$',(A4)+          Move $ into bad buffer
00000DFE  7004                    1035      MOVEQ   #4,D0            Move counter to D0
00000E00  0C07 0001               1036      CMPI.B  #1,D7            For MOVEM
00000E04  6700 0006               1037      BEQ     ADDWORD          We have to skip over a word.
00000E08  6000 000C               1038      BRA     MOVEWORD
00000E0C                          1039  ADDWORD
00000E0C  244D                    1040      MOVEA.L A5,A2
00000E0E  548A                    1041      ADDA.L  #$2,A2
00000E10  381A                    1042      MOVE.W  (A2)+,D4
00000E12  6000 0004               1043      BRA     WORD_PREP
00000E16                          1044  MOVEWORD
00000E16  381D                    1045      MOVE.W (A5)+,D4         Move word address into D4
00000E18                          1046  WORD_PREP
00000E18  E95C                    1047      ROL.W  #4,D4                Move the MSB
00000E1A  3A04                    1048      MOVE.W D4,D5                Move word address to D5
00000E1C  0245 000F               1049      ANDI.W #$000F,D5            Clear everything except for MSB
00000E20                          1050  WORD_ASC
00000E20  0C05 0009               1051      CMPI.B #$09,D5              Is the character a number?
00000E24  6F00 000A               1052      BLE    WORD_NUM             Branch if yes.
00000E28                          1053  WORD_LET
00000E28  0605 0037               1054      ADDI.B #$37,D5          
00000E2C  6000 000A               1055      BRA    NEXT_WORD_CHAR       Convert into a prinatble ascii letter
00000E30                          1056  
00000E30                          1057  WORD_NUM
00000E30  0605 0030               1058      ADDI.B #$30,D5
00000E34  6000 0002               1059      BRA    NEXT_WORD_CHAR       Convert into a prinatble ascii number
00000E38                          1060  NEXT_WORD_CHAR
00000E38  5300                    1061      SUBI.B #1,D0                Decrement counter
00000E3A  16C5                    1062      MOVE.B D5,(A3)+             Move ascii into good buffer
00000E3C  18C5                    1063      MOVE.B D5,(A4)+             Move ascii into bad buffer
00000E3E  0C00 0000               1064      CMPI.B #0,D0                Have we moved all characters?
00000E42  6ED4                    1065      BGT    WORD_PREP            If not, repeat loop
00000E44  7601                    1066      MOVEQ  #1,D3
00000E46  4E75                    1067      RTS                         If so, return
00000E48                          1068  ********************************************************
00000E48                          1069  * 001- (XXX).L                                         *               
00000E48                          1070  ********************************************************
00000E48                          1071  ABSOLUTE001
00000E48  16FC 0024               1072      MOVE.B  #'$',(A3)+          Move $ into good buffer
00000E4C  18FC 0020               1073      MOVE.B  #' ',(A4)+
00000E50  18FC 0024               1074      MOVE.B  #'$',(A4)+          Move $ into bad buffer
00000E54  7008                    1075      MOVEQ  #8,D0                Move counter to D0
00000E56  0C07 0001               1076      CMPI.B #1,D7                For MOVEM
00000E5A  6700 0006               1077      BEQ    ADDLONGWORD          We have to skip over a word.
00000E5E  6000 000C               1078      BRA    MOVELONGWORD
00000E62                          1079  ADDLONGWORD
00000E62  244D                    1080      MOVEA.L A5,A2
00000E64  548A                    1081      ADDA.L #$2,A2
00000E66  281A                    1082      MOVE.L (A2)+,D4
00000E68  6000 0004               1083      BRA LONGWORD_PREP
00000E6C                          1084  MOVELONGWORD
00000E6C  281D                    1085      MOVE.L (A5)+,D4             Move longword address into D4
00000E6E                          1086  LONGWORD_PREP                  
00000E6E  E99C                    1087      ROL.L  #4,D4                Move the MSB
00000E70  2A04                    1088      MOVE.L D4,D5                Move longword address to D5
00000E72  0285 0000000F           1089      ANDI.L #$0000000F,D5        Clear everything except for MSB
00000E78                          1090  LONGWORD_ASC
00000E78  0C05 0009               1091      CMPI.B #$09,D5              Is the character a number?
00000E7C  6F00 000A               1092      BLE    LONGWORD_NUM         Branch if yes.
00000E80                          1093  LONGWORD_LET
00000E80  0605 0037               1094      ADDI.B #$37,D5              Convert into a prinatble ascii letter
00000E84  6000 000A               1095      BRA    NEXT_LONGWORD_CHAR
00000E88                          1096  LONGWORD_NUM 
00000E88  0605 0030               1097      ADDI.B #$30,D5              Convert into a prinatble ascii number
00000E8C  6000 0002               1098      BRA    NEXT_LONGWORD_CHAR
00000E90                          1099  NEXT_LONGWORD_CHAR
00000E90  5300                    1100      SUBI.B #1,D0                Decrement counter
00000E92  16C5                    1101      MOVE.B  D5,(A3)+            Move ascii into good buffer
00000E94  18C5                    1102      MOVE.B  D5,(A4)+
00000E96  0C00 0000               1103      CMPI.B #0,D0                Have we moved all characters?
00000E9A  6ED2                    1104      BGT    LONGWORD_PREP        If not, repeat loop
00000E9C  7602                    1105      MOVEQ  #2,D3
00000E9E  4E75                    1106      RTS                         If so, return
00000EA0                          1107  ********************************************************
00000EA0                          1108  * 010- (d16, PC)                                      *               
00000EA0                          1109  ********************************************************
00000EA0                          1110  ABSOLUTE010
00000EA0  1E38 0011               1111      MOVE.B  $11, D7             This is bad data
00000EA4  6000 009C               1112      BRA     GETWORDFORBADDATA   Branch to bad data with word
00000EA8                          1113  ********************************************************
00000EA8                          1114  * 011- (d8,PC,Xn)                                      *               
00000EA8                          1115  ********************************************************
00000EA8                          1116  ABSOLUTE011
00000EA8  1E38 0011               1117      MOVE.B  $11, D7             This is bad data
00000EAC  6000 0094               1118      BRA     GETWORDFORBADDATA   Branch to bad data with word
00000EB0                          1119  ********************************************************
00000EB0                          1120  * 100- #<data>                                         *               
00000EB0                          1121  ********************************************************
00000EB0                          1122  ABSOLUTE100
00000EB0  16FC 0023               1123      MOVE.B #'#',(A3)+           Move # into good buffer
00000EB4  16FC 0024               1124      MOVE.B #'$',(A3)+           Move # into good buffer
00000EB8  18FC 0020               1125      MOVE.B #' ',(A4)+           Insert a space into bad buffer
00000EBC  18FC 0023               1126      MOVE.B #'#',(A4)+           Insert a # into bad buffer
00000EC0  18FC 0024               1127      MOVE.B #'$',(A4)+           Insert a $ into bad buffer
00000EC4  0C01 0001               1128      CMPI.B #1,D1                Do we need to specifically pull a longword of data?
00000EC8  6700 0036               1129      BEQ    LONGWORD_DATA        If yes, branch.
00000ECC                          1130  WORD_DATA
00000ECC  7004                    1131      MOVEQ  #4,D0                Move counter to D0
00000ECE  381D                    1132      MOVE.W (A5)+,D4             Move word address into D4
00000ED0                          1133  DATA_WORD_PREP                 
00000ED0  E95C                    1134      ROL.W  #4,D4                Move the MSB
00000ED2  3A04                    1135      MOVE.W D4,D5                Move word address to D5
00000ED4  0285 0000000F           1136      ANDI.L #$0000000F,D5        Clear everything except for MSB
00000EDA                          1137  DATA_WORD_ASC
00000EDA  0C05 0009               1138      CMPI.B #$09,D5              Is the character a number?
00000EDE  6F00 000A               1139      BLE    DATA_WORD_NUM        Branch if yes.
00000EE2                          1140  DATA_WORD_LET
00000EE2  0605 0037               1141      ADDI.B #$37,D5              Convert into a prinatble ascii letter
00000EE6  6000 000A               1142      BRA    DATA_WORD_CHAR
00000EEA                          1143  DATA_WORD_NUM
00000EEA  0605 0030               1144      ADDI.B #$30,D5              Convert into a prinatble ascii number
00000EEE  6000 0002               1145      BRA    DATA_WORD_CHAR
00000EF2                          1146  DATA_WORD_CHAR
00000EF2  5300                    1147      SUBI.B #1,D0                Decrement counter
00000EF4  16C5                    1148      MOVE.B D5,(A3)+             Move ascii into good buffer
00000EF6  18C5                    1149      MOVE.B D5,(A4)+             Move ascii into bad buffer
00000EF8  0C00 0000               1150      CMPI.B #0,D0                Have we moved all characters?
00000EFC  6ED2                    1151      BGT    DATA_WORD_PREP       If not, repeat loop
00000EFE  4E75                    1152      RTS                         If so, return
00000F00                          1153  LONGWORD_DATA
00000F00  7008                    1154      MOVEQ  #8,D0                Move counter to D0
00000F02  281D                    1155      MOVE.L (A5)+,D4             Move longword address into D4
00000F04                          1156  DATA_LONGWORD_PREP              
00000F04  E99C                    1157      ROL.L  #4,D4                Move the MSB
00000F06  3A04                    1158      MOVE.W D4,D5                Move longword address to D5
00000F08  0285 0000000F           1159      ANDI.L #$0000000F,D5        Clear everything except for MSB
00000F0E                          1160  DATA_LONGWORD_ASC
00000F0E  0C05 0009               1161      CMPI.B #$09,D5              Is the character a number?
00000F12  6F00 000A               1162      BLE    DATA_LONGWORD_NUM    Branch if yes.
00000F16                          1163  DATA_LONGWORD_LET
00000F16  0605 0037               1164      ADDI.B #$37,D5              Convert into a prinatble ascii letter
00000F1A  6000 000A               1165      BRA    DATA_LONGWORD_CHAR
00000F1E                          1166  DATA_LONGWORD_NUM
00000F1E  0605 0030               1167      ADDI.B #$30,D5              Convert into a prinatble ascii number
00000F22  6000 0002               1168      BRA    DATA_LONGWORD_CHAR
00000F26                          1169  DATA_LONGWORD_CHAR
00000F26  5300                    1170      SUBI.B #1,D0                Decrement counter
00000F28  16C5                    1171      MOVE.B D5,(A3)+             Move ascii into good buffer
00000F2A  18C5                    1172      MOVE.B D5,(A4)+             Move ascii into bad buffer
00000F2C  0C00 0000               1173      CMPI.B #0,D0                Have we moved all characters?
00000F30  6ED2                    1174      BGT    DATA_LONGWORD_PREP   If not, repeat loop
00000F32  4E75                    1175      RTS                         If so, return
00000F34                          1176  
00000F34                          1177  
00000F34                          1178  
00000F34                          1179  
00000F34                          1180  
00000F34                          1181  
00000F34                          1182  
00000F34                          1183  
00000F34                          1184  
00000F34                          1185  
00000F34                          1186  
00000F34                          1187  ********************************GET BIT SIZE ************************
00000F34                          1188  * GETSIZE FUNCTION                                     *
00000F34                          1189  ********************************************************
00000F34                          1190  GETSIZE
00000F34  1606                    1191      MOVE.B  D6, D3                          Move instruction over for shifting
00000F36  EC0B                    1192      LSR.B   #6, D3                          Shift the bits 6 to the right to put the size in the LSB
00000F38  4E75                    1193      RTS                                     Retrun D3
00000F3A                          1194  * GETSIZEONEBIT FUNCTION                               *
00000F3A                          1195  GETSIZEONEBIT
00000F3A  1606                    1196      MOVE.B  D6, D3                          Move instruction over for shifting
00000F3C  E30B                    1197      LSL.B   #1, D3                          Shift 1 to the left so the MSB is the size
00000F3E  EE0B                    1198      LSR.B   #7, D3                          Shift 7 to the right so the MSB (which is the size) is in the LSB
00000F40  4E75                    1199      RTS                                     Return D3
00000F42                          1200  
00000F42                          1201  
00000F42                          1202  ********************************************************
00000F42                          1203  * Get word of data from illegal instruction
00000F42                          1204  ********************************************************
00000F42                          1205  GETWORDFORBADDATA
00000F42  18FC 0020               1206      MOVE.B   #' ',(A4)+                     Move a space into bad buffer
00000F46  18FC 0024               1207      MOVE.B  #'$',(A4)+                      Move $ into bad buffer
00000F4A  7004                    1208      MOVEQ  #4,D0                            Move counter to D0
00000F4C  381D                    1209      MOVE.W (A5)+,D4                         Move longword address into D4
00000F4E                          1210  LONGWORD_PREP1                  
00000F4E  E95C                    1211      ROL.W  #4,D4                            Move the MSB
00000F50  3A04                    1212      MOVE.W D4,D5                            Move longword address to D5
00000F52  0285 0000000F           1213      ANDI.L #$0000000F,D5                    Clear everything except for MSB
00000F58                          1214  LONGWORD_ASC1
00000F58  0C05 0009               1215      CMPI.B #$09,D5                          Is the character a number?
00000F5C  6F00 000A               1216      BLE    LONGWORD_NUM1                    Branch if yes.
00000F60                          1217  LONGWORD_LET1
00000F60  0605 0037               1218      ADDI.B #$37,D5                          Convert into a prinatble ascii letter
00000F64  6000 000A               1219      BRA    NEXT_LONGWORD_CHAR1
00000F68                          1220  LONGWORD_NUM1 
00000F68  0605 0030               1221      ADDI.B #$30,D5                          Convert into a prinatble ascii number
00000F6C  6000 0002               1222      BRA    NEXT_LONGWORD_CHAR1
00000F70                          1223  NEXT_LONGWORD_CHAR1
00000F70  5300                    1224      SUBI.B #1,D0                            Decrement counter
00000F72  18C5                    1225      MOVE.B  D5,(A4)+                        Push ASCII into bad buffer
00000F74  0C00 0000               1226      CMPI.B #0,D0                            Have we moved all characters?
00000F78  6ED4                    1227      BGT    LONGWORD_PREP1                   If not, repeat loop
00000F7A  4E75                    1228      RTS                                     If so, return
00000F7C                          1229  
00000F7C                          1230  
00000F7C                          1231  
00000F7C                          1232  
00000F7C                          1233  
00000F7C                          1234  
00000F7C                          1235         
00000F7C                          1236  *------------------ NOP & RTS ADDRESS ------------------------------------------------------
00000F7C                          1237  Decode_Constant                                 * Check for NOP & RTS
00000F7C  4EB9 00001242           1238          JSR         CLEAR_REGISTERS
00000F82  49F9 000014C6           1239          LEA         OPCODE, A4                  * Load opcode to A4
00000F88  4EB9 00000FE8           1240          JSR         UNCHANGED_CONSTANT          * NOP & RTS
00000F8E  4E75                    1241          RTS
00000F90                          1242  
00000F90                          1243  
00000F90                          1244  ********************************************************************************************
00000F90                          1245  *------------------ PRINT CURRENT ADDRESS IN ASCII -----------------------------------------
00000F90                          1246  PRINT_CURRENT_ADD
00000F90  240E                    1247          MOVE.L      A6,D2                       * Move current address into D2
00000F92  1A3C 0000               1248          MOVE.B      #0,D5                       * Set counter to read all hex
00000F96  1C3C 0008               1249          MOVE.B      #8,D6                       
00000F9A                          1250  CONVERT_HEX_ASCII
00000F9A  BC05                    1251          CMP.B       D5,D6                       * Check if last hex character is read
00000F9C  6600 0004               1252          BNE         SET_COUNTER_4               * Set counter to read 4 bits
00000FA0  4E75                    1253          RTS
00000FA2                          1254  SET_COUNTER_4
00000FA2  163C 0000               1255          MOVE.B      #0,D3                       
00000FA6  183C 0004               1256          MOVE.B      #4,D4    
00000FAA                          1257  Loop
00000FAA  B803                    1258          CMP.B       D3,D4                       * Read one character at a time
00000FAC  6700 0018               1259          BEQ         STORE_ONE_CHAR
00000FB0  E38A                    1260          LSL.L       #1,D2
00000FB2  6400 0008               1261          BCC         ADDZERO
00000FB6  5201                    1262          ADDI.B      #1,D1
00000FB8  6000 0006               1263          BRA         INCREMENT_BIT_LOOP
00000FBC                          1264  ADDZERO
00000FBC  0601 0000               1265          ADDI.B      #0,D1
00000FC0                          1266  INCREMENT_BIT_LOOP
00000FC0  5203                    1267          ADDI.B      #1,D3
00000FC2  E389                    1268          LSL.L       #1,D1
00000FC4  60E4                    1269          BRA         Loop
00000FC6                          1270  STORE_ONE_CHAR                                   * Store hex character
00000FC6  E289                    1271          LSR.L       #1,D1
00000FC8  B23C 0009               1272          CMP.B       #$9,D1
00000FCC  6D00 000A               1273          BLT         HEX_TO_ASCII_NUMBER
00000FD0  0601 0037               1274          ADDI.B      #$37,D1                     * HEX_TO_ASCII_LETTER
00000FD4  6000 0006               1275          BRA         INCREMENT_NEXT_HEX_LOOP
00000FD8                          1276  HEX_TO_ASCII_NUMBER
00000FD8  0601 0030               1277          ADDI.B      #$30,D1
00000FDC                          1278  INCREMENT_NEXT_HEX_LOOP
00000FDC  5205                    1279          ADDI.B      #1,D5
00000FDE  103C 0006               1280          MOVE.B      #6,D0
00000FE2  4E4F                    1281          TRAP        #15
00000FE4  4281                    1282          CLR.L       D1
00000FE6  60B2                    1283          BRA         CONVERT_HEX_ASCII
00000FE8                          1284  ***********************END OF PRINTING HEX ADDRESS TO ASCII *******************
00000FE8                          1285  
00000FE8                          1286  
00000FE8                          1287  ********************************************************************************************
00000FE8                          1288  * PRINT NOP OR RTS -------------------------------------------------------------------------
00000FE8                          1289  UNCHANGED_CONSTANT
00000FE8  18FC 0020               1290          MOVE.B      #' ',(A4)+
00000FEC  18FC 0020               1291          MOVE.B      #' ',(A4)+
00000FF0  18FC 0020               1292          MOVE.B      #' ',(A4)+
00000FF4  18FC 0020               1293          MOVE.B      #' ',(A4)+
00000FF8  0C56 4E71               1294          CMP.W       #$4E71,(A6)
00000FFC  6700 0014               1295          BEQ         PRINT_NOP
00001000  0C56 4E75               1296          CMP.W       #$4E75,(A6)
00001004  6700 002E               1297          BEQ         PRINT_RTS
00001008  0C56 FFFF               1298          CMP.W       #$FFFF,(A6)
0000100C  6700 0048               1299          BEQ         PRINT_NO_CODE    
00001010  4E75                    1300          RTS  
00001012                          1301  PRINT_NOP
00001012  18FC 004E               1302          MOVE.B  #'N',(A4)+
00001016  18FC 004F               1303          MOVE.B  #'O',(A4)+
0000101A  18FC 0050               1304          MOVE.B  #'P',(A4)+
0000101E  18FC 0000               1305          MOVE.B  #$00,(A4)+
00001022  43F9 000014C6           1306          LEA     OPCODE,A1
00001028  103C 000D               1307          MOVE.B  #13,D0
0000102C  4E4F                    1308          TRAP    #15
0000102E  548E                    1309          ADD.L   #$2,A6          ;increase by 2 bytes if it prints NOP
00001030  6000 F530               1310          BRA     ADDR_LOOP
00001034                          1311  PRINT_RTS
00001034  18FC 0052               1312          MOVE.B  #'R',(A4)+
00001038  18FC 0054               1313          MOVE.B  #'T',(A4)+
0000103C  18FC 0053               1314          MOVE.B  #'S',(A4)+
00001040  18FC 0000               1315          MOVE.B  #$00,(A4)+
00001044  43F9 000014C6           1316          LEA     OPCODE,A1
0000104A  103C 000D               1317          MOVE.B  #13,D0
0000104E  4E4F                    1318          TRAP    #15
00001050  548E                    1319          ADD.L   #$2,A6
00001052  6000 F50E               1320          BRA     ADDR_LOOP
00001056                          1321  PRINT_NO_CODE
00001056  18FC 004E               1322          MOVE.B  #'N',(A4)+
0000105A  18FC 004F               1323          MOVE.B  #'O',(A4)+
0000105E  18FC 0020               1324          MOVE.B  #' ',(A4)+
00001062  18FC 0044               1325          MOVE.B  #'D',(A4)+
00001066  18FC 0041               1326          MOVE.B  #'A',(A4)+
0000106A  18FC 0054               1327          MOVE.B  #'T',(A4)+
0000106E  18FC 0041               1328          MOVE.B  #'A',(A4)+
00001072  18FC 0020               1329          MOVE.B  #' ',(A4)+
00001076  18FC 0024               1330          MOVE.B  #'$',(A4)+
0000107A  143C 0000               1331          MOVE.B  #0,D2                   ;Setting counter for print Must be word size
0000107E  163C 0004               1332          MOVE.B  #4,D3
00001082  4EB9 0000109E           1333          JSR     PRINT_IMMIDIATE_DATA
00001088  18FC 0000               1334          MOVE.B  #$00,(A4)+
0000108C  43F9 000014C6           1335          LEA     OPCODE,A1
00001092  103C 000D               1336          MOVE.B  #13,D0
00001096  4E4F                    1337          TRAP    #15
00001098  548E                    1338          ADD.L   #$2,A6
0000109A  6000 F4C6               1339          BRA     ADDR_LOOP   
0000109E                          1340  
0000109E                          1341  
0000109E                          1342  ********************************************************************************************
0000109E                          1343  * PRINT_IMMIDIATE_DATA---------------------------------------------------------------------
0000109E                          1344  PRINT_IMMIDIATE_DATA
0000109E  B63C 0002               1345          CMP.B   #2,D3
000010A2  6700 0012               1346          BEQ     BYTE_SIZE
000010A6  B63C 0004               1347          CMP.B   #4,D3
000010AA  6700 0018               1348          BEQ     WORD_SIZE
000010AE  B63C 0008               1349          CMP.B   #8,D3
000010B2  6700 001E               1350          BEQ     LONG_SIZE
000010B6                          1351  BYTE_SIZE
000010B6  1016                    1352          MOVE.B  (A6),D0
000010B8  13FC 0001 000014B4      1353          MOVE.B  #1,SIZE
000010C0  6000 001E               1354          BRA     LOOP_IMMIDIATE_DATA
000010C4                          1355  WORD_SIZE
000010C4  3016                    1356          MOVE.W  (A6),D0
000010C6  13FC 0003 000014B4      1357          MOVE.B  #3,SIZE
000010CE  6000 0010               1358          BRA     LOOP_IMMIDIATE_DATA
000010D2                          1359  LONG_SIZE
000010D2  2016                    1360          MOVE.L  (A6),D0
000010D4  13FC 0003 000014B4      1361          MOVE.B  #3,SIZE
000010DC  6000 0002               1362          BRA     LOOP_IMMIDIATE_DATA  
000010E0                          1363  LOOP_IMMIDIATE_DATA    
000010E0  B602                    1364          CMP.B   D2,D3               ;D3 WIIL BE 8 FOR BYTE, 16 FOR WORD, 32 FOR LONG
000010E2  6600 0008               1365          BNE     CONTINUE_SHIFT
000010E6  4282                    1366          CLR.L   D2
000010E8  4283                    1367          CLR.L   D3       
000010EA  4E75                    1368          RTS  
000010EC                          1369  CONTINUE_SHIFT
000010EC  4EB9 00001100           1370          JSR     SHIFT_4_BIT         ;SHIFT 4 BIT TO SEE WHAT TYPE OF 
000010F2                          1371  HEX_F    
000010F2  B23C 000F               1372          CMP.B   #hexF,D1
000010F6  6700 00D0               1373          BEQ     PRINT_F  
000010FA                          1374  ADD_COUNTER
000010FA  5202                    1375          ADDI.B  #1,D2
000010FC  4281                    1376          CLR.L   D1
000010FE  60E0                    1377          BRA     LOOP_IMMIDIATE_DATA
00001100                          1378  
00001100                          1379  * SHIFT_4_BIT--------------------------------------------------------------------
00001100                          1380  SHIFT_4_BIT
00001100  183C 0000               1381          MOVE.B   #0,D4
00001104  1A3C 0004               1382          MOVE.B   #4,D5              ;SHIFTS FROM 
00001108                          1383  START_SHIFT_4_BIT   
00001108  BA04                    1384          CMP.B    D4,D5
0000110A  6600 0006               1385          BNE      SHIFT_SIZE 
0000110E  E289                    1386          LSR.L    #1,D1
00001110  4E75                    1387          RTS
00001112                          1388  SHIFT_SIZE 
00001112  B63C 0002               1389          CMP.B   #2,D3
00001116  6700 0012               1390          BEQ     SHIFT_SIZE_BYTE
0000111A  B63C 0004               1391          CMP.B   #4,D3
0000111E  6700 0014               1392          BEQ     SHIFT_SIZE_WORD
00001122  B63C 0008               1393          CMP.B   #8,D3
00001126  6700 0016               1394          BEQ     SHIFT_SIZE_LONG
0000112A                          1395  SHIFT_SIZE_BYTE
0000112A  E308                    1396          LSL.B   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
0000112C  6500 0020               1397          BCS     ADDONE
00001130  6000 0012               1398          BRA     ADD_ZERO
00001134                          1399  SHIFT_SIZE_WORD
00001134  E348                    1400          LSL.W   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
00001136  6500 0016               1401          BCS     ADDONE
0000113A  6000 0008               1402          BRA     ADD_ZERO
0000113E                          1403  SHIFT_SIZE_LONG
0000113E  E388                    1404          LSL.L   #1, D0              ;COPY OF THE DATA WE NEED TO SHIFT
00001140  6500 000C               1405          BCS     ADDONE
00001144                          1406  ADD_ZERO        
00001144  0601 0000               1407          ADDI.B  #%0, D1                    * add 0 bit to d2
00001148  E381                    1408          ASL.L   #1, D1     
0000114A  6000 000A               1409          BRA     COUNTER_SHIFT_4_BIT 
0000114E                          1410  ADDONE        
0000114E  5201                    1411          ADDI.B  #%1, D1                    * add 1 bit to d2
00001150  E381                    1412          ASL.L   #1, D1
00001152  6000 0002               1413          BRA     COUNTER_SHIFT_4_BIT 
00001156                          1414  COUNTER_SHIFT_4_BIT
00001156  5284                    1415          ADDI.L  #1,D4
00001158  60AE                    1416          BRA     START_SHIFT_4_BIT
0000115A                          1417  
0000115A                          1418  ********************************************************************************************
0000115A                          1419  * PRINT_ASCCI_HEX---------------------------------------------------------------------
0000115A                          1420  PRINT_0
0000115A  18FC 0030               1421      MOVE.B  #'0',(A4)+
0000115E  609A                    1422      BRA     ADD_COUNTER
00001160                          1423  PRINT_1
00001160  18FC 0031               1424      MOVE.B  #'1',(A4)+
00001164  6094                    1425      BRA     ADD_COUNTER
00001166                          1426  PRINT_2
00001166  18FC 0032               1427      MOVE.B  #'2',(A4)+
0000116A  608E                    1428      BRA     ADD_COUNTER
0000116C                          1429  PRINT_3
0000116C  18FC 0033               1430      MOVE.B  #'3',(A4)+
00001170  6088                    1431      BRA     ADD_COUNTER
00001172                          1432  PRINT_4
00001172  18FC 0034               1433      MOVE.B  #'4',(A4)+
00001176  6082                    1434      BRA     ADD_COUNTER
00001178                          1435  PRINT_5
00001178  18FC 0035               1436      MOVE.B  #'5',(A4)+
0000117C  6000 FF7C               1437      BRA     ADD_COUNTER
00001180                          1438  PRINT_6
00001180  18FC 0036               1439      MOVE.B  #'6',(A4)+
00001184  6000 FF74               1440      BRA     ADD_COUNTER
00001188                          1441  PRINT_7
00001188  18FC 0037               1442      MOVE.B  #'7',(A4)+
0000118C  6000 FF6C               1443      BRA     ADD_COUNTER
00001190                          1444  PRINT_8
00001190  18FC 0038               1445      MOVE.B  #'8',(A4)+
00001194  6000 FF64               1446      BRA     ADD_COUNTER
00001198                          1447  PRINT_9
00001198  18FC 0039               1448      MOVE.B  #'9',(A4)+
0000119C  6000 FF5C               1449      BRA     ADD_COUNTER
000011A0                          1450  PRINT_A
000011A0  18FC 0041               1451      MOVE.B  #'A',(A4)+
000011A4  6000 FF54               1452      BRA     ADD_COUNTER
000011A8                          1453  PRINT_B
000011A8  18FC 0042               1454      MOVE.B  #'B',(A4)+
000011AC  6000 FF4C               1455      BRA     ADD_COUNTER
000011B0                          1456  PRINT_C
000011B0  18FC 0043               1457      MOVE.B  #'C',(A4)+
000011B4  6000 FF44               1458      BRA     ADD_COUNTER
000011B8                          1459  PRINT_D
000011B8  18FC 0044               1460      MOVE.B  #'D',(A4)+
000011BC  6000 FF3C               1461      BRA     ADD_COUNTER
000011C0                          1462  PRINT_E
000011C0  18FC 0045               1463      MOVE.B  #'E',(A4)+
000011C4  6000 FF34               1464      BRA     ADD_COUNTER
000011C8                          1465  PRINT_F
000011C8  18FC 0046               1466      MOVE.B  #'F',(A4)+
000011CC  6000 FF2C               1467      BRA     ADD_COUNTER
000011D0                          1468  
000011D0                          1469      
000011D0                          1470  ********************************************************************************************
000011D0                          1471  *------------------ KEY -  -----------------------------------------------------------------
000011D0                          1472  * Desctiption:
000011D0                          1473  * Expect:       DO, D1, A1 to be empty
000011D0                          1474  * 
000011D0                          1475  *------------------ Prompt User for Enter, R, or Q -----------------------------------------
000011D0                          1476  GETKEY
000011D0  43F9 00001370           1477          LEA         PROMPTOPTIONS, A1            * Load the prompt message
000011D6  103C 000E               1478          MOVE.B      #14,D0
000011DA  4E4F                    1479          TRAP        #15 
000011DC  13FC 0000 000014B0      1480          MOVE.B      #$00, LINE_COUNT            * Reset Line Count 
000011E4  103C 0005               1481          MOVE.B      #5, D0                      * Log keyboard input
000011E8  4E4F                    1482          TRAP        #15                 
000011EA  B23C 000D               1483          CMP.B       #$D, D1                     * Compare the key press with ENTER
000011EE  6700 0028               1484          BEQ         OPCODESETUP         
000011F2  B23C 0072               1485          CMP.B       #$72, D1                    * Compare the key press with R
000011F6  6700 0030               1486          BEQ         RESTART             
000011FA  B23C 0052               1487          CMP.B       #$52, D1                    * Compare the key press with r
000011FE  6700 0028               1488          BEQ         RESTART             
00001202  B23C 0071               1489          CMP.B       #$71, D1                    * Compare the key press with q
00001206  6700 0068               1490          BEQ         END_PROGRAM             
0000120A  B23C 0051               1491          CMP.B       #$51, D1                    * Compare the key press with Q
0000120E  6700 0060               1492          BEQ         END_PROGRAM            
00001212  B23C 005D               1493          CMP.B       #$5D, D1                    * Check the key press with ENTER
00001216  66B8                    1494          BNE         GETKEY              
00001218                          1495  OPCODESETUP
00001218  103C 000B               1496          MOVE.B  #11, D0                         * Task 11 - Clear screen
0000121C  323C FF00               1497          MOVE.W  #$FF00, D1          
00001220  4E4F                    1498          TRAP    #15                 
00001222  4281                    1499          CLR.L   D1
00001224  4280                    1500          CLR.L   D0
00001226  4E75                    1501          RTS                 
00001228                          1502  *------------------ RESTART ----------------------------------------------------------------
00001228                          1503  RESTART
00001228  4EB8 1218               1504          JSR         OPCODESETUP
0000122C  4EB9 00001242           1505          JSR         CLEAR_REGISTERS
00001232  2E7C 01000000           1506          MOVEA.L     #$01000000,A7       Reset stack pointer
00001238  2C7C 01000000           1507          MOVEA.L     #$01000000,A6       Reset stack pointer
0000123E  6000 F1C0               1508          BRA         START
00001242                          1509          
00001242                          1510  ********************************************************************************************
00001242                          1511  *------------------ CLEAR REGISTERS --------------------------------------------------------
00001242                          1512  * Desctiption:
00001242                          1513  * 
00001242                          1514  CLEAR_REGISTERS
00001242  4280                    1515          CLR.L   D0
00001244  4285                    1516          CLR.L   D5
00001246  4282                    1517          CLR.L   D2
00001248  4281                    1518          CLR.L   D1
0000124A  4283                    1519          CLR.L   D3
0000124C  4284                    1520          CLR.L   D4
0000124E  4286                    1521          CLR.L   D6
00001250  227C 00000000           1522          MOVE.L  #$00000000,A1
00001256  247C 00000000           1523          MOVE.L  #$00000000,A2
0000125C  267C 00000000           1524          MOVE.L  #$00000000,A3
00001262  287C 00000000           1525          MOVE.L  #$00000000,A4
00001268  2A7C 00000000           1526          MOVE.L  #$00000000,A5
0000126E  4E75                    1527          RTS
00001270                          1528  
00001270                          1529  ********************************************************************************************
00001270                          1530  ********************************************************************************************
00001270                          1531  ********************************************************************************************
00001270                          1532  END_PROGRAM
00001270  FFFF FFFF               1533          SIMHALT             ; halt simulator
00001274                          1534  ********************************************************************************************
00001274                          1535  ********************************************************************************************
00001274                          1536  ********************************************************************************************
00001274                          1537  
00001274                          1538  
00001274                          1539  ********************************************************************************************
00001274                          1540  * VARIABLES & MESSAGES ---------------------------------------------------------------------
00001274  =0000000D               1541  CR        EQU       $0D
00001274  =0000000A               1542  LF        EQU       $0A
00001274                          1543  * Hex values -------------------------------------------------------------------------------  
00001274  =00000000               1544  numzero     EQU     0  
00001274  =00000001               1545  numone      EQU     1
00001274  =00000002               1546  numtwo      EQU     2
00001274  =00000003               1547  numthree    EQU     3
00001274  =00000004               1548  numfour     EQU     4
00001274  =00000005               1549  numfive     EQU     5
00001274  =00000006               1550  numsix      EQU     6
00001274  =00000007               1551  numseven    EQU     7
00001274  =00000008               1552  numeight    EQU     8
00001274  =00000009               1553  numnine     EQU     9
00001274  =0000000A               1554  numA        EQU     10
00001274  =0000000B               1555  numB        EQU     11
00001274  =0000000C               1556  numC        EQU     12
00001274  =0000000D               1557  numD        EQU     13
00001274  =0000000E               1558  numE        EQU     $E
00001274  =0000000F               1559  numF        EQU     15
00001274                          1560  * Binary Hex Values ------------------------------------------------------------------------
00001274  =00000000               1561  hex0        EQU     %0000   
00001274  =00000001               1562  hex1        EQU     %0001   
00001274  =00000002               1563  hex2        EQU     %0010   
00001274  =00000003               1564  hex3        EQU     %0011   
00001274  =00000004               1565  hex4        EQU     %0100   
00001274  =00000005               1566  hex5        EQU     %0101   
00001274  =00000006               1567  hex6        EQU     %0110   
00001274  =00000007               1568  hex7        EQU     %0111   
00001274  =00000008               1569  hex8        EQU     %1000   
00001274  =00000009               1570  hex9        EQU     %1001   
00001274  =0000000A               1571  hexA        EQU     %1010   
00001274  =0000000B               1572  hexB        EQU     %1011   
00001274  =0000000C               1573  hexC        EQU     %1100   
00001274  =0000000D               1574  hexD        EQU     %1101   
00001274  =0000000E               1575  hexE        EQU     %1110   
00001274  =0000000F               1576  hexF        EQU     %1111   
00001274                          1577  * OP Codes ---------------------------------------------------------------------------------
00001274  =00000000               1578  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
00001274  =00000001               1579  bin0001     EQU     %0001   ;MOVE.B
00001274  =00000002               1580  bin0010     EQU     %0010   ;MOVE.L
00001274  =00000003               1581  bin0011     EQU     %0011   ;MOVE.W
00001274  =00000004               1582  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
00001274  =00000005               1583  bin0101     EQU     %0101   ;SUBQ
00001274  =00000006               1584  bin0110     EQU     %0110   ;Bcc
00001274  =00000007               1585  bin0111     EQU     %0111   ;MOVEQ
00001274  =00000008               1586  bin1000     EQU     %1000   ;DIVU.W
00001274  =00000009               1587  bin1001     EQU     %1001   ;SUB, SUBA
00001274  =0000000B               1588  bin1011     EQU     %1011   ;CMP, CMPA, EOR
00001274  =0000000C               1589  bin1100     EQU     %1100   ;AND, MULS.W
00001274  =0000000D               1590  bin1101     EQU     %1101   ;ADD, ADDA
00001274  =0000000E               1591  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
00001274                          1592  * MESSAGES ---------------------------------------------------------------------------------------------
00001274= 20 20 20 20 20 20 ...   1593  GREETING        DC.B    '       HELLO THERE, WELCOME TO AWESOME DISASSEMBLER'
000012A7= 0D 0A 4E 6F 74 65 ...   1594                  DC.B    CR,LF,'Note: Addressess must be in HEX'
000012C8= 0D 0A 4E 6F 74 65 ...   1595                  DC.B    CR,LF,'Note: Addressess must be in caps'
000012EA= 0D 0A 20 20 20 20 ...   1596                  DC.B    CR,LF,'    : Starting Address must be greater than 70000',CR,LF,CR,LF,CR,LF,0 
00001324= 454E 5445 5220 4...     1597  PROMPTSADDR     DC.W    'ENTER A STARTING ADDRESS (ON CAPS): ',0
0000134A= 454E 5445 5220 4...     1598  PROMPTEADDR     DC.W    'ENTER A ENDING ADDRESS   (ON CAPS): ',0
00001370= 50 72 65 73 73 3A ...   1599  PROMPTOPTIONS    DC.B    'Press: ENTER to Continue || Q or q to Quit || R OR r to Restart',CR,LF,CR,LF,0
000013B4                          1600  * ERROR MSG --------------------------------------------------------------------------------------------
000013B4= 45 52 52 4F 52 3A ...   1601  INVALIDSADDR        DC.B    'ERROR: INVALID STARTING ADDRESS VERSUS ENDING.',CR,LF,CR,LF,0
000013E7= 45 52 52 4F 52 3A ...   1602  ERRORINPUTSIZE      DC.B    'ERROR: INVALID ADDRESS SIZE',CR,LF,CR,LF,0
00001407= 45 52 52 4F 52 3A ...   1603  INVALIDCHAR         DC.B    'ERROR: INVALID ADDRESS CHARACTER',CR,LF,CR,LF,0
0000142C= 45 52 52 4F 52 3A ...   1604  SGTEM               DC.B    'ERROR: STARTING ADDRESS > ENDING ADDRESS',CR,LF,CR,LF,0
00001459= 45 52 52 4F 52 3A ...   1605  ODD_ADD_MSG         DC.B    'ERROR: ODD ADDRESS',CR,LF,CR,LF,0
00001470= 45 52 52 4F 52 3A ...   1606  STARTING_ADDR_7     DC.B    'ERROR: Invalid starting adress - must be greater than 7000',CR,LF,CR,LF,0
000014AF                          1607  * VARIABLES --------------------------------------------------------------------------------------------
000014B0                          1608  LINE_COUNT      DS.L    1
000014B4                          1609  SIZE            DS.B    1
000014B6                          1610  INPUT_HEX       DS.L    1   * Use to temp hold starting and ending address
000014BA                          1611  STARTING_ADD    DS.L    1   ;1 is the size, if I change to 4 then array size changes
000014BE                          1612  ENDING_ADD      DS.L    1
000014C2                          1613  BADCODE         DS.L    1  
000014C6= 00000001                1614  OPCODE          DC.L    1
000014CA                          1615          
000014CA                          1616          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE            824
ABSOLUTE000         DF2
ABSOLUTE001         E48
ABSOLUTE010         EA0
ABSOLUTE011         EA8
ABSOLUTE100         EB0
ADDADDRESSLONGWORD  C80
ADDADDRESSWORD      C7A
ADDLONGWORD         E62
ADDONE              114E
ADDRESSLOOP1        9D8
ADDRESSLOOP1_       C14
ADDRESSLOOP1_PREDEC  AAC
ADDR_LOOP           562
ADDWORD             E0C
ADDZERO             FBC
ADD_COUNTER         10FA
ADD_ZERO            1144
BADCODE             14C2
BADSIZES            462
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
BYTEDATA            890
BYTE_SIZE           10B6
CLEAR_REGISTERS     1242
CONTINUE_ADDR_LOOP  586
CONTINUE_SHIFT      10EC
CONTINUE_STORE      520
CONVERT_HEX_ASCII   F9A
COUNTER_SHIFT_4_BIT  1156
CR                  D
DATA_ASC9           646
DATA_CHAR9          65E
DATA_LET9           64E
DATA_LONGWORD_ASC   F0E
DATA_LONGWORD_CHAR  F26
DATA_LONGWORD_LET   F16
DATA_LONGWORD_NUM   F1E
DATA_LONGWORD_PREP  F04
DATA_NUM9           656
DATA_PREP9          63C
DATA_WORD_ASC       EDA
DATA_WORD_CHAR      EF2
DATA_WORD_LET       EE2
DATA_WORD_NUM       EEA
DATA_WORD_PREP      ED0
DECODE_CONSTANT     F7C
EACODE              D0C
ENDING_ADD          14BE
END_PROGRAM         1270
ERRORINPUTSIZE      13E7
FINDADDRESSREG      9B8
FINDADDRESSREG_     BF4
FINDADDRESSREG_LOOP  A8C
FINDADDRESSREG_PREDEC  A8A
FINDDATAREG         94A
FINDDATAREG_        B86
FINDDATAREG_PREDEC  A1C
FINDLIST2M          930
FINDLIST2R          B70
FINISHCLR           8A8
FINISHMOVEM2R       C66
FINISHMOVEMR2M      AF0
FORMAT              7C4
FORMAT000           D2C
FORMAT001           D3E
FORMAT010           D50
FORMAT011           D6A
FORMAT100           D88
FORMAT101           DA6
FORMAT110           DAE
FORMAT111           DB4
FOUNDFIRSTADDRESS   9CA
FOUNDFIRSTADDRESS_  C06
FOUNDFIRSTADDRESS_PREDEC  A9E
FOUNDFIRSTDATA      95C
FOUNDFIRSTDATA_     B98
FOUNDFIRSTDATA_PREDEC  A2E
FOUNDSECONDADDRESS  9F4
FOUNDSECONDADDRESS_  C30
FOUNDSECONDADDRESS_PREDEC  AC8
FOUNDSECONDDATA     98C
FOUNDSECONDDATA_    BC8
FOUNDSECONDDATA_PREDEC  A5E
FOUR0000            842
FOUR0001            848
FOUR0010            85C
FOUR0011            8B4
FOUR0100            8C8
FOUR0101            8CE
FOUR0110            8E2
FOUR0111            8E8
FOUR1000            8FC
FOUR1001            B0E
FOUR1010            B22
FOUR1011            B28
FOUR1100            B3C
FOUR1101            C88
FOUR1110            C9C
FOUR1111            CE0
FOURTABLE           744
GETBADDATA          638
GETKEY              11D0
GETSIZE             F34
GETSIZEONEBIT       F3A
GETWORDFORBADDATA   F42
GET_INSTRUCTION     66A
GREETING            1274
HEX0                0
HEX1                1
HEX2                2
HEX3                3
HEX4                4
HEX5                5
HEX6                6
HEX7                7
HEX8                8
HEX9                9
HEXA                A
HEXB                B
HEXC                C
HEXD                D
HEXE                E
HEXF                F
HEX_F               10F2
HEX_TO_ASCII_NUMBER  FD8
INCREMENT_BIT_LOOP  FC0
INCREMENT_NEXT_HEX_LOOP  FDC
INPUT_HEX           14B6
INSTR0000           714
INSTR0001           716
INSTR0010           718
INSTR0011           71A
INSTR0100           71C
INSTR0101           702
INSTR0110           734
INSTR0111           736
INSTR1000           742
INSTR1001           738
INSTR1010           708
INSTR1011           73A
INSTR1100           73C
INSTR1101           73E
INSTR1110           740
INSTR1111           70E
INVALIDCHAR         1407
INVALIDSADDR        13B4
INVALID_CHARACTER   476
ITSARTS             CD2
ITSNOP              CC4
LEAMAIN             CF4
LETTERS             4AA
LF                  A
LINE_COUNT          14B0
LISTADDRESSLOOP2    9F8
LISTADDRESSLOOP2_   C34
LISTADDRESSLOOP2_PREDEC  ACC
LISTDATALOOP1       968
LISTDATALOOP1_      BA4
LISTDATALOOP1_PREDEC  A3A
LISTDATALOOP2       990
LISTDATALOOP2_      BCC
LISTDATALOOP2_PREDEC  A62
LONGDATA            8A0
LONGDATAR2M         B06
LONGWORD_ASC        E78
LONGWORD_ASC1       F58
LONGWORD_DATA       F00
LONGWORD_LET        E80
LONGWORD_LET1       F60
LONGWORD_NUM        E88
LONGWORD_NUM1       F68
LONGWORD_PREP       E6E
LONGWORD_PREP1      F4E
LONG_SIZE           10D2
LOOP                FAA
LOOP_IMMIDIATE_DATA  10E0
MLONGDATAM2R        C5E
MOVELONGWORD        E6C
MOVEWORD            E16
MWORDDATAM2R        C56
NEXT_LONGWORD_CHAR  E90
NEXT_LONGWORD_CHAR1  F70
NEXT_WORD_CHAR      E38
NUMA                A
NUMB                B
NUMBER              4A2
NUMC                C
NUMD                D
NUME                E
NUMEIGHT            8
NUMF                F
NUMFIVE             5
NUMFOUR             4
NUMNINE             9
NUMONE              1
NUMSEVEN            7
NUMSIX              6
NUMTHREE            3
NUMTWO              2
NUMZERO             0
ODD_ADD_MSG         1459
ODD_TEST            4C0
ODD_TEST_FAIL       4D8
OPCODE              14C6
OPCODESETUP         1218
OPCODE_JMP_TABLE    682
PRINTBADDATA        5D2
PRINTLISTADDRESS2   A0A
PRINTLISTADDRESS2_  C44
PRINTLISTADDRESS2_PREDEC  ADE
PRINTLISTDATA1      984
PRINTLISTDATA1_     BC0
PRINTLISTDATA1_PREDEC  A56
PRINTLISTDATA2      9A2
PRINTLISTDATA2_     BDE
PRINTLISTDATA2_PREDEC  A74
PRINT_0             115A
PRINT_1             1160
PRINT_2             1166
PRINT_3             116C
PRINT_4             1172
PRINT_5             1178
PRINT_6             1180
PRINT_7             1188
PRINT_8             1190
PRINT_9             1198
PRINT_A             11A0
PRINT_B             11A8
PRINT_C             11B0
PRINT_CURRENT_ADD   F90
PRINT_D             11B8
PRINT_E             11C0
PRINT_F             11C8
PRINT_IMMIDIATE_DATA  109E
PRINT_NOP           1012
PRINT_NO_CODE       1056
PRINT_RTS           1034
PROMPTEADDR         134A
PROMPTOPTIONS       1370
PROMPTSADDR         1324
READHEX             48A
READ_EADDR          432
READ_SADDR          414
REGISTER            7F4
REGISTER000         DC2
REGISTER001         DC8
REGISTER010         DCE
REGISTER011         DD4
REGISTER100         DDA
REGISTER101         DE0
REGISTER110         DE6
REGISTER111         DEC
RESTART             1228
RTN                 C86
SETUPBADDATA        5FC
SETUPOPCODE         5E6
SET_COUNTER_4       FA2
SGTE                54E
SGTEM               142C
SHIFT_4_BIT         1100
SHIFT_SIZE          1112
SHIFT_SIZE_BYTE     112A
SHIFT_SIZE_LONG     113E
SHIFT_SIZE_WORD     1134
SIZE                14B4
START               400
STARTING_ADD        14BA
STARTING_ADDR_7     1470
START_SHIFT_4_BIT   1108
STORE               4B2
STORE_ADDRESS       4F4
STORE_E             53C
STORE_ENDING        532
STORE_ONE_CHAR      FC6
UNCHANGED_CONSTANT  FE8
VALIDATE_STORE      44E
WORDDATA            898
WORDDATAR2M         AFE
WORD_ASC            E20
WORD_DATA           ECC
WORD_LET            E28
WORD_NUM            E30
WORD_PREP           E18
WORD_SIZE           10C4
